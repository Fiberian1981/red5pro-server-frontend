/*!
 * 
 *   red5pro-sdk - Red5 Pro HTML Publisher and Subscriber SDK.
 *   Author: Infrared5 Inc.
 *   Version: 5.4.5
 *   Url: https://github.com/red5pro/red5pro-html-sdk#readme
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["red5prosdk"] = factory();
	else
		root["red5prosdk"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 208);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(91);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fatal = exports.error = exports.warn = exports.debug = exports.info = exports.trace = exports.getLogger = exports.establishLogger = exports.LEVELS = undefined;

var _browserBunyan = __webpack_require__(95);

var _bunyanWriter = __webpack_require__(118);

var logger = void 0;

var formatMessage = function formatMessage(dispatcher) {
  return function (message) {
    return '(' + dispatcher + ') ' + message;
  };
};

var decorate = function decorate(level) {
  return function (source, message) {
    logger[level](formatMessage(source)(message));
  };
};

/*
 * The log levels supported.
 */
var LEVELS = exports.LEVELS = {
  TRACE: 'trace',
  INFO: 'info',
  DEBUG: 'debug',
  WARN: 'warn',
  ERROR: 'error',
  FATAL: 'fatal'

  /**
   * Establish logger to use at level.
   *
   * @param {String} level
   *        The level type from `LEVELS`.
   * @param {Array} streamList
   *        The streamList to use in creating bunyon-based logger.
   *
   * @private
   */
};var establishLogger = exports.establishLogger = function establishLogger(level) {
  var streamList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  var streams = [];
  streams.push({
    level: level,
    stream: new _bunyanWriter.RawStream(),
    type: 'raw'
  });
  if (streamList) {
    var list = streamList.map(function (item) {
      item.level = level;
    });
    streams = streams.concat(list);
  }
  logger = (0, _browserBunyan.createLogger)({
    level: level,
    name: 'red5pro-sdk',
    streams: streams
  });
};

/**
 * Return the determined logger instance.
 *
 * @return {Object}
 *
 * @private
 */
var getLogger = exports.getLogger = function getLogger() {
  return logger;
};

/* Quick access to logger level types. */
var trace = exports.trace = decorate(LEVELS.TRACE);
var info = exports.info = decorate(LEVELS.INFO);
var debug = exports.debug = decorate(LEVELS.DEBUG);
var warn = exports.warn = decorate(LEVELS.WARN);
var error = exports.error = decorate(LEVELS.ERROR);
var fatal = exports.fatal = decorate(LEVELS.FATAL);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = __webpack_require__(62);

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = __webpack_require__(5);

var _errors = __webpack_require__(113);

var _metadataUtil = __webpack_require__(112);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rtmpSubscriberAssignments = [];

/* Properties and methods related to interaction with the screenfull.js library. */
var fullscreenHandlers = [];
var screenfullHandlerAssigned = false;
function enableScreenfullHandler() {
  if (!screenfullHandlerAssigned && window.screenfull && window.screenfull.enabled) {
    screenfullHandlerAssigned = true;
    window.screenfull.onchange(function () {
      var i = void 0,
          length = fullscreenHandlers.length;
      for (i = 0; i < length; i++) {
        fullscreenHandlers[i](window.screenfull.isFullscreen);
      }
    });
  }
}

/* Properties and methods related to device browser orientation change. */
var orientationHandlers = [];
function onorientationchange(event) {
  // eslint-disable-line no-unused-vars
  var screenOrientation = screen.orientation ? screen.orientation.angle : undefined;
  var orientationValue = typeof screenOrientation === 'undefined' ? window.matchMedia("(orientation: portrait)").matches ? 0 : 90 : screenOrientation;
  var i = void 0,
      length = orientationHandlers.length;
  (0, _log.debug)('[window:onorientationchange]', 'orientation(' + orientationValue + ').');
  for (i = 0; i < length; i++) {
    orientationHandlers[i]((orientationValue + 90) % 360);
  }
}

/* Properies and methods related to window close operation. */
var closeHandlers = [];
var hasOnWindowClose = false;
function onwindowclose(e) {
  // eslint-disable-line no-unused-vars
  //  closeHandlers.forEach(h => h())
  var i = void 0,
      length = closeHandlers.length;
  for (i = 0; i < length; i++) {
    closeHandlers[i]();
  }
  hasOnWindowClose = true;
  // Returning a string value forces a leaving confirmation popup on the browser.
  //  e.returnValue = 'goodbye'
  //  return 'goodbye'
}

/* Check to see what the current flash version is, if plugin is enabled. */
// https://github.com/videojs/video.js/blob/master/src/js/tech/flash.js#L476
var flashVersion = function flashVersion() {
  var version = '0,0,0';
  // IE
  try {
    version = new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

    // other browsers
  } catch (e) {
    try {
      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
      }
    } catch (err) {
      // nada
    }
  }
  return version.split(',');
};

/* Shim for `requestAnimationFrame` of browser. */
var requestFrame = function (time) {
  return window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (fn) {
    return window.setTimeout(fn, time);
  };
}(1000);

var hasAdapterShim = window.adapter;

/* Browser test to see if Mozilla-based. */
var isMoz = !!navigator.mozGetUserMedia;

/* Browser test to see if Edge-based. */
var isIE = false || !!document.documentMode;
var isEdge = hasAdapterShim ? window.adapter.browserDetails.browser.toLowerCase() === 'edge' : !isIE && !!window.StyleMedia;

/* Determine if current browser has touch capabilities. */
var _isTouchEnabled = 'ontouchstart' in window || window.DocumentTouch && window.document instanceof window.DocumentTouch;

// If developer has not used adapter.js.
if (!hasAdapterShim) {
  navigator.getUserMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia;
}

/* Proxy to browser-based, specific functions. */
exports.default = {

  requestFrame: requestFrame,

  getIsMoz: function getIsMoz() {
    return isMoz;
  },

  getIsEdge: function getIsEdge() {
    return isEdge;
  },

  isTouchEnabled: function isTouchEnabled() {
    return _isTouchEnabled;
  },

  supportsWebSocket: function supportsWebSocket() {
    return !!window.WebSocket;
  },

  supportsHLS: function supportsHLS() {
    var el = document.createElement('video');
    return el.canPlayType('application/vnd.apple.mpegURL').length > 0 || el.canPlayType('application/x-mpegURL').length > 0 || el.canPlayType('audio/mpegurl').length > 0 || el.canPlayType('audio/x-mpegurl').length > 0;
  },

  supportsFlashVersion: function supportsFlashVersion(version) {
    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.';

    return flashVersion()[0] >= version.split(delimiter)[0];
  },

  resolveElement: function resolveElement(id) {
    try {
      var el = document.getElementById(id);
      if (!el) {
        throw new _errors.NoElementFoundError('Element with id(' + id + ') could not be found.');
      }
      return el;
    } catch (e) {
      throw new _errors.NoElementFoundError('Error in accessing element with id(' + id + '). ' + e.message);
    }
  },

  createWebSocket: function createWebSocket(url) {
    return new WebSocket(url);
  },

  setVideoSource: function setVideoSource(videoElement, mediaStream) {
    var autoplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    videoElement.onloadedmetadata = function () {
      (0, _log.debug)('[videoelement:event]', 'loadedmetadata');
      (0, _log.debug)('[video:constraints]', 'Video actual dimensions are: ' + videoElement.videoWidth + ', ' + videoElement.videoHeight);
    };
    if ('srcObject' in videoElement) {
      videoElement.srcObject = mediaStream;
    } else if (isMoz) {
      videoElement['mozSrcObject'] = mediaStream;
    } else {
      videoElement.src = window.URL.createObjectURL(mediaStream);
    }
    if (autoplay) {
      try {
        var maybePromise = videoElement.play();
        if (maybePromise) {
          maybePromise.then(function () {
            return (0, _log.debug)('[setVideoSource:action]', 'play (START)');
          }).catch(function (err) {
            return (0, _log.warn)('[setVideoSource:action]', 'play (FAULT) ' + (err.message ? err.message : err));
          });
        }
      } catch (e) {
        // Mobile Browsers: Uncaught (in promise) DOMException: play() can only be initiated by a user gesture.
        (0, _log.warn)('[setVideoSource:action]', 'play (CATCH::FAULT) ' + e.message);
        try {
          videoElement.setAttribute('autoplay', false);
          videoElement.pause();
        } catch (err) {
          (0, _log.warn)('[setVideoSource:action]', 'pause (CATCH::FAULT) ' + err.message);
        }
      }
    } else {
      try {
        videoElement.setAttribute('autoplay', false);
        videoElement.pause();
      } catch (e) {
        // nada.
      }
    }
  },

  injectScript: function injectScript(url) {
    var dfd = new _promise.DeferredPromise();
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.onload = function () {
      dfd.resolve();
    };
    script.onreadystatechange = function () {
      if (script.readyState === 'loaded' || script.readyState === 'complete') {
        script.onreadystatechange = null;
        dfd.resolve();
      }
    };
    script.src = url;
    document.getElementsByTagName('head')[0].appendChild(script);
    return dfd.promise;
  },

  gUM: function gUM(constraints) {
    return (navigator.mediaDevices || navigator).getUserMedia(constraints);
  },

  setGlobal: function setGlobal(prop, value) {
    window[prop] = value;
  },

  getSwfObject: function getSwfObject() {
    return window.swfobject;
  },

  getEmbedObject: function getEmbedObject(id) {
    return document.getElementById(id);
  },

  getElementId: function getElementId(el) {
    return el.getAttribute('id');
  },

  addOrientationChangeHandler: function addOrientationChangeHandler(handler) {
    var andCall = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var supportsOrientationChange = 'onorientationchange' in window;
    if (supportsOrientationChange) {
      (0, _log.debug)('[window:orientation]', '[addOrientationChangeHandler]', 'adding responder.');
      orientationHandlers.push(handler);
      if (andCall) {
        onorientationchange();
      }
    }
    if (orientationHandlers.length === 1) {
      (0, _log.debug)('[window:orientation]', '[addOrientationChangeHandler]', 'onorientationchange added.');
      window.addEventListener('orientationchange', onorientationchange);
    }
  },

  removeOrientationChangeHandler: function removeOrientationChangeHandler(handler) {
    var i = orientationHandlers.length;
    while (--i > -1) {
      if (orientationHandlers[i] === handler) {
        orientationHandlers.slice(i, 1);
        break;
      }
    }
    if (orientationHandlers.length === 0) {
      (0, _log.debug)('[window:orientation]', '[removeOrientationChangeHandler]:: onorientationchange removed.');
      window.removeEventListener('onorientationchange', onorientationchange);
    }
  },

  addCloseHandler: function addCloseHandler(handler) {
    var insertValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

    closeHandlers.splice(insertValue === -1 ? closeHandlers.length : insertValue, 0, handler);
    // NOTE: Removed onbeforeunload in favor of developers properly handling shutdown.
    //    if (window.onbeforeunload !== onwindowclose) {
    // window.onbeforeunload = onwindowclose
    if (!hasOnWindowClose) {
      window.addEventListener('unload', onwindowclose);
    }
    // }
  },

  removeCloseHandler: function removeCloseHandler(handler) {
    var i = closeHandlers.length;
    while (--i > -1) {
      if (closeHandlers[i] === handler) {
        closeHandlers.slice(i, 1);
        break;
      }
    }
  },

  invoke: function invoke(methodName, data) {
    if (window.hasOwnProperty(methodName)) {
      window[methodName].call(window, data);
    }
  },

  // requires <script src="lib/screenfull/screenfull.min.js"></script>
  toggleFullScreen: function toggleFullScreen(element) {
    if (window.screenfull && window.screenfull.enabled) {
      window.screenfull.toggle(element);
    }
  },

  onFullScreenStateChange: function onFullScreenStateChange(cb) {
    fullscreenHandlers.push(cb);
    enableScreenfullHandler(window.screenfull);
  },

  onOrientationMetadata: _metadataUtil.onOrientationMetadata,

  hasAttributeDefined: function hasAttributeDefined(elem, attribute) {
    var att = elem.getAttribute(attribute);
    return att !== null && (typeof att === 'undefined' ? 'undefined' : (0, _typeof3.default)(att)) !== undefined && typeof att === 'string' && (att === '' || att === 'true' || att === attribute);
  },

  hasClassDefined: function hasClassDefined(elem, className) {
    return elem.classList.contains(className);
  },

  createElement: function createElement(tagName, opts) {
    if (tagName === 'text') {
      return document.createTextNode(opts.toString());
    }
    return document.createElement(tagName, opts);
  },

  addSubscriptionAssignmentHandler: function addSubscriptionAssignmentHandler(fn) {
    rtmpSubscriberAssignments.push(fn);
    if (window.setSubscriberId === undefined) {
      window.setSubscriberId = function (id) {
        rtmpSubscriberAssignments.shift()(id);
      };
    }
  },

  getMouseXFromEvent: function getMouseXFromEvent(event) {
    if (!event) {
      event = window.event;
    }

    if (event.pageX) {
      return event.pageX;
    } else if (event.clientX) {
      return event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
    }

    return 0;
  },

  getScrollX: function getScrollX() {
    return window.pageXOffset !== undefined ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
  },

  createEvent: function createEvent(EventType) {
    return document.createEvent(EventType);
  },

  getGlobal: function getGlobal() {
    return window;
  }

};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A DeferredPromise allows for construction and assignment of a future fullfilment of a `Promise`.
 *
 * @private
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Future = exports.DeferredPromise = undefined;

var _promise = __webpack_require__(61);

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _DeferredPromise = function _DeferredPromise() {
  var _this = this;

  (0, _classCallCheck3.default)(this, _DeferredPromise);

  this.resolve = undefined;
  this.reject = undefined;
  this.promise = new _promise2.default(function (resolve, reject) {
    _this.resolve = resolve;
    _this.reject = reject;
  });
};

/**
 * A Future determines if existant DeferredPromise is available or creates and returns a new one.
 *
 * @param {DeferredPromise} deferredIfExist
 *        An object tested for truthy-ness.
 * @return {DeferredPromise}
 *
 * @private
 */


var _Future = {
  createIfNotExist: function createIfNotExist(deferredIfExist) {
    var f = deferredIfExist;
    if (!f) {
      f = new _DeferredPromise();
    }
    return f;
  }
};

var DeferredPromise = exports.DeferredPromise = _DeferredPromise;
var Future = exports.Future = _Future;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(157), __esModule: true };

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(139);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(137);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(62);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(62);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var store      = __webpack_require__(74)('wks')
  , uid        = __webpack_require__(53)
  , Symbol     = __webpack_require__(11).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(11)
  , core      = __webpack_require__(3)
  , ctx       = __webpack_require__(19)
  , hide      = __webpack_require__(21)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(148), __esModule: true };

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(16)
  , IE8_DOM_DEFINE = __webpack_require__(99)
  , toPrimitive    = __webpack_require__(76)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(17) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharedObjectEventTypes = exports.FailoverSubscriberEventTypes = exports.RTMPSubscriberEventTypes = exports.RTCSubscriberEventTypes = exports.SubscriberEventTypes = exports.FailoverPublisherEventTypes = exports.RTMPPublisherEventTypes = exports.RTCPublisherEventTypes = exports.PublisherEventTypes = exports.SharedObjectEvent = exports.SubscriberEvent = exports.PublisherEvent = exports.Event = undefined;

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _publisherEvent = __webpack_require__(82);

Object.defineProperty(exports, 'PublisherEventTypes', {
  enumerable: true,
  get: function get() {
    return _publisherEvent.PublisherEventTypes;
  }
});
Object.defineProperty(exports, 'RTCPublisherEventTypes', {
  enumerable: true,
  get: function get() {
    return _publisherEvent.RTCPublisherEventTypes;
  }
});
Object.defineProperty(exports, 'RTMPPublisherEventTypes', {
  enumerable: true,
  get: function get() {
    return _publisherEvent.RTMPPublisherEventTypes;
  }
});
Object.defineProperty(exports, 'FailoverPublisherEventTypes', {
  enumerable: true,
  get: function get() {
    return _publisherEvent.FailoverPublisherEventTypes;
  }
});

var _subscriberEvent = __webpack_require__(83);

Object.defineProperty(exports, 'SubscriberEventTypes', {
  enumerable: true,
  get: function get() {
    return _subscriberEvent.SubscriberEventTypes;
  }
});
Object.defineProperty(exports, 'RTCSubscriberEventTypes', {
  enumerable: true,
  get: function get() {
    return _subscriberEvent.RTCSubscriberEventTypes;
  }
});
Object.defineProperty(exports, 'RTMPSubscriberEventTypes', {
  enumerable: true,
  get: function get() {
    return _subscriberEvent.RTMPSubscriberEventTypes;
  }
});
Object.defineProperty(exports, 'FailoverSubscriberEventTypes', {
  enumerable: true,
  get: function get() {
    return _subscriberEvent.FailoverSubscriberEventTypes;
  }
});

var _sharedobjectEvent = __webpack_require__(56);

Object.defineProperty(exports, 'SharedObjectEventTypes', {
  enumerable: true,
  get: function get() {
    return _sharedobjectEvent.SharedObjectEventTypes;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Base class for all events.
 */
var Event = function () {
  function Event(type) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    (0, _classCallCheck3.default)(this, Event);

    this._type = type;
    this._data = data;
  }

  /**
   * Type accessor.
   *
   * @type {String}
   */


  (0, _createClass3.default)(Event, [{
    key: 'type',
    get: function get() {
      return this._type;
    }

    /**
     * Data related to event.
     *
     * @type {Object}
     */

  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }]);
  return Event;
}();

/**
 * Base Publisher-related Event.
 *
 * @extends Event
 */


var PublisherEvent = function (_Event) {
  (0, _inherits3.default)(PublisherEvent, _Event);

  function PublisherEvent(type, publisher, data) {
    (0, _classCallCheck3.default)(this, PublisherEvent);

    var _this = (0, _possibleConstructorReturn3.default)(this, (PublisherEvent.__proto__ || (0, _getPrototypeOf2.default)(PublisherEvent)).call(this, type, data));

    _this._publisher = publisher;
    return _this;
  }

  /**
   * The Publisher instance that dispatched the event.
   *
   * @type {Object}
   *
   * @see Red5ProPublisher
   * @see RTCPublisher
   * @see RTMPPublisher
   */


  (0, _createClass3.default)(PublisherEvent, [{
    key: 'publisher',
    get: function get() {
      return this._publisher;
    }
  }]);
  return PublisherEvent;
}(Event);

/**
 * Base Subscriber-related Event.
 *
 * @extends Event
 */


var SubscriberEvent = function (_Event2) {
  (0, _inherits3.default)(SubscriberEvent, _Event2);

  function SubscriberEvent(type, subscriber, data) {
    (0, _classCallCheck3.default)(this, SubscriberEvent);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (SubscriberEvent.__proto__ || (0, _getPrototypeOf2.default)(SubscriberEvent)).call(this, type, data));

    _this2._subscriber = subscriber;
    return _this2;
  }

  /**
   * The Subscriber instance that dispatched the event.
   *
   * @type {Object}
   *
   * @see Red5ProSubscriber
   * @see RTCSubscriber
   * @see RTMPSubscriber
   * @see HLSubscriber
   */


  (0, _createClass3.default)(SubscriberEvent, [{
    key: 'subscriber',
    get: function get() {
      return this._subscriber;
    }
  }]);
  return SubscriberEvent;
}(Event);

/**
 * Base SharedObject-related Event.
 *
 * @extends Event
 */


var SharedObjectEvent = function (_Event3) {
  (0, _inherits3.default)(SharedObjectEvent, _Event3);

  function SharedObjectEvent(type, sharedObjectName, data) {
    (0, _classCallCheck3.default)(this, SharedObjectEvent);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (SharedObjectEvent.__proto__ || (0, _getPrototypeOf2.default)(SharedObjectEvent)).call(this, type, data));

    _this3._name = sharedObjectName;
    return _this3;
  }

  /**
   * The name of the Shared Object.
   *
   * @type {String}
   *
   * @see {Red5ProSharedObject}
   */


  (0, _createClass3.default)(SharedObjectEvent, [{
    key: 'name',
    get: function get() {
      return this._name;
    }
  }]);
  return SharedObjectEvent;
}(Event);

exports.Event = Event;
exports.PublisherEvent = PublisherEvent;
exports.SubscriberEvent = SubscriberEvent;
exports.SharedObjectEvent = SharedObjectEvent;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(13);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(25)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(155), __esModule: true };

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(63);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 20 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(14)
  , createDesc = __webpack_require__(38);
module.exports = __webpack_require__(17) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(68)
  , defined = __webpack_require__(46);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WILDCARD = '*';
var WILDCARD_KEY = 'RED5PRO';

/**
 * Base class for an Event Emitter.
 */

var EventEmitter = function () {
  function EventEmitter() {
    (0, _classCallCheck3.default)(this, EventEmitter);

    this._callbacks = {};
    this._callbacks[WILDCARD_KEY] = [];
  }

  /**
   * Invokes event handlers.
   *
   * @param {Array} callbacks
   * @param {Event} event
   *
   * @private
   */


  (0, _createClass3.default)(EventEmitter, [{
    key: '_notify',
    value: function _notify(callbacks, event) {
      var i = void 0,
          length = callbacks.length;
      for (i = 0; i < length; i++) {
        callbacks[i](event);
      }
    }

    /**
     * Assign a callback handler to an event type.
     *
     * @param {String} type
     * @param {Function} fn
     */

  }, {
    key: 'on',
    value: function on(type, fn) {
      if (typeof fn !== 'function') {
        return;
      }

      if (type === WILDCARD) {
        this._callbacks[WILDCARD_KEY].push(fn);
        return;
      }

      if (this._callbacks[type] === undefined) {
        this._callbacks[type] = [];
      }

      if (this._callbacks[type].indexOf(fn) === -1) {
        this._callbacks[type].push(fn);
      }
    }

    /**
     * Remove a callback handler for an event type.
     *
     * @param {String} type
     * @param {Function} fn
     */

  }, {
    key: 'off',
    value: function off(type, fn) {
      var map = this._callbacks[type];
      if (type === WILDCARD) {
        map = this._callbacks[WILDCARD_KEY];
      }
      if (map) {
        var index = map.indexOf(fn);
        if (index !== -1) {
          map.splice(index, 1);
        }
      }
    }

    /**
     * Dispatch an event to be handled by any assigned callbacks.
     *
     * @param {Event} event
     */

  }, {
    key: 'trigger',
    value: function trigger(event) {
      var type = event.type;
      if (this._callbacks[type]) {
        this._notify(this._callbacks[type], event);
      }
      this._notify(this._callbacks[WILDCARD_KEY], event);
    }
  }]);
  return EventEmitter;
}();

exports.default = EventEmitter;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlaybackControlsImpl = exports.PlaybackControls = exports.PlaybackController = undefined;

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _eventEmitter = __webpack_require__(23);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _slider = __webpack_require__(124);

var _slider2 = _interopRequireDefault(_slider);

var _event = __webpack_require__(86);

var _state = __webpack_require__(35);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'PlaybackControls';

/**
 * Interface contract for playback controller actions.
 *
 * @extends EventEmitter
 */

var SubscriberPlaybackController = function (_EventEmitter) {
  (0, _inherits3.default)(SubscriberPlaybackController, _EventEmitter);

  function SubscriberPlaybackController() {
    (0, _classCallCheck3.default)(this, SubscriberPlaybackController);
    return (0, _possibleConstructorReturn3.default)(this, (SubscriberPlaybackController.__proto__ || (0, _getPrototypeOf2.default)(SubscriberPlaybackController)).call(this));
  }

  /**
   * Request to start playing the stream.
   */


  (0, _createClass3.default)(SubscriberPlaybackController, [{
    key: 'play',
    value: function play() {}
    /**
     * Request to pause playback of stream.
     */

  }, {
    key: 'pause',
    value: function pause() {}
    /**
     * Request to resume playback od stream.
     */

  }, {
    key: 'resume',
    value: function resume() {}
    /**
     * Request to stop playback of stream.
     */

  }, {
    key: 'stop',
    value: function stop() {}
    /**
     * Request to mute the audio of the stream.
     */

  }, {
    key: 'mute',
    value: function mute() {}
    /**
     * Request to unmute the audio of the stream.
     */

  }, {
    key: 'unmute',
    value: function unmute() {}
    /**
     * Request to set volume of audio of stream.
     *
     * @param {Number} value
     *        From 0..1.
     */

  }, {
    key: 'setVolume',
    value: function setVolume(value) {} // eslint-disable-line no-unused-vars
    /**
     * Request to set playback point in time.
     *
     * @param {Number} value
     *        Either the percentage of the duration (if provided) or the time in seconds.
     * @param {Number} duration
     *        Optional duration of video (when known through VOD) to use to determine time based on first param passed as percentage.
     */

  }, {
    key: 'seekTo',
    value: function seekTo(value) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    } // eslint-disable-line no-unused-vars
    /**
     * Request to toggle fullscreen state.
     */

  }, {
    key: 'toggleFullScreen',
    value: function toggleFullScreen() {}
  }]);
  return SubscriberPlaybackController;
}(_eventEmitter2.default);

/**
 * Interface for PlaybackControls used by Subscribers with `controls` and `class="red5pro-media` defined on target elements. This interface serves as a presentation controller and playback API for target DOM elements.
 *
 * You can use this as a prototype for creating and providing your own custom Playback Controls. To do so: provide an implementation of this Class as the `controls` property on the initialization configuration map provided in the `init()` call of a Subscriber.
 *
 * TODO: Fully vet the viability of developers being adhere to this contract for custom controls.
 * @private
 */


var SubscriberPlaybackControls = function () {
  function SubscriberPlaybackControls() {
    (0, _classCallCheck3.default)(this, SubscriberPlaybackControls);
  }

  /**
   * Returns the volume level.
   *
   * @return {Number} 0..1
   */


  (0, _createClass3.default)(SubscriberPlaybackControls, [{
    key: 'getVolume',
    value: function getVolume() {}

    /**
     * Sets the volume level of playback.
     *
     * @param {Number} value
     *        0..1
     */

  }, {
    key: 'setVolume',
    value: function setVolume(value) {} // eslint-disable-line no-unused-vars

    /**
     * Request to set playback point in time.
     *
     * @param {Number} value
     *        Either the percentage of the duration (if provided) or the time in seconds.
     * @param {Number} duration
     *        Optional duration of video (when known through VOD) to use to determine time based on first param passed as percentage.
     */

  }, {
    key: 'setSeekTime',
    value: function setSeekTime(value) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    } // eslint-disable-line no-unused-vars

    /**
     * Sets the playback duration of the stream, if available from VOD (Video On Demand).
     *
     * @param {Number} value
     *        In seconds.
     */

  }, {
    key: 'setPlaybackDuration',
    value: function setPlaybackDuration(value) {} // eslint-disable-line no-unused-vars

    /**
     * Returns the current playback state.
     *
     * @return {Number}
     * @see {PlaybackState}
     */

  }, {
    key: 'getState',
    value: function getState() {}

    /**
     * Set the current playback state.
     *
     * @param {Number} state
     * @see {PlaybackState}
     */

  }, {
    key: 'setState',
    value: function setState(state) {} // eslint-disable-line no-unused-vars

    /**
     * Sets playback as VOD (Video On Demand) type.
     *
     * @param {Boolean} value
     */

  }, {
    key: 'setAsVOD',
    value: function setAsVOD(value) {} // eslint-disable-line no-unused-vars

    /**
    * Enables controls and event handlers.
    *
    * @private
    */

  }, {
    key: 'enable',
    value: function enable(value) {} // eslint-disable-line no-unused-vars

  }]);
  return SubscriberPlaybackControls;
}();

/**
 * Default implementation of `SubscriberPlaybackControls` used internally in the SDK.
 *
 * @private
 */


var SubscriberPlaybackControlsImpl = function (_SubscriberPlaybackCo) {
  (0, _inherits3.default)(SubscriberPlaybackControlsImpl, _SubscriberPlaybackCo);

  function SubscriberPlaybackControlsImpl(player, container) {
    (0, _classCallCheck3.default)(this, SubscriberPlaybackControlsImpl);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (SubscriberPlaybackControlsImpl.__proto__ || (0, _getPrototypeOf2.default)(SubscriberPlaybackControlsImpl)).call(this));

    _this2.player = player;
    _this2.container = container;
    _this2._controlbar = undefined;
    _this2._playPauseButton = undefined;
    _this2._muteButton = undefined;
    _this2._volumeField = undefined;
    _this2._seekTimeField = undefined;
    _this2._timeField = undefined;
    _this2._fullScreenButton = undefined;
    _this2._state = _state.PlaybackState.IDLE;
    _this2._mutedState = false;
    _this2._resumeAfterSeek = false;
    _this2._playbackDuration = 0;
    _this2._volumeValue = 1;
    _this2._onPlayPauseClickBound = _this2._onPlayPauseClick.bind(_this2);
    _this2.decorate(_this2.container);
    return _this2;
  }

  /**
   * Decorates target container with playback control elements.
   *
   * @param {Element} container
   *
   * @private
   */


  (0, _createClass3.default)(SubscriberPlaybackControlsImpl, [{
    key: 'decorate',
    value: function decorate(container) {
      (0, _log.debug)(NAME, '[decorate]');
      var controlbar = _browser2.default.createElement('div');
      controlbar.classList.add('red5pro-media-control-bar');
      this._playPauseButton = this._createPlayPauseButton();
      this._muteButton = this._createMuteButton();
      this._volumeField = this._createVolumeControl();
      this._seekTimeField = this._createSeekControl();
      this._timeField = this._createPlaybackTime();
      this._fullScreenButton = this._createFullScreenToggle();
      controlbar.appendChild(this._playPauseButton);
      controlbar.appendChild(this._timeField);
      controlbar.appendChild(this._seekTimeField.view);
      controlbar.appendChild(this._muteButton);
      controlbar.appendChild(this._volumeField.view);
      controlbar.appendChild(this._fullScreenButton);
      container.appendChild(controlbar);
      this._controlbar = controlbar;

      if (_browser2.default.isTouchEnabled()) {
        controlbar.classList.add('red5pro-media-control-bar-show');
        //    this.container.addEventListener('click', () => {
        //      controlbar.classList.toggle('red5pro-media-control-bar-show')
        //    })
      } else {
        this.container.addEventListener('mouseover', function () {
          controlbar.classList.add('red5pro-media-control-bar-show');
        });
        this.container.addEventListener('mouseout', function () {
          controlbar.classList.remove('red5pro-media-control-bar-show');
        });
      }

      this.setState(_state.PlaybackState.IDLE).onFullScreenChange(false).setSeekTime(0).enable(false);
    }

    /**
     * Click handler for play/pause control.
     *
     * @private
     */

  }, {
    key: '_onPlayPauseClick',
    value: function _onPlayPauseClick() {
      if (this.getState() === _state.PlaybackState.PLAYING) {
        this.player.pause();
      } else if (this.getState() === _state.PlaybackState.PAUSED) {
        this.player.resume();
      } else {
        this.player.play();
      }
    }

    /**
     * Creates play/pause control.
     *
     * @private
     */

  }, {
    key: '_createPlayPauseButton',
    value: function _createPlayPauseButton() {
      var button = _browser2.default.createElement('button');
      button.setAttribute('aria-label', 'Toggle Playback');
      button.classList.add('red5pro-media-control-element');
      button.classList.add('red5pro-media-element-button');
      button.classList.add('red5pro-media-playpause-button');
      return button;
    }

    /**
     * Creates mute/unmute control.
     *
     * @private
     */

  }, {
    key: '_createMuteButton',
    value: function _createMuteButton() {
      var self = this;
      var button = _browser2.default.createElement('button');
      button.setAttribute('aria-label', 'Toggle Mute Audio');
      button.classList.add('red5pro-media-control-element');
      button.classList.add('red5pro-media-element-button');
      button.classList.add('red5pro-media-muteunmute-button');
      button.addEventListener('click', function () {
        if (self.getMutedState()) {
          self.player.unmute();
          self.setMutedState(false);
        } else {
          self.player.mute();
          self.setMutedState(true);
        }
      });
      return button;
    }

    /**
     * Creates volume control.
     *
     * @private
     */

  }, {
    key: '_createVolumeControl',
    value: function _createVolumeControl() {
      var self = this;
      var slider = new _slider2.default('volume');
      slider.view.classList.add('red5pro-media-control-element');
      slider.view.classList.add('red5pro-media-volume-slider');
      slider.view.classList.add('red5pro-media-slider');
      slider.on(_event.SliderEventTypes.CHANGE, function (event) {
        var percentage = Number(event.data);
        self.player.setVolume(percentage);
      });
      return slider;
    }

    /**
     * Creates seek control.
     *
     * @private
     */

  }, {
    key: '_createSeekControl',
    value: function _createSeekControl() {
      var self = this;
      var slider = new _slider2.default('seek');
      slider.view.classList.add('red5pro-media-control-element');
      slider.view.classList.add('red5pro-media-seektime-slider');
      slider.view.classList.add('red5pro-media-slider');
      slider.on(_event.SliderEventTypes.CHANGE_START, function () {
        if (self.getState() === _state.PlaybackState.PLAYING) {
          self._resumeAfterSeek = true;
          self.player.pause();
        }
      });
      slider.on(_event.SliderEventTypes.CHANGE, function (event) {
        var percentage = Number(event.data);
        self.player.seekTo(percentage, self._playbackDuration === 0 ? undefined : self._playbackDuration);
        self.setSeekTime(percentage * self._playbackDuration, self._playbackDuration);
      });
      slider.on(_event.SliderEventTypes.CHANGE_COMPLETE, function () {
        if (self._resumeAfterSeek && self.getState() === _state.PlaybackState.PAUSED) {
          self._resumeAfterSeek = false;
          self.player.resume();
        }
      });
      return slider;
    }

    /**
     * Creates playback time field.
     *
     * @private
     */

  }, {
    key: '_createPlaybackTime',
    value: function _createPlaybackTime() {
      var span = _browser2.default.createElement('span');
      var text = _browser2.default.createElement('text', 'hello!');
      span.classList.add('red5pro-media-control-element');
      span.classList.add('red5pro-media-time-field');
      span.appendChild(text);
      return span;
    }

    /**
     * Create fullscreen toggle control.
     *
     * @private
     */

  }, {
    key: '_createFullScreenToggle',
    value: function _createFullScreenToggle() {
      var self = this;
      var button = _browser2.default.createElement('button');
      button.setAttribute('aria-label', 'Toggle Fullscreen');
      button.classList.add('red5pro-media-control-element');
      button.classList.add('red5pro-media-element-button');
      button.classList.add('red5pro-media-fullscreen-button');
      button.addEventListener('click', function () {
        self.player.toggleFullScreen();
      });
      return button;
    }

    /**
     * Enables controls and event handlers.
     *
     * @private
     */

  }, {
    key: 'enable',
    value: function enable(value) {
      if (value) {
        this._playPauseButton.classList.remove('red5pro-media-element-button-disabled');
        this._playPauseButton.addEventListener('click', this._onPlayPauseClickBound);
      } else {
        this._playPauseButton.classList.add('red5pro-media-element-button-disabled');
        this._playPauseButton.removeEventListener('click', this._onPlayPauseClickBound);
      }
    }

    /**
     * Formats the time value.
     *
     * @param {value} Number
     * @return {String}
     */

  }, {
    key: 'formatTime',
    value: function formatTime(value) {
      var hrs = 0;
      var mins = value === 0 ? 0 : parseInt(value / 60);
      var secs = 0;
      if (mins >= 60) {
        hrs = parseInt(mins / 60);
        mins = mins % 60;
      }
      secs = value === 0 ? 0 : parseInt(value % 60);

      var formattedArr = hrs < 10 ? ['0' + hrs] : [hrs];
      formattedArr.push(mins < 10 ? ['0' + mins] : [mins]);
      formattedArr.push(secs < 10 ? ['0' + secs] : [secs]);
      return formattedArr.join(':');
    }

    /**
     * Returns the volume level.
     *
     * @return {Number} 0..1
     */

  }, {
    key: 'getVolume',
    value: function getVolume() {
      return this._volumeValue;
    }

    /**
     * Sets the volume level of playback.
     *
     * @param {Number} value
     *        0..1
     */

  }, {
    key: 'setVolume',
    value: function setVolume(value) {
      this._volumeField.value = value;
      this._volumeValue = value;
      if (value === 0) {
        this.setMutedState(true);
      } else if (this.getMutedState()) {
        this.setMutedState(false);
      }
      return this;
    }

    /**
     * Request to set playback point in time.
     *
     * @param {Number} value
     *        Either the percentage of the duration (if provided) or the time in seconds.
     * @param {Number} duration
     *        Optional duration of video (when known through VOD) to use to determine time based on first param passed as percentage.
     */

  }, {
    key: 'setSeekTime',
    value: function setSeekTime(value) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      this._seekTimeField.value = length === 0 ? 0 : value / length;
      if (this._playbackDuration !== 0 && parseInt(this._playbackDuration) <= parseInt(value)) {
        this._seekTimeField.value = 1;
      }
      this._timeField.innerText = this.formatTime(Math.floor(value));
      return this;
    }

    /**
     * Sets the playback duration of the stream, if available from VOD (Video On Demand).
     *
     * @param {Number} value
     *        In seconds.
     */

  }, {
    key: 'setPlaybackDuration',
    value: function setPlaybackDuration(value) {
      (0, _log.debug)(NAME, '[setplaybackduration]: ' + value);
      this._playbackDuration = value;
    }

    /**
     * Returns the current playback state.
     *
     * @return {Number}
     * @see {PlaybackState}
     */

  }, {
    key: 'getState',
    value: function getState() {
      return this._state;
    }

    /**
     * Set the current playback state.
     *
     * @param {Number} state
     * @see {PlaybackState}
     */

  }, {
    key: 'setState',
    value: function setState(state) {
      (0, _log.debug)(NAME, '[setState]: ' + _state.PlaybackStateReadable[state]);
      this._state = state;
      this.onStateChange(this._state);
      return this;
    }

    /**
     * Returns the current state of the playback being muted.
     * This differs from just the volume level being 0. The controls can be muted, but have a volume level greater than 0 - meaning, unmute will return back to the volume level previously set.
     *
     * @return {Boolean}
     */

  }, {
    key: 'getMutedState',
    value: function getMutedState() {
      return 'muted' in this.player ? this.player.muted : this._mutedState;
    }

    /**
     * Sets the muted state of the playback.
     *
     * @param {Boolean} state
     */

  }, {
    key: 'setMutedState',
    value: function setMutedState(state) {
      this._mutedState = state;
      this.onMutedStateChange(this._mutedState);
      return this;
    }

    /**
     * Handler for change in state.
     *
     * @param {Number} state
     *        The PlaybackState
     *
     * @private
     */

  }, {
    key: 'onStateChange',
    value: function onStateChange(state) {
      if (state === _state.PlaybackState.PLAYING) {
        this._playPauseButton.classList.remove('red5pro-media-play-button');
        this._playPauseButton.classList.add('red5pro-media-pause-button');
      } else {
        this._playPauseButton.classList.add('red5pro-media-play-button');
        this._playPauseButton.classList.remove('red5pro-media-pause-button');
      }
      return this;
    }

    /**
     * Handler for change in mute state.
     *
     * @param {Boolean} state
     *
     * @private
     */

  }, {
    key: 'onMutedStateChange',
    value: function onMutedStateChange(state) {
      if (state) {
        this._muteButton.classList.add('red5pro-media-mute-button');
        this._muteButton.classList.remove('red5pro-media-unmute-button');
        this._volumeField.value = 0;
      } else {
        this._muteButton.classList.remove('red5pro-media-mute-button');
        this._muteButton.classList.add('red5pro-media-unmute-button');
        this._volumeField.value = this._volumeValue;
      }
    }

    /**
     * Handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */

  }, {
    key: 'onFullScreenChange',
    value: function onFullScreenChange(isFullScreen) {
      if (isFullScreen) {
        this._fullScreenButton.classList.add('red5pro-media-exit-fullscreen-button');
        this._fullScreenButton.classList.remove('red5pro-media-fullscreen-button');
      } else {
        this._fullScreenButton.classList.remove('red5pro-media-exit-fullscreen-button');
        this._fullScreenButton.classList.add('red5pro-media-fullscreen-button');
      }
      return this;
    }

    /**
     * Sets playback as VOD (Video On Demand) type.
     *
     * @param {Boolean} value
     */

  }, {
    key: 'setAsVOD',
    value: function setAsVOD(isVOD) {
      (0, _log.debug)(NAME, '[setAsVOD]: ' + isVOD);
      if (!isVOD) {
        this._seekTimeField.value = 0;
        this._seekTimeField.disabled = true;
      } else {
        this._seekTimeField.disabled = false;
      }
    }

    /**
     * Request to detach the control bar to provided container.
     */

  }, {
    key: 'detach',
    value: function detach() {
      this.enable(false);
      if (this._controlbar && this._controlbar.parentNode === this.container) {
        this.container.removeChild(this._controlbar);
      }
    }
  }]);
  return SubscriberPlaybackControlsImpl;
}(SubscriberPlaybackControls);

var PlaybackController = exports.PlaybackController = SubscriberPlaybackController;
var PlaybackControls = exports.PlaybackControls = SubscriberPlaybackControls;
var PlaybackControlsImpl = exports.PlaybackControlsImpl = SubscriberPlaybackControlsImpl;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at  = __webpack_require__(181)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(69)(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(186);
var global        = __webpack_require__(11)
  , hide          = __webpack_require__(21)
  , Iterators     = __webpack_require__(30)
  , TO_STRING_TAG = __webpack_require__(9)('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Deep-defines an `Object` in place with namespaced attribute value.
 *
 * @private
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObjectEmpty = exports.metadataResolutionToObject = exports.deepCopy = exports.deepDefine = undefined;

var _keys = __webpack_require__(60);

var _keys2 = _interopRequireDefault(_keys);

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var deepDefine = exports.deepDefine = function deepDefine(object, paths, value) {
  var i = 0;
  var tail = object;
  var prop = paths.pop();
  var length = paths.length;
  for (i; i < length; i++) {
    var path = paths[i];
    tail[path] = tail[path] || {};
    tail = tail[path];
  }
  tail[prop] = value;
};

/**
 * Deep-copy utilizing JSON API.
 *
 * @private
 */
var deepCopy = exports.deepCopy = function deepCopy(obj) {
  var str = (0, _stringify2.default)(obj);
  return JSON.parse(str);
};

/**
 * Simple util to parse resolution from metadata.
 *
 * @param {String} value
 *        The resolution value from metadata: e.g, `640,480`.
 * @return {Object}
 *        The structured dimensions Object with `width` and `height` properties.
 *
 * @private
 */
var metadataResolutionToObject = exports.metadataResolutionToObject = function metadataResolutionToObject(value) {
  if (typeof value === 'string') {
    var dims = value.split(',');
    return {
      width: parseInt(dims[0]),
      height: parseInt(dims[1])
    };
  }
  return value;
};

/**
 * Utility check if providing Object is empty (without any properties.
 *
 * @private
 */
var isObjectEmpty = exports.isObjectEmpty = function isObjectEmpty(obj) {
  return (0, _keys2.default)(obj).length === 0 && obj.constructor === Object;
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(136);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var META     = __webpack_require__(53)('meta')
  , isObject = __webpack_require__(13)
  , has      = __webpack_require__(20)
  , setDesc  = __webpack_require__(14).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(25)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(108)
  , enumBugKeys = __webpack_require__(67);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(46);
module.exports = function(it){
  return Object(defined(it));
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlaybackVideoEncoder = exports.PlaybackAudioEncoder = exports.PlaybackTypes = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Enumeration of Playback Types.
 */
var PlaybackTypes = exports.PlaybackTypes = (0, _freeze2.default)({
  RTC: 'rtc',
  RTMP: 'rtmp',
  HLS: 'hls'
});

/**
 * Enumeration of Audio Encoder types to request for Playback
 */
var PlaybackAudioEncoder = exports.PlaybackAudioEncoder = (0, _freeze2.default)({
  OPUS: 'Opus',
  PCMU: 'PCMU',
  PCMA: 'PCMA',
  SPEEX: 'Speex',
  NONE: 'NONE'
});

/**
 * Enumeration of Video Encoder types to request for Playback.
 */
var PlaybackVideoEncoder = exports.PlaybackVideoEncoder = (0, _freeze2.default)({
  VP8: 'VP8',
  H264: 'H264',
  NONE: 'NONE'
});

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlaybackStateReadable = exports.PlaybackState = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Enumeration of Playback State.
 *
 * @see {SubscriberPlaybackControls}
 */
var PlaybackState = exports.PlaybackState = (0, _freeze2.default)({
  UNAVAILABLE: 1000,
  AVAILABLE: 0,
  IDLE: 1,
  PLAYING: 2,
  PAUSED: 3
});

/**
 * Human readable playback state.
 *
 * @see {SubscriberPlaybackControls}
 * @private
 */
var PlaybackStateReadable = exports.PlaybackStateReadable = (0, _freeze2.default)({
  1000: 'Playback.UNAVAILABLE',
  0: 'Playback.AVAILABLE',
  1: 'Playback.IDLE',
  2: 'Playback.PLAYING',
  3: 'Playback.PAUSED'
});

/***/ }),
/* 36 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(19)
  , call        = __webpack_require__(102)
  , isArrayIter = __webpack_require__(100)
  , anObject    = __webpack_require__(16)
  , toLength    = __webpack_require__(52)
  , getIterFn   = __webpack_require__(79)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(14).f
  , has = __webpack_require__(20)
  , TAG = __webpack_require__(9)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ }),
/* 40 */
/***/ (function(module, exports) {



/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTCSessionDescription = exports.RTCIceCandidate = exports.RTCPeerConnection = exports.updateBandwidth = exports.forceUserMedia = exports.getUserMedia = exports.isSupported = exports.determineSupportedResolution = exports.quickResolutionSupport = undefined;

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _promise = __webpack_require__(5);

var _util = __webpack_require__(88);

var _object = __webpack_require__(28);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import { NoSupportedCameraResolutionsError } from '../exception/errors'

// Resolutions borrowed from https://github.com/webrtcHacks/WebRTC-Camera-Resolution/blob/master/js/resolutionScan.js
var formats = [{
  "label": "4K(UHD)",
  "width": 3840,
  "height": 2160
}, {
  "label": "1080p(FHD)",
  "width": 1920,
  "height": 1080
}, {
  "label": "UXGA",
  "width": 1600,
  "height": 1200
}, {
  "label": "720p(HD)",
  "width": 1280,
  "height": 720
}, {
  "label": "SVGA",
  "width": 800,
  "height": 600
}, {
  "label": "VGA",
  "width": 640,
  "height": 480
}, {
  "label": "360p(nHD)",
  "width": 640,
  "height": 360
}, {
  "label": "CIF",
  "width": 352,
  "height": 288
}, {
  "label": "QVGA",
  "width": 320,
  "height": 240
}, {
  "label": "QCIF",
  "width": 176,
  "height": 144
}, {
  "label": "QQVGA",
  "width": 160,
  "height": 120
}];

/**
 * Detects if resolutions are defined on the provied constraints.
 *
 * @param {Object} constraints
 *        The Media Constraints to test against.
 * @return {Boolean}
 *
 * @private
 */
var hasResolutionsDefined = function hasResolutionsDefined(constraints) {
  return constraints.hasOwnProperty('video') && (constraints.video.hasOwnProperty('width') || constraints.video.hasOwnProperty('height'));
};

/**
 * Return value on attribute based on failover test of attribute availability on provided object.
 *
 * @param {Object} attribute
 * @return {Object}
 *
 * @private
 */
var getValueFromConstraintAttribute = function getValueFromConstraintAttribute(attribute) {
  return attribute.exact || attribute.ideal || attribute.max || attribute.min || attribute;
};

/**
 * Test if video on Media Constraint is either set to `true` or if the constraints and format objects have the same dimension values.
 *
 * @param {Object} constraints
 * @param {Object} format
 * @return {Boolean}
 *
 * @private
 */
var isExact = (0, _util.curry)(function (constraints, format) {
  if (typeof constraints.video === 'boolean') {
    return true;
  }
  var w = constraints.video.hasOwnProperty('width') ? getValueFromConstraintAttribute(constraints.video.width) : 0;
  var h = constraints.video.hasOwnProperty('height') ? getValueFromConstraintAttribute(constraints.video.height) : 0;
  var confirmed = w === format.width && h === format.height;
  if (confirmed) {
    (0, _log.debug)('[gum:isExact]', 'Found matching resolution for ' + format.width + ', ' + format.height + '.');
  }
  return confirmed;
});

/**
 * Test if the area on the provide format is lower than the area on the Media Constraints.
 * This is used in trying to find the next nearest neighbor of dimensions that the browser supports.
 *
 * @param {Object} constraints
 * @param {Object} format
 * @return {Boolean}
 *
 * @private
 */
var isLower = (0, _util.curry)(function (constraints, format) {
  var w = constraints.video.hasOwnProperty('width') ? getValueFromConstraintAttribute(constraints.video.width) : 0;
  var h = constraints.video.hasOwnProperty('height') ? getValueFromConstraintAttribute(constraints.video.height) : 0;
  var desired = w * h;
  var dimensions = format.width * format.height;
  return dimensions < desired;
});

/**
 * Returns filtered of Media Constraint format if matching the canned list of support form `formats`.
 *
 * @param {Array} formatList
 * @param {Object} constraints
 * @return {Array}
 *
 * @private
 */
var hasMatchingFormat = (0, _util.curry)(function (formatsList, constraints) {
  (0, _log.debug)('[gum:hasMatchingFormat]', 'Filtered list: ' + (0, _stringify2.default)((0, _util.filter)(isExact(constraints))(formatsList), null, 2));
  return (0, _util.filter)(isExact(constraints))(formatsList).length > 0;
});

/**
 * Returns list of filter lower resolution constraints from the provided Media constraints.
 *
 * @param {Array} formayList
 * @param {Object} constraints
 * @return {Array}
 *
 * @private
 */
var findLowerResolutions = (0, _util.curry)(function (formatsList, constraints) {
  var resIsLower = isLower(constraints);
  return (0, _util.filter)(resIsLower)(formatsList);
});

/**
 * Allows the browser to try and determine the resolution to use based on `video: true` attribute in `getUserMedia` call.
 *
 * @param {Object} data
 *        The Media Constaints object.
 * @param {Promise} p
 *        The `Promise` to resolve or reject on detemination of allowed Media Constraints on the browser.
 *
 * @private
 */
var allowBrowserToDefineResolution = function allowBrowserToDefineResolution(data, p) {
  // default to `video: true` in hopes the browser can decide on its own.
  data.video = true;
  _browser2.default.gUM(data).then(function (media) {
    p.resolve({
      media: media,
      constraints: data
    });
  }).catch(function (err) {
    // eslint-disable-line no-unused-vars
    var msg = typeof err === 'string' ? err : [err.name, err.message].join(': ');
    (0, _log.debug)('[gum:getUserMedia]', 'Failure in getUserMedia: ' + msg + '. Attempting other resolution tests...');
    (0, _log.debug)('[gUM:findformat]', 'Constraints declined by browser: ' + (0, _stringify2.default)(data, null, 2));
    p.reject('Could not find proper camera for provided constraints.');
  });
};

/**
 * Attempts to select the best resolution based on whether the browser throws an exception when requesting `MediaStream` on `getUserMedia`.
 *
 * @param {Object} data
 *        The Media Constaints object.
 * @param {Array} selections
 *        The listing of formats to test on.
 * @param {Promise} p
 *        The `Promise` to resolve or reject on detemination of allowed Media Constraints on the browser.
 *
 * @private
 */
var findNextSelection = function findNextSelection(data, selections, p) {
  if (selections.length == 0) {
    // if we got here, there is no support.
    allowBrowserToDefineResolution(data, p);
    return;
  }
  var selection = selections.shift();
  data.video.width = { exact: selection.width };
  data.video.height = { exact: selection.height };
  _browser2.default.gUM(data).then(function (media) {
    p.resolve({
      media: media,
      constraints: data
    });
  }).catch(function (err) {
    // eslint-disable-line no-unused-vars
    var msg = typeof err === 'string' ? err : [err.name, err.message].join(': ');
    (0, _log.debug)('[gum:getUserMedia]', 'Failure in getUserMedia: ' + msg + '. Attempting other resolution tests...');
    (0, _log.debug)('[gUM:findformat]', 'Constraints declined by browser: ' + (0, _stringify2.default)(data, null, 2));
    findNextSelection(data, selections, p);
  });
};

/**
 * Quick test if resolution is supported on the browser.
 *
 * @param {Object} constraints
 *
 * @private
 */
var quickResolutionSupport = exports.quickResolutionSupport = function quickResolutionSupport(constraints) {
  var data = (0, _object.deepCopy)(constraints);
  // if video: `true`, returned unscathed.
  if (typeof constraints.video === 'boolean') {
    return data;
  }
  // else, define exact.
  if (constraints.video.width) {
    data.video.width = { exact: getValueFromConstraintAttribute(constraints.video.width) };
  }
  if (constraints.video.height) {
    data.video.height = { exact: getValueFromConstraintAttribute(constraints.video.height) };
  }
  return data;
};

/**
 * Detemine the supported resolution on the browser based on the Media Constraints requested.
 *
 * @param {Object} constraints
 *
 * @private
 */
var determineSupportedResolution = exports.determineSupportedResolution = function determineSupportedResolution(constraints) {
  (0, _log.debug)('[gum:determineSupportedResolution]', 'Determine next neighbor based on constraints: ' + (0, _stringify2.default)(constraints, null, 2));
  var deferred = new _promise.DeferredPromise();
  var selections = findLowerResolutions(formats)(constraints);
  var data = (0, _object.deepCopy)(constraints);
  findNextSelection(data, selections, deferred);
  return deferred.promise;
};

/**
 * Quick test to see if WebRTC is supported in the current environment.
 *
 * @return {Boolean}
 *
 * @private
 */
var isSupported = exports.isSupported = function isSupported() {
  return _RTCPeerConnection && _RTCIceCandidate && _RTCSessionDescription;
};

/**
 * Proxy on `getUserMedia` to try and resolve to the best possible resolution for broadcast based on Media Constraints object provided.
 *
 * @param {Object} constraints
 * @return {Promise}
 *        The `Promise` will resolve or reject on properly accessing a `MediaStream` from `getUserMedia` on the browser.
 *
 * @private
 */
var getUserMedia = exports.getUserMedia = function getUserMedia(constraints) {
  // Wrapping `getUserMedia` requests in another deferred promise so we can return the selected resolutions if successful.
  var dfd = new _promise.DeferredPromise();
  var isAvailableInFormats = hasMatchingFormat(formats);
  (0, _log.debug)('[gum:getUserMedia]', 'Is Available in format listing: ' + isAvailableInFormats(constraints));
  var failover = function failover(err) {
    if (err) {
      var msg = typeof err === 'string' ? err : [err.name, err.message].join(': ');
      (0, _log.debug)('[gum:getUserMedia]', 'Failure in getUserMedia: ' + msg + '. Attempting other resolution tests...');
    }
    determineSupportedResolution(constraints).then(function (res) {
      dfd.resolve({
        media: res.media,
        constraints: res.constraints
      });
    }).catch(function (error) {
      dfd.reject({
        error: error,
        constraints: constraints
      });
    });
  };
  if (!hasResolutionsDefined(constraints)) {
    (0, _log.debug)('[gum:getUserMedia]', 'Constraints were not defined properly. Attempting failover...');
    _browser2.default.gUM(constraints).then(function (media) {
      dfd.resolve({
        media: media,
        constraints: constraints
      });
    }).catch(failover);
  } else if (isAvailableInFormats(constraints)) {
    (0, _log.debug)('[gum:getUserMedia]', 'Found constraints in list. Checking quick support for faster setup with: ' + (0, _stringify2.default)(constraints, null, 2));
    // Try quick setting of `exact` resolution...
    var available = quickResolutionSupport(constraints);
    _browser2.default.gUM(available).then(function (media) {
      dfd.resolve({
        media: media,
        constraints: available
      });
    }).catch(failover);
  } else {
    (0, _log.debug)('[gum:getUserMedia]', 'Could not find contraints in list. Attempting failover...');
    failover();
  }
  return dfd.promise;
};

/**
 * Force to call `getUserMedia` directly on the browser and bypass the resolution detection mechanism provided by other methods on this module.
 *
 * @private
 */
var forceUserMedia = exports.forceUserMedia = function forceUserMedia(constraints) {
  return _browser2.default.gUM(constraints);
};

// https://github.com/muaz-khan/WebRTC-Experiment/blob/master/RTCPeerConnection/RTCPeerConnection-v1.6.js#L158
// Muaz Khan     - github.com/muaz-khan
// MIT License   - www.WebRTC-Experiment.com/licence
// Documentation - github.com/muaz-khan/WebRTC-Experiment/tree/master/RTCPeerConnection
var updateBandwidth = exports.updateBandwidth = function updateBandwidth(options, sdp) {
  if (_browser2.default.getIsMoz()) {
    var a_index = void 0,
        l_index = void 0,
        front = void 0,
        back = void 0;
    if (options.audio) {
      a_index = sdp.indexOf('m=audio');
      l_index = sdp.indexOf('\r\n', a_index);
      front = sdp.slice(0, l_index);
      back = sdp.slice(l_index + '\r\n'.length, sdp.length);
      sdp = [front, 'b=AS:' + options.audio, back].join('\r\n');
    }
    if (options.video) {
      a_index = sdp.indexOf('m=video');
      l_index = sdp.indexOf('\r\n', a_index);
      front = sdp.slice(0, l_index);
      back = sdp.slice(l_index + '\r\n'.length, sdp.length);
      sdp = [front, 'b=AS:' + options.video, back].join('\r\n');
    }
  } else {
    sdp = sdp.replace(/b=AS([^\r\n]+\r\n)/g, '');
    if (options.audio) {
      sdp = sdp.replace(/a=mid:audio\r\n/g, 'a=mid:audio\r\nb=AS:' + options.audio + '\r\n');
    }
    if (options.video) {
      sdp = sdp.replace(/a=mid:video\r\n/g, 'a=mid:video\r\nb=AS:' + options.video + '\r\n');
    }
  }
  return sdp;
};

/* -- handled by adapter.js -- */
var _RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
var _RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate || window.webkitRTCIceCandidate;
var _RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription;

var RTCPeerConnection = exports.RTCPeerConnection = _RTCPeerConnection;
var RTCIceCandidate = exports.RTCIceCandidate = _RTCIceCandidate;
var RTCSessionDescription = exports.RTCSessionDescription = _RTCSessionDescription;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = exports.isSupported = undefined;

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Test for WebSocket support in environment.
 *
 * @return {Boolean}
 *
 * @private
 */
var isSupported = exports.isSupported = function isSupported() {
  return _browser2.default.supportsWebSocket();
};

/**
 * Attempt at creating new instance of a `WebSocket` at endpoint URL.
 *
 * @param {String} url
 * @return {WebSocket}
 *
 * @private
 */
var create = exports.create = function create(url) {
  return _browser2.default.createWebSocket(url);
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlaybackView = undefined;

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProPlaybackView';
var playbackId = 'red5pro-subscriber';

/**
 * Bridge between DOM Element view and Subscriber implementation.
 * Still used, but internalized as of 4.0.0. Up for deprecation, up for discussion.
 *
 * @private
 */

var PlaybackView = exports.PlaybackView = function () {

  /**
   * @param {String} elementId
   *        The element `id` to use for playback display.
   *
   * @private
   */
  function PlaybackView() {
    var elementId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : playbackId;
    (0, _classCallCheck3.default)(this, PlaybackView);

    try {
      // Target video/audio element.
      this._targetElement = _browser2.default.resolveElement(elementId);
    } catch (e) {
      (0, _log.error)(NAME, 'Could not instantiate a new instance of Red5ProSubscriber. Reason: ' + e.message);
      throw e;
    }
  }

  /**
   * Associates Subscriber instance with this view manager.
   *
   * @param {Object} subscriber
   *        The Subscriber instance.
   *
   * @private
   */


  (0, _createClass3.default)(PlaybackView, [{
    key: 'attachSubscriber',
    value: function attachSubscriber(subscriber) {
      (0, _log.debug)(NAME, '[attachsubscriber]');
      subscriber.setView(this, _browser2.default.getElementId(this._targetElement));
    }

    /**
     * Assign the `MediaStream` object to the view.
     *
     * @param {MediaStream} mediaStream
     *
     * @private
     */

  }, {
    key: 'attachStream',
    value: function attachStream(mediaStream) {
      var autoplay = this.isAutoplay;
      (0, _log.debug)(NAME, '[attachstream]');
      _browser2.default.setVideoSource(this._targetElement, mediaStream, autoplay);
    }

    /**
     * Returns recognized `autoplay` attribute on the DOM element.
     *
     * @private
     */

  }, {
    key: 'isAutoplay',
    get: function get() {
      return _browser2.default.hasAttributeDefined(this._targetElement, 'autoplay');
    }

    /**
     * Returns the DOM element.
     *
     * @private
     */

  }, {
    key: 'view',
    get: function get() {
      return this._targetElement;
    }
  }]);
  return PlaybackView;
}();

exports.default = PlaybackView;

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(36)
  , TAG = __webpack_require__(9)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 46 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = true;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(16)
  , dPs         = __webpack_require__(177)
  , enumBugKeys = __webpack_require__(67)
  , IE_PROTO    = __webpack_require__(73)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(66)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(98).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 49 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(10)
  , core    = __webpack_require__(3)
  , fails   = __webpack_require__(25);
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(21);
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(75)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 53 */
/***/ (function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PublishModeTypes = exports.PublishTypes = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PublishTypes = exports.PublishTypes = (0, _freeze2.default)({
  RTMP: 'rtmp',
  RTC: 'rtc'
});

var PublishModeTypes = exports.PublishModeTypes = (0, _freeze2.default)({
  LIVE: 'live',
  RECORD: 'record',
  APPEND: 'append'
});

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IceTransportTypes = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Enumeration of Support ICE Transport types.
 */
var IceTransportTypes = exports.IceTransportTypes = (0, _freeze2.default)({
  UDP: 'udp',
  TCP: 'tcp'
});

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharedObjectEventTypes = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Common event types on SharedObject.
 *
 * @see {Red5ProSharedObject}
 */
var SharedObjectEventTypes = exports.SharedObjectEventTypes = (0, _freeze2.default)({
  CONNECT_SUCCESS: 'Connect.Success',
  CONNECT_FAILURE: 'Connect.Failure',
  PROPERTY_UPDATE: 'SharedObject.PropertyUpdate',
  METHOD_UPDATE: 'SharedObject.MethodUpdate'
});

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _websocket = __webpack_require__(42);

var websocket = _interopRequireWildcard(_websocket);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Base Proxy for communication with WebSocket.
 *
 * @private
 */
var SocketHelper = function () {
  function SocketHelper(responder, name) {
    (0, _classCallCheck3.default)(this, SocketHelper);

    this._responder = responder;
    this._pendingPostRequests = [];
    this._websocket = undefined;
    this._connectionPromise = undefined;
    this._name = name;
    this._responseHandlers = [];
    this._isTerminated = false;
    this._retryCount = 0;
    this._retryLimit = 1;
    this._readyCheckCount = 0;
    this._readyCheckLimit = 10;
    this._onclose = this.tearDown.bind(this);

    this._onopenTimeout = 0;

    this._asyncTickets = [];
  }

  (0, _createClass3.default)(SocketHelper, [{
    key: '_resetOnopenTimeout',
    value: function _resetOnopenTimeout(ws, promise) {
      var _this = this;

      // const forceReconnect = environment.getIsMoz() || environment.getIsEdge()
      var timeout = setTimeout(function () {
        clearTimeout(timeout);
        if (ws.readyState === 1) {
          (0, _log.info)(_this._name, '[websocketopen]');
          while (_this._pendingPostRequests.length > 0) {
            _this.post(_this._pendingPostRequests.shift());
          }
          if (_this._responder && _this._responder.onSocketOpen) {
            _this._responder.onSocketOpen();
          }
        } else if (ws.readyState === 0) {
          if (++_this._readyCheckCount > _this._readyCheckLimit) {
            (0, _log.warn)(_this._name, 'WebSocket connection issue. We have waited for ' + (_this._readyCheckCount - 1) + ' samples, without any connection.');
            // If Firefox/Edge, try a second connection attempt or fail.
            /*
            if (forceReconnect && ++this._retryCount < this._retryLimit) {
              warn(this._name, `WebSocket attempting retry...`)
              this._removeSocketHandlers(ws)
              this._onopenTimeout = setTimeout(() => {
                clearTimeout(this._onopenTimeout)
                this.setUp(ws.url, promise)
              }, 2000)
            } else {
              promise.reject({type: 'Timeout'})
            }
            */
            _this.clearRetry();
            promise.reject({ type: 'Timeout' });
            _this.tearDown();
          } else {
            (0, _log.info)(_this._name, 'WebSocket connection is still opening, will let it continue (' + _this._readyCheckCount + ')...');
            _this._onopenTimeout = _this._resetOnopenTimeout(ws, promise);
          }
        } else {
          (0, _log.info)(_this._name, 'WebSocket connection attempts have ended with state (' + ws.readyState + ').');
        }
      }, 500);
      return timeout;
    }

    /**
     * Removes event handlers from WebSocket.
     *
     * @param {WebSocket} ws
     *
     * @private
     */

  }, {
    key: '_removeSocketHandlers',
    value: function _removeSocketHandlers(ws) {
      if (ws) {
        ws.onopen = undefined;
        ws.onmessage = undefined;
        ws.onerror = undefined;
        ws.onclose = undefined;
      }
    }

    /**
     * Assigns event handler to WebSocket.
     *
     * @param {WebSocket} ws
     * @param {Promise}
     *        The `Promise` to reject on error in connection to WebSocket.
     *
     * @private
     */

  }, {
    key: '_addSocketHandlers',
    value: function _addSocketHandlers(ws, promise) {
      var _this2 = this;

      /* 
       * Removing this in favor of checking readyState for verification of open.
       *
      ws.onopen = () => {
        info(this._name, '[websocketopen]')
        while (this._pendingPostRequests.length > 0) {
          this.post(this._pendingPostRequests.shift())
        }
      }
      */

      this._readyCheckCount = 0;
      clearTimeout(this._onopenTimeout);
      this._onopenTimeout = this._resetOnopenTimeout(ws, promise);

      ws.onerror = function (error) {
        (0, _log.warn)(_this2._name, '[websocketerror]: Error from WebSocket. ' + error.type + '.');
        _this2.clearRetry();
        promise.reject(error);
      };

      ws.onmessage = function (message) {
        _this2.respond(message);
      };

      ws.onclose = function (event) {
        (0, _log.warn)(_this2._name, '[websocketclose]: ' + event.code);
        if (_this2._responder) {
          _this2._responder.onSocketClose(event);
        }
        _this2.clearRetry();
        _this2._removeSocketHandlers(ws || _this2._websocket);
      };
    }

    /**
     * Handler for unexpected error through WebSocket.
     *
     * @param {Object} error
     *
     * @private
     */

  }, {
    key: '_onUnexpectedSocketError',
    value: function _onUnexpectedSocketError(error) {
      if (this._responder) {
        this._responder.onSocketClose(error);
      }
      (0, _log.warn)(this._name, '[websocketerror]: Possible Unexpected Error from WebSocket. ' + error.type + ', ' + error.detail);
      this.clearRetry();
      this._removeSocketHandlers(this._websocket);
    }

    /**
     * Clears the retry count to allow for single publisher to retry again after an unpublish.
     *
     * @private
     */

  }, {
    key: 'clearRetry',
    value: function clearRetry() {
      this._retryCount = 0;
      this._readyCheckCount = 0;
      clearTimeout(this._onopenTimeout);
    }

    /**
     * Request to setup WebSocket connection for communication.
     *
     * @param {String} url
     *        Endpoint URL of the socket to connect to.
     * @param {Promise} setupPromise
     *        The `Promise` to resolve or reject on success of setup WebSocket connection.
     */

  }, {
    key: 'setUp',
    value: function setUp(url, setupPromise) {
      var _this3 = this;

      var forceReconnect = _browser2.default.getIsMoz() || _browser2.default.getIsEdge();
      (0, _log.debug)(this._name, '[websocket:setup] ' + url + '.');
      this.tearDown();
      this._isTerminated = false;
      this._connectionPromise = setupPromise;
      _browser2.default.addCloseHandler(this._onclose);
      this._websocket = websocket.create(url);
      this._addSocketHandlers(this._websocket, this._connectionPromise);
      if (forceReconnect && this._retryCount++ < this._retryLimit) {
        (0, _log.debug)(this._name, 'We have determined it is Firefox and are setting up a retry limit.');
        var timeout = setTimeout(function () {
          if (_this3._websocket && _this3._websocket.readyState === 0) {
            (0, _log.debug)(_this3._name, '[websocket:FF-timeout]');
            (0, _log.debug)(_this3._name, 'Our connection on Firefox to the wss endpoint has timed out. Let\'s try that again.');
            _this3._removeSocketHandlers(_this3._websocket);
            _this3.setUp(url, setupPromise);
          }
          clearTimeout(timeout);
        }, 2000);
      }
    }

    /**
     * Request to tear down any WebSocket connection.
     */

  }, {
    key: 'tearDown',
    value: function tearDown() {
      this._pendingPostRequests.length = 0;
      if (typeof this._websocket !== 'undefined' && !this._isTerminated) {
        (0, _log.debug)(this._name, '[teardown] >>');
        (0, _log.debug)(this._name, '[WebSocket(' + this._websocket.url + ')] close() >>');
        //      this._removeSocketHandlers(this._websocket)
        try {
          this._websocket.close();
        } catch (e) {
          (0, _log.warn)(this._name, 'Attempt to close WebSocket failed: ' + e.message + '.');
          this._removeSocketHandlers(this._websocket);
        } finally {
          if (this._websocket) {
            (0, _log.debug)(this._name, '<< [WebSocket(' + this._websocket.url + ')] close()');
          }
        }
        (0, _log.debug)(this._name, '<< [teardown]');
      }
      this._websocket = undefined;
      this._isTerminated = true;
      while (this._responseHandlers.length > 0) {
        this._responseHandlers.shift();
      }
      _browser2.default.removeCloseHandler(this._onclose);
    }

    /**
     * Request to parse JSON from message received over WebSocket.
     *
     * @param {Object} message
     *        String or Object.
     */

  }, {
    key: 'getJsonFromSocketMessage',
    value: function getJsonFromSocketMessage(message) {
      try {
        return typeof message.data === 'string' ? JSON.parse(message.data) : message.data;
      } catch (e) {
        (0, _log.warn)(this._name, 'Could not parse message as JSON. Message= ' + message.data + '. Error= ' + e.message);
      }
      return null;
    }

    /**
     * Adds a SharedObject response handler. Handlers are requested to respond to a message in `handleMessageResponse`.
     *
     * @param {Object} handler
     */

  }, {
    key: 'addSharedObjectResponseHandler',
    value: function addSharedObjectResponseHandler(handler) {
      this._responseHandlers.push(handler);
    }

    /**
     * Removes a SharedObject response handler.
     *
     * @param {Object} handler
     */

  }, {
    key: 'removeSharedObjectResponseHandler',
    value: function removeSharedObjectResponseHandler(handler) {
      var i = this._responseHandlers.length;
      var rHandler = void 0;
      while (--i > -1) {
        rHandler = this._responseHandlers[i];
        if (rHandler === handler) {
          this._responseHandlers.splice(i, 1);
          return;
        }
      }
    }

    /**
     * Traverses list of response handlers and returns flag of it being handled within the chain.
     *
     * @param {Object} message
     * @return {Boolean}
     */

  }, {
    key: 'handleMessageResponse',
    value: function handleMessageResponse(message) {
      var i = void 0,
          handler = void 0;
      var length = this._responseHandlers.length;
      for (i = 0; i < length; i++) {
        handler = this._responseHandlers[i];
        if (handler.respond(message)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Request to post notification of end of candidates in WebRTC scenario.
     */

  }, {
    key: 'postEndOfCandidates',
    value: function postEndOfCandidates(streamName) {
      this.post({
        handleCandidate: streamName,
        data: {
          candidate: {
            type: 'candidate',
            candidate: ''
          }
        }
      });
    }

    /**
     * Request to post data over WebSocket connection.
     * Queues messages if WebSocket connection is still being established.
     *
     * @param {Object} sendRequest
     */

  }, {
    key: 'post',
    value: function post(sendRequest) {
      if (this._websocket !== undefined && this._websocket.readyState === 1 /* WebSocket.OPEN */) {
          try {
            (0, _log.debug)(this._name, '[websocket-post]: ' + (0, _stringify2.default)(sendRequest, null, 2));
            this._websocket.send((0, _stringify2.default)(sendRequest));
            return true;
          } catch (e) {
            (0, _log.debug)(this._name, 'Could not send request: ' + sendRequest + '. ' + e);
            return false;
          }
        } else if (this._websocket !== undefined && (this._websocket.readyState === 2 || this._websocket.readyState === 3)) /* WebSocket.(CLOSING | CLOSED) */{
          return false;
        } else if (this._isTerminated) {
        return false;
      } else {
        this._pendingPostRequests.push(sendRequest);
        return true;
      }
    }
  }, {
    key: 'postAsync',
    value: function postAsync(sendRequest) {
      var p = new _promise.DeferredPromise();
      var id = Math.floor(Math.random() * 0x10000).toString(16);
      sendRequest.id = id;
      sendRequest.async = true;
      this._asyncTickets.push({ id: id, promise: p });
      this.post(sendRequest);
      return p.promise;
    }

    /**
     * Responds to messages coming over the WebSocket connection.
     *
     * @param {Object} message
     */

  }, {
    key: 'respond',
    value: function respond(message) {
      // eslint-disable-line no-unused-vars
      var handled = this.handleMessageResponse(message);
      if (!handled && message.data) {
        var json = this.getJsonFromSocketMessage(message);
        if (json === null) {
          (0, _log.warn)(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
          return true;
        }
        (0, _log.debug)(this._name, '[websocket-response]: ' + (0, _stringify2.default)(json, null, 2));
        if (json.isAvailable !== undefined) {
          if (typeof json.isAvailable === 'boolean' && json.isAvailable) {
            this._responder.onStreamAvailable(json);
            return true;
          } else {
            this._responder.onStreamUnavailable(json);
            return true;
          }
        } else if (json.async && json.id) {
          var ticket = this._asyncTickets.find(function (el) {
            return el.id === json.id;
          });
          var promise = ticket.promise;

          if (promise && json.data) {
            promise.resolve(json.data);
          } else if (promise && json.error) {
            promise.reject(json.error);
          }
        } else if (json.data !== undefined) {
          var data = json.data;

          if (data.message !== undefined) {
            if (data.type === 'error') {
              this._responder.onSocketMessageError(data.message, data.detail);
              return true;
            }
          } else if (data.type === 'status') {
            if (data.code === 'NetConnection.Connect.Success') {
              this._websocket.onerror = this._onUnexpectedSocketError.bind(this);
              this._connectionPromise.resolve();
              return true;
            } else if (data.code === 'NetConnection.Connect.Rejected') {
              this._connectionPromise.reject('NetConnection.Connect.Rejected');
              return true;
            }
          } else if (data.type === 'error') {
            if (data.code === 'NetConnection.Connect.Rejected') {
              this._connectionPromise.reject('NetConnection.Connect.Rejected');
              return true;
            } else if (data.code === 'NetConnection.Connect.Failed') {
              this._connectionPromise.reject('NetConnection.Connect.Failed');
              return true;
            }
          }
        }
      }
      return handled;
    }

    /**
     * Request to get SharedObject from server over WebSocket.
     *
     * @param {String} name
     */

  }, {
    key: 'getRemoteSharedObject',
    value: function getRemoteSharedObject(name) {
      this.post({
        sharedObjectGetRemote: {
          name: name
        }
      });
    }

    /**
     * Request to connect to SharedObject from server over WebSocket.
     *
     * @param {String} name
     */

  }, {
    key: 'connectToSharedObject',
    value: function connectToSharedObject(name) {
      this.post({
        sharedObjectConnect: {
          name: name
        }
      });
    }

    /**
     * Request to send method call to SharedObject over WebSocket.
     *
     * @param {String} name
     * @param {String} callName
     * @param {Object} data
     */

  }, {
    key: 'sendToSharedObject',
    value: function sendToSharedObject(name, callName, data) {
      this.post({
        sharedObjectSend: {
          name: name,
          call: callName,
          params: [data]
        }
      });
    }

    /**
     * Request to update property on SharedObject over WebSocket.
     *
     * @param {String} name
     * @param {String} key
     * @param {String} value
     */

  }, {
    key: 'sendPropertyToSharedObject',
    value: function sendPropertyToSharedObject(name, key, value) {
      this.post({
        sharedObjectSetProperty: {
          name: name,
          key: key,
          value: value
        }
      });
    }

    /**
     * Request to close the SharedObject connection over WebSocket.
     *
     * @param {String} name
     */

  }, {
    key: 'closeSharedObject',
    value: function closeSharedObject(name) {
      this.post({
        sharedObjectClose: {
          name: name
        }
      });
    }

    /**
     * Returns flag of socket being closed and temrinated.
     *
     * @returns {Boolean}
     */

  }, {
    key: 'isTerminated',
    get: function get() {
      return this._isTerminated;
    }
  }]);
  return SocketHelper;
}();

exports.default = SocketHelper;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Recent changes have moved the WebSocket port of the server to 5080 or 443.
 * Our previous recommendation was to use 8081 or 8083.
 *
 * This is for backward compatibility and should be upgraded to DEPRECATION.
 *
 * @private
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hlsSocketEndpointFromOptions = exports.rtcSocketEndpointFromOptions = exports.encodeKeyValues = undefined;

var _extends2 = __webpack_require__(29);

var _extends3 = _interopRequireDefault(_extends2);

var _keys = __webpack_require__(60);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getBackgroundCompatWebSocketPort = function getBackgroundCompatWebSocketPort(port) {
  switch (port) {
    case 8083:
    case '8083':
      console.warn('The default WebSocket port on the server has changed from 8083 to 443 for secure connections.'); // eslint-disable-line no-console
      return 443;
    case 8081:
    case '8081':
      console.warn('The default WebSocket port on the server has changed from 8081 to 5080 or 80 for secure connections.'); // eslint-disable-line no-console
      return 5080;
  }
  return port;
};

/**
 * Encode the value of each key and return a new object.
 *
 * @param {Object} valueObject
 *        The object whose values should be encoded.
 * @return {Object}
 *
 * @private
 */
var encodeKeyValues = exports.encodeKeyValues = function encodeKeyValues(valueObject) {
  var encoded = {};
  (0, _keys2.default)(valueObject).forEach(function (key, index) {
    // eslint-disable-line no-unused-vars
    encoded[key] = encodeURIComponent(valueObject[key]);
  });
  return encoded;
};

/**
 * Construct endpoint to use for WebSocket connection based on configuration object and optional params to append to query.
 *
 * @param {Object} options
 *        The configuration options provided in `init()` of WebRTC based publisher or subscriber.
 * @param {Object} params
 *        The optional params to append to the endpoint. Used by server in connection parse.
 * @private
 */
var rtcSocketEndpointFromOptions = exports.rtcSocketEndpointFromOptions = function rtcSocketEndpointFromOptions(options) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  var protocol = options.wsprotocol || options.protocol;
  var port = getBackgroundCompatWebSocketPort(options.wsport || options.port);
  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
  var endpoint = protocol + '://' + options.host + ':' + port + '/' + appEndpoint + '/';
  if (typeof options.connectionParams !== 'undefined') {
    var encodedParams = encodeKeyValues(options.connectionParams);
    params = (0, _extends3.default)(params, encodedParams);
  }
  if (typeof params !== 'undefined') {
    var kv = [];
    (0, _keys2.default)(params).forEach(function (key, index) {
      // eslint-disable-line no-unused-vars
      kv.push([key, params[key]].join('='));
    });
    if (kv.length > 0) {
      endpoint += '?' + kv.join('&');
    }
  }

  return endpoint;
};

/**
 * Construct endpoint to use for WebSocket connection based on configuration object and optional params to append to query.
 * This allows for such things as authentication prior to request of playback of HLS file.
 * Requires a `socketParams` attribute in the init configuration that describe the WebSocket endpoint to make the request on.
 *
 * @param {Object} options
 *        The configuration options provided in `init()` of HLS based subscriber.
 * @param {Object} params
 *        The optional params to append to the endpoint. Used by server in connection parse.
 *
 * @example
 *  var subscriber = new HLSubscriber()
 *  subscriber.init({
 *    protocol: 'https',
 *    host: 'mycompany.org',
 *    app: 'live',
 *    streamName: 'mystream',
 *    socketParams: {
 *      protocol: 'wss',
 *      host: 'mycompany.org',
 *      app: 'live'
 *    },
 *    connectionParams: {
 *      user: 'foo',
 *      password: 'bar'
 *    }
 *  })
 * @private
 */
var hlsSocketEndpointFromOptions = exports.hlsSocketEndpointFromOptions = function hlsSocketEndpointFromOptions(options) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var socketParams = options.socketParams,
      connectionParams = options.connectionParams;

  var protocol = socketParams.protocol;
  var port = getBackgroundCompatWebSocketPort(socketParams.port || (protocol === 'wss' ? 443 : 5080));
  var endpoint = protocol + '://' + socketParams.host + ':' + port + '/' + socketParams.app + '/';
  if (connectionParams) {
    var encodedParams = encodeKeyValues(options.connectionParams);
    params = (0, _extends3.default)(params, encodedParams);
  }
  if (params) {
    var kv = [];
    (0, _keys2.default)(params).forEach(function (key, index) {
      // eslint-disable-line no-unused-vars
      kv.push([key, params[key]].join('='));
    });
    if (kv.length > 0) {
      endpoint += '?' + kv.join('&');
    }
  }

  return endpoint;
};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProPublishView';
var publisherId = 'red5pro-publisher';

/**
 * Bridge between DOM Element view and Publisher implementation.
 * Still used, but internalized as of 4.0.0. Up for deprecation, up for discussion.
 *
 * @private
 */

var PublishView = function () {

  /**
   * @param {String} elementId
   *        The element `id` to use for playback display.
   * @private
   */
  function PublishView() {
    var elementId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : publisherId;
    (0, _classCallCheck3.default)(this, PublishView);

    try {
      this._targetElement = _browser2.default.resolveElement(elementId);
    } catch (e) {
      (0, _log.error)(NAME, 'Could not instantiate a new instance of Red5ProPublisher. Reason: ' + e.message);
      throw e;
    }
  }

  (0, _createClass3.default)(PublishView, [{
    key: 'attachPublisher',
    value: function attachPublisher(publisher) {
      (0, _log.debug)(NAME, '[attachpublisher]');
      publisher.setView(this, _browser2.default.getElementId(this._targetElement));
    }
  }, {
    key: 'preview',
    value: function preview(mediaStream) {
      var autoplay = this.isAutoplay;
      (0, _log.debug)(NAME, '[preview]: autoplay(' + autoplay + ')');
      _browser2.default.setVideoSource(this._targetElement, mediaStream, autoplay);
    }
  }, {
    key: 'isAutoplay',
    get: function get() {
      return _browser2.default.hasAttributeDefined(this._targetElement, 'autoplay');
    }
  }, {
    key: 'view',
    get: function get() {
      return this._targetElement;
    }
  }]);
  return PublishView;
}();

exports.default = PublishView;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(158), __esModule: true };

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(160), __esModule: true };

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(141);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(140);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = __webpack_require__(19)
  , IObject  = __webpack_require__(68)
  , toObject = __webpack_require__(33)
  , toLength = __webpack_require__(52)
  , asc      = __webpack_require__(169);
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global         = __webpack_require__(11)
  , $export        = __webpack_require__(10)
  , meta           = __webpack_require__(31)
  , fails          = __webpack_require__(25)
  , hide           = __webpack_require__(21)
  , redefineAll    = __webpack_require__(51)
  , forOf          = __webpack_require__(37)
  , anInstance     = __webpack_require__(44)
  , isObject       = __webpack_require__(13)
  , setToStringTag = __webpack_require__(39)
  , dP             = __webpack_require__(14).f
  , each           = __webpack_require__(64)(0)
  , DESCRIPTORS    = __webpack_require__(17);

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function(target, iterable){
      anInstance(target, C, NAME, '_c');
      target._c = new Base;
      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
        anInstance(this, C, KEY);
        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    if('size' in proto)dP(C.prototype, 'size', {
      get: function(){
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(13)
  , document = __webpack_require__(11).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 67 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(36);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY        = __webpack_require__(47)
  , $export        = __webpack_require__(10)
  , redefine       = __webpack_require__(72)
  , hide           = __webpack_require__(21)
  , has            = __webpack_require__(20)
  , Iterators      = __webpack_require__(30)
  , $iterCreate    = __webpack_require__(174)
  , setToStringTag = __webpack_require__(39)
  , getPrototypeOf = __webpack_require__(107)
  , ITERATOR       = __webpack_require__(9)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(49)
  , createDesc     = __webpack_require__(38)
  , toIObject      = __webpack_require__(22)
  , toPrimitive    = __webpack_require__(76)
  , has            = __webpack_require__(20)
  , IE8_DOM_DEFINE = __webpack_require__(99)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(17) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 71 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(21);

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(74)('keys')
  , uid    = __webpack_require__(53);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(11)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ }),
/* 75 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(13);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var global         = __webpack_require__(11)
  , core           = __webpack_require__(3)
  , LIBRARY        = __webpack_require__(47)
  , wksExt         = __webpack_require__(78)
  , defineProperty = __webpack_require__(14).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(9);

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(45)
  , ITERATOR  = __webpack_require__(9)('iterator')
  , Iterators = __webpack_require__(30);
module.exports = __webpack_require__(3).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.embedSwfObject = exports.defineEmbedElement = undefined;

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _promise = __webpack_require__(5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Replaces a `video` element with a container for embedding a Flash object.
 *
 * @param {Element} targetElement
 * @param {Element} targetParent
 *
 * @private
 */
var defineEmbedElement = exports.defineEmbedElement = function defineEmbedElement(targetElement, targetParent) {
  var dfd = new _promise.DeferredPromise();
  var elementId = targetElement.id;
  if (targetElement.nodeName.toLowerCase() === 'video') {
    var div = _browser2.default.createElement('div');
    div.id = elementId + '_rtmp';
    targetParent.appendChild(div);
    if (targetElement.parentElement) {
      targetElement.parentElement.removeChild(targetElement);
    }
    dfd.resolve(div.id);
  } else {
    dfd.resolve(elementId);
  }
  return dfd.promise;
};

/**
 * Request to embed a Flash object using SWFObject library.
 *
 * @param {String} idName
 * @param {Object} options
 *        Initialization configuration map.
 * @param {Object} flashvars
 *        The FlashVars to pass into the embedded object.
 * @param {Object} swfobject
 *        The loaded SWFObject library util.
 * @param {String} elementId
 *        The id of the Element to embed.
 * @return {Promise}
 *
 * @private
 */
var embedSwfObject = exports.embedSwfObject = function embedSwfObject(idName, options, flashvars, swfobject, elementId) {
  var dfd = new _promise.DeferredPromise();
  var params = {
    quality: 'high',
    wmode: 'opaque',
    bgcolor: options.backgroundColor || '#000',
    allowscriptaccess: 'always',
    allowfullscreen: 'true',
    allownetworking: 'all'
  };
  var attributes = {
    id: idName,
    name: idName,
    align: 'middle'
  };
  if (swfobject.hasFlashPlayerVersion(options.minFlashVersion)) {
    swfobject.embedSWF(options.swf, elementId, options.embedWidth || 640, options.embedHeight || 480, options.minFlashVersion, options.productInstallURL, flashvars, params, attributes, function (result) {
      if (result.success) {
        dfd.resolve();
      } else {
        dfd.reject('Flash Object embed failed.');
      }
    });
  } else {
    dfd.reject('Flash Player Version is not supported.');
  }
  return dfd.promise;
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyOrientation = undefined;

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var requestFrame = _browser2.default.requestFrame;

/* || Translation Styles used on Orientation-change metadata from Mobile broadcasters. || */

var origin = ['webkitTransformOrigin', 'mozTransformOrigin', 'msTransformOrigin', 'oTransformOrigin', 'transformOrigin'];
var styles = ['webkitTransform', 'mozTransform', 'msTransform', 'oTransform', 'transform'];
var transition = ['webkitTransition', 'mozTransition', 'msTransition', 'oTransition', 'transition'];
var rotationTranslations = {
  '0': {
    origin: 'center center',
    transform: 'rotate(0deg)'
  },
  '90': {
    origin: 'left top',
    transform: 'rotate(90deg) translateY(-100%)'
  },
  '180': {
    origin: 'center center',
    transform: 'rotate(180deg)'
  },
  '270': {
    origin: 'top left',
    transform: 'rotate(270deg) translateX(-100%) translateY(0%)'
  },
  '-90': {
    origin: 'left top',
    transform: 'rotate(-90deg) translateX(-100%)'
  },
  '-180': {
    origin: 'center center',
    transform: 'rotate(-180deg)'
  },
  '-270': {
    origin: 'top left',
    transform: 'rotate(-270deg) translateY(-100%)'
  }

  /* Utility method to track and resize an element on enter frame. */
};var trackResize = function trackResize(element, raf) {
  var isRotated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function () {
    var parent = element.parentNode;
    if (parent) {
      var pwidth = parent.clientWidth;
      var pheight = parent.clientHeight;
      if (isRotated) {
        element.style.width = pheight + 'px';
      } else {
        element.style.width = pwidth + 'px';
      }
      var ewidth = element.clientWidth;
      var eheight = element.clientHeight;
      var margin = (isRotated ? pwidth - eheight : pwidth - ewidth) * 0.5;
      element.style.position = 'relative';
      element.style.left = margin + 'px';
    }
    if (raf) {
      raf(trackResize(element, raf, isRotated));
    }
  };
};

var applyOrientation = exports.applyOrientation = function applyOrientation(element, value, resolution) {
  // eslint-disable-line no-unused-vars
  var i = void 0,
      length = styles.length;
  value = value % 360;
  var isRotated = value % 180 !== 0;
  var parent = element.parentNode;
  var pwidth = element.width ? element.width : parent.clientWidth;
  var pheight = element.height ? element.height : parent.clientHeight;
  var translations = rotationTranslations[value.toString()];
  for (i = 0; i < length; i++) {
    element.style[origin[i]] = translations.origin;
    element.style[styles[i]] = translations.transform;
    element.style[transition[i]] = 'transform 0.0s linear';
  }
  if (isRotated) {
    // const scale = pwidth > pheight ? pheight / pwidth : pwidth / pheight
    element.style.width = pheight + 'px';
    parent.style.height = pheight + 'px';
    // element.style.height = (pwidth * scale) + 'px'
  } else {
    element.style.width = pwidth + 'px';
    element.style.height = pheight + 'px';
    //    parent.style.width = pwidth + 'px'
  }

  if (document.attachEvent) {
    parent.attachEvent('resize', trackResize(element, requestFrame, isRotated));
  } else {
    trackResize(element, requestFrame, isRotated)();
  }
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTMPPublisherEventTypes = exports.RTCPublisherEventTypes = exports.FailoverPublisherEventTypes = exports.PublisherEventTypes = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Common Publisher-based event types.
 */
var PublisherEventTypes = exports.PublisherEventTypes = (0, _freeze2.default)({
  CONNECT_SUCCESS: 'Connect.Success',
  CONNECT_FAILURE: 'Connect.Failure',
  PUBLISH_START: 'Publish.Start',
  PUBLISH_FAIL: 'Publish.Fail',
  PUBLISH_INVALID_NAME: 'Publish.InvalidName',
  UNPUBLISH_SUCCESS: 'Unpublish.Success',
  PUBLISH_METADATA: 'Publish.Metadata',
  PUBLISH_SEND_INVOKE: 'Publish.Send.Invoke',
  CONNECTION_CLOSED: 'Publisher.Connection.Closed',
  DIMENSION_CHANGE: 'Publisher.Video.DimensionChange'
});

/**
 * Event types dispacthed from and specific to `Red5ProPublisher`.
 *
 * @see {Red5ProPublisher}
 */
var FailoverPublisherEventTypes = exports.FailoverPublisherEventTypes = (0, _freeze2.default)({
  PUBLISHER_REJECT: 'Publisher.Reject',
  PUBLISHER_ACCEPT: 'Publisher.Accept'
});

/**
 * Event types dispatched from and specific to `RTCPublisher`.
 *
 * @see {RTCPublisher}
 */
var RTCPublisherEventTypes = exports.RTCPublisherEventTypes = (0, _freeze2.default)({
  MEDIA_STREAM_AVAILABLE: 'WebRTC.MediaStream.Available',
  PEER_CONNECTION_AVAILABLE: 'WebRTC.PeerConnection.Available',
  OFFER_START: 'WebRTC.Offer.Start',
  OFFER_END: 'WebRTC.Offer.End',
  PEER_CANDIDATE_END: 'WebRTC.PeerConnection.CandidateEnd',
  ICE_TRICKLE_COMPLETE: 'WebRTC.IceTrickle.Complete'
});

/**
 * Event types dispatched from and specific to `RTMPPublisher`.
 *
 * @see {RTMPPublisher}
 */
var RTMPPublisherEventTypes = exports.RTMPPublisherEventTypes = (0, _freeze2.default)({
  EMBED_SUCCESS: 'FlashPlayer.Embed.Success',
  EMBED_FAILURE: 'FlashPlayer.Embed.Failure'
});

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTMPSubscriberEventTypes = exports.RTCSubscriberEventTypes = exports.FailoverSubscriberEventTypes = exports.SubscriberEventTypes = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Common event types on all Subscribers.
 */
var SubscriberEventTypes = exports.SubscriberEventTypes = (0, _freeze2.default)({
  CONNECT_SUCCESS: 'Connect.Success',
  CONNECT_FAILURE: 'Connect.Failure',
  SUBSCRIBE_START: 'Subscribe.Start',
  SUBSCRIBE_STOP: 'Subscribe.Stop',
  SUBSCRIBE_FAIL: 'Subscribe.Fail',
  SUBSCRIBE_INVALID_NAME: 'Subscribe.InvalidName',
  SUBSCRIBE_METADATA: 'Subscribe.Metadata',
  SUBSCRIBE_SEND_INVOKE: 'Subscribe.Send.Invoke',
  PLAY_UNPUBLISH: 'Subscribe.Play.Unpublish',
  CONNECTION_CLOSED: 'Subscribe.Connection.Closed',
  ORIENTATION_CHANGE: 'Subscribe.Orientation.Change',
  VOLUME_CHANGE: 'Subscribe.Volume.Change',
  PLAYBACK_TIME_UPDATE: 'Subscribe.Time.Update',
  PLAYBACK_STATE_CHANGE: 'Subscribe.Playback.Change',
  FULL_SCREEN_STATE_CHANGE: 'Subscribe.FullScreen.Change',
  AUTO_PLAYBACK_FAILURE: 'Subscribe.Autoplay.Failure',
  AUTO_PLAYBACK_MUTED: 'Subscribe.Autoplay.Muted'
});

/**
 * Event types dispatched from and specific to `Red5ProSubscriber`.
 *
 * @see {Red5ProSubscriber}
 */
var FailoverSubscriberEventTypes = exports.FailoverSubscriberEventTypes = (0, _freeze2.default)({
  SUBSCRIBER_REJECT: 'Subscriber.Reject',
  SUBSCRIBER_ACCEPT: 'Subscriber.Accept'
});

/**
 * Event types dispatched from and specific to `RTCSubscriber`.
 *
 * @see {RTCSubscriber}
 */
var RTCSubscriberEventTypes = exports.RTCSubscriberEventTypes = (0, _freeze2.default)({
  PEER_CONNECTION_AVAILABLE: 'WebRTC.PeerConnection.Available',
  OFFER_START: 'WebRTC.Offer.Start',
  OFFER_END: 'WebRTC.Offer.End',
  ANSWER_START: 'WebRTC.Answer.Start',
  ANSWER_END: 'WebRTC.Answer.End',
  CANDIDATE_START: 'WebRTC.Candidate.Start',
  CANDIDATE_END: 'WebRTC.Candidate.End',
  PEER_CANDIDATE_END: 'WebRTC.PeerConnection.CandidateEnd',
  ICE_TRICKLE_COMPLETE: 'WebRTC.IceTrickle.Complete',
  ON_ADD_STREAM: 'WebRTC.Add.Stream'
});

/**
 * Event type dispatched from and specific to `RTMPSubscriber`.
 *
 * @see {RTMPSubscriber}
 */
var RTMPSubscriberEventTypes = exports.RTMPSubscriberEventTypes = (0, _freeze2.default)({
  EMBED_SUCCESS: 'FlashPlayer.Embed.Success',
  EMBED_FAILURE: 'FlashPlayer.Embed.Failure',
  // Stream Manager + ABR Specific
  ABR_LEVEL_CHANGE: 'RTMP.AdaptiveBitrate.Level'
});

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProRTMPSharedObjectHandler';

/**
 * Flash-based SharedObject handler.
 *
 * @private
 */

var RTMPSharedObjectHandler = function () {
  function RTMPSharedObjectHandler() {
    (0, _classCallCheck3.default)(this, RTMPSharedObjectHandler);

    this._element = undefined;
    this._responseHandlers = [];
  }

  /**
   * Adds a response handler for SharedObject events.
   *
   * @param {Object} handler
   */


  (0, _createClass3.default)(RTMPSharedObjectHandler, [{
    key: 'addResponseHandler',
    value: function addResponseHandler(handler) {
      this._responseHandlers.push(handler);
    }

    /**
     * Removes a response handler from SharedObject events.
     *
     * @param {Object} handler
     */

  }, {
    key: 'removeResponseHandler',
    value: function removeResponseHandler(handler) {
      var i = this._responseHandlers.length;
      var rHandler = void 0;
      while (--i > -1) {
        rHandler = this._responseHandlers[i];
        if (rHandler === handler) {
          this._responseHandlers.splice(i, 1);
          return;
        }
      }
    }

    /**
     * Handles an event from a SharedObject.
     *
     * @param {Object} event
     */

  }, {
    key: 'handleSharedObjectEvent',
    value: function handleSharedObjectEvent(event) {
      (0, _log.debug)(NAME, '[sharedobject:event]');
      var i = void 0;
      var length = this._responseHandlers.length;
      var handler = void 0;
      for (i = 0; i < length; i++) {
        handler = this._responseHandlers[i];
        if (handler.respond(JSON.parse(event))) {
          break;
        }
      }
    }

    /**
     * Assigns a global response handler for SharedObject communication through Flash object over ExternalInterface.
     *
     * @param {String} name
     * @param {Element} el
     *        The object embed element.
     */

  }, {
    key: 'assignSharedObjectResponder',
    value: function assignSharedObjectResponder(name, el) {
      var _handleSharedObjectEvent = this.handleSharedObjectEvent.bind(this);
      var elId = el.id.split('-').join('_');
      var handlerName = ['handleSharedObjectEvent', elId].join('_');
      (0, _log.debug)(NAME, '[assign:sharedobject:responder] :: ' + elId);
      (0, _log.debug)(NAME, '[sharedoject:responder] :: ' + handlerName);
      el.setSharedObjectResponder(name, handlerName);
      _browser2.default.setGlobal(handlerName, _handleSharedObjectEvent);
    }

    /**
     * Request to connect to SharedObject.
     */

  }, {
    key: 'connect',
    value: function connect(swfId) {
      this._element = _browser2.default.getEmbedObject(swfId);
      if (!this._element) {
        (0, _log.warn)('Could not locate embedded Flash object for id: ' + swfId);
      }
    }

    /**
     * Request to disconnect to SharedObject.
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      while (this._responseHandlers.length > 0) {
        this._responseHandlers.shift();
      }
    }

    /**
     * Attempt to send method update to SharedObject.
     *
     * @param {String} name
     * @param {String} callName
     * @param {Object} message
     *        String or Object that will be serialized to a JSON string.
     */

  }, {
    key: 'sendToSharedObject',
    value: function sendToSharedObject(name, callName, message) {
      (0, _log.debug)(NAME, '[sendToSharedObject]');
      try {
        this._element.sharedObjectSend(name, callName, typeof message === 'string' ? message : (0, _stringify2.default)(message));
      } catch (e) {
        (0, _log.warn)('Could not send to shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Attempt to update property on SharedObject.
     *
     * @param {String} name
     * @param {String} key
     * @param {Object} value
     */

  }, {
    key: 'sendPropertyToSharedObject',
    value: function sendPropertyToSharedObject(name, key, value) {
      (0, _log.debug)(NAME, '[sendPropertyToSharedObject]');
      try {
        this._element.sharedObjectSendProperty(name, key, value);
      } catch (e) {
        (0, _log.warn)('Could not send to shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Request to get remote ShareObject by name.
     *
     * @param {String} sharedObjectName
     */

  }, {
    key: 'getRemoteSharedObject',
    value: function getRemoteSharedObject(sharedObjectName) {
      (0, _log.debug)(NAME, '[getRemoteSharedObject]');
      try {
        this.assignSharedObjectResponder(sharedObjectName, this._element);
        this._element.getRemoteSharedObject(sharedObjectName);
      } catch (e) {
        (0, _log.warn)('Could not get remote shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Request to connect to SharedObject by name.
     *
     * @param {String} sharedObjectName
     */

  }, {
    key: 'connectToSharedObject',
    value: function connectToSharedObject(sharedObjectName) {
      (0, _log.debug)(NAME, '[connectToSharedObject]');
      try {
        this._element.connectToSharedObject(sharedObjectName);
      } catch (e) {
        (0, _log.warn)('Could not connect to shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Request to close SharedObject connection by name.
     *
     * @param {String} sharedObjectName
     */

  }, {
    key: 'closeSharedObject',
    value: function closeSharedObject(sharedObjectName) {
      (0, _log.debug)(NAME, '[disconnectToSharedObject]');
      try {
        this._element.disconnectFromSharedObject(sharedObjectName);
      } catch (e) {
        (0, _log.warn)('Could not disconnect to shared object (' + name + '). Error: ' + e.message);
      }
    }
  }]);
  return RTMPSharedObjectHandler;
}();

exports.default = RTMPSharedObjectHandler;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Easy decorator for setting a mutable, iteratable property on an object.
 *
 * @private
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTMPMediaConstraint = exports.RTCMediaConstraint = undefined;

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _defineProperty = __webpack_require__(91);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inflate = function inflate(obj, prop, value) {
  (0, _defineProperty2.default)(obj, prop, {
    value: value,
    writable: true,
    enumerable: true
  });
};

/**
 * Default `exact` setting for `video` on `MediaConstraint` for WebRTC broadcast.
 *
 * @private
 */

var RTCMediaVideoConstraint = function RTCMediaVideoConstraint() {
  (0, _classCallCheck3.default)(this, RTCMediaVideoConstraint);

  inflate(this, 'width', {
    exact: 640
  });
  inflate(this, 'height', {
    exact: 480
  });
};

/**
 * Default RTMP video settings for braodcast.
 *
 * @private
 */


var RTMPMediaVideoConstraint = function RTMPMediaVideoConstraint() {
  (0, _classCallCheck3.default)(this, RTMPMediaVideoConstraint);

  inflate(this, 'width', 640);
  inflate(this, 'height', 480);
  inflate(this, 'force', false);
  inflate(this, 'framerate', 15);
  inflate(this, 'bandwidth', 50000);
  inflate(this, 'quality', 80);
  inflate(this, 'profile', 'baseline');
  inflate(this, 'level', 3.1);
};

/**
 * Default WebRTC media settings for broadcast.
 *
 * @private
 */


var RTCMediaConstraint = function RTCMediaConstraint() {
  var audio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var video = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  (0, _classCallCheck3.default)(this, RTCMediaConstraint);

  inflate(this, 'audio', audio);
  inflate(this, 'video', video || new RTCMediaVideoConstraint());
};

/**
 * Default RTMP media settings for broadcast.
 *
 * @private
 */


var RTMPMediaConstraint = function RTMPMediaConstraint() {
  var audio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var video = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  (0, _classCallCheck3.default)(this, RTMPMediaConstraint);

  inflate(this, 'audio', audio);
  inflate(this, 'video', video || new RTMPMediaVideoConstraint());
};

exports.RTCMediaConstraint = RTCMediaConstraint;
exports.RTMPMediaConstraint = RTMPMediaConstraint;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliderEventTypes = exports.SliderEvent = undefined;

var _freeze = __webpack_require__(18);

var _freeze2 = _interopRequireDefault(_freeze);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _event = __webpack_require__(15);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Events for Slider Control.
 *
 * @see {SliderControl}
 *
 * @private
 */
var SliderEvent = function (_Event) {
  (0, _inherits3.default)(SliderEvent, _Event);

  function SliderEvent(type, control, data) {
    (0, _classCallCheck3.default)(this, SliderEvent);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SliderEvent.__proto__ || (0, _getPrototypeOf2.default)(SliderEvent)).call(this, type, data));

    _this._control = control;
    return _this;
  }

  (0, _createClass3.default)(SliderEvent, [{
    key: 'control',
    get: function get() {
      return this._control;
    }
  }]);
  return SliderEvent;
}(_event.Event);

/**
 * Enumeration of Slider Event types.
 *
 * @private
 */


var SliderEventTypes = (0, _freeze2.default)({
  CHANGE_START: 'changestart',
  CHANGE: 'change',
  CHANGE_COMPLETE: 'changecomplete'
});

exports.SliderEvent = SliderEvent;
exports.SliderEventTypes = SliderEventTypes;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImplFactoryOrder = undefined;

var _slicedToArray2 = __webpack_require__(143);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = __webpack_require__(144);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = __webpack_require__(142);

var _weakMap2 = _interopRequireDefault(_weakMap);

var _promise = __webpack_require__(5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var map = new _weakMap2.default();

var pvt = function pvt(ctx) {
  if (!map.has(ctx)) {
    map.set(ctx, {});
  }

  return map.get(ctx);
};

/**
 * Implementation Factory.
 *
 * This is used by the fail-over for Publisher and Subscriber to determine browser support of order list of implementations.
 *
 * @private
 */

var ImplFactoryOrder = exports.ImplFactoryOrder = function () {
  function ImplFactoryOrder() {
    var _this = this;

    (0, _classCallCheck3.default)(this, ImplFactoryOrder);

    this.listorder = function () {
      return (/*#__PURE__*/_regenerator2.default.mark(function listorder(list) {
          return _regenerator2.default.wrap(function listorder$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(list.length > 0)) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 3;
                  return list.shift();

                case 3:
                  _context.next = 0;
                  break;

                case 5:
                case 'end':
                  return _context.stop();
              }
            }
          }, listorder, this);
        })
      );
    }();

    /**
     * Attempt to check support and initialize Class instance within the order. Optionally, can invoke an initialization with configuration object.
     *
     * @param {Object} iterator
     *        Iterator used in accessing possible Class instance next in linked list of order.
     * @param {Object} map
     *        Map of order type to Class.
     * @param {Object} options
     *        Map of initialization configurations to types.
     * @param {Promise} promise
     *        The `Promise` instance to use in resolve or reject once either a valid instance is created or order has been exhausted, respectively.
     * @param {Function} initFn
     *        Optional function to invoke upon instantiation attempt.
     * @param {String} lastError
     *        Optional - and compounded - last string error that caused a failure in establishing a supported instance. This error is delivered on the rejection of the `Promise`.
     *
     * @private
     */
    pvt(this).find = function (iterator, map, options, promise) {
      var initFn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var lastError = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

      var _pvt$next = pvt(_this).next(iterator, map),
          _pvt$next2 = (0, _slicedToArray3.default)(_pvt$next, 2),
          type = _pvt$next2[0],
          Impl = _pvt$next2[1];

      if (!Impl) {
        promise.reject(lastError);
      } else {
        var p = void 0;
        var src = options[type];
        src = src || options;
        if (initFn) {
          p = new Impl()[initFn](src);
        } else {
          p = new Impl(src);
        }
        p.then(function (concrete) {
          promise.resolve(concrete);
        }).catch(function (error) {
          // eslint-disable-line no-unused-vars
          lastError = error;
          pvt(_this).find(iterator, map, options, promise, initFn, lastError);
        });
      }
    };

    /**
     * Iterate next in order.
     *
     * @private
     */
    pvt(this).next = function (order, map) {
      var Impl = void 0;
      var key = void 0;
      var next = order.next();
      if (!next.done) {
        key = next.value;
        Impl = map.get(key);
      }
      return [key, Impl];
    };
  }

  /**
   * Request to locate supported implementation and initialize it, resolving the `Promise` with the instance.
   *
   * @param {Array} order
   * @param {Object} map
   *        Map of Class to order type.
   * @param {Object} options
   *        Initialization object to pass to constructor of Class in browser test of support.
   * @param {Function} initFn
   *        Optional initialization function to invoke with the `options` config.
   *
   * @private
   */


  (0, _createClass3.default)(ImplFactoryOrder, [{
    key: 'create',
    value: function create(order, map, options) {
      var initFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var promise = new _promise.DeferredPromise();
      pvt(this).find(this.listorder(order.slice()), map, options, promise, initFn);
      return promise.promise;
    }
  }]);
  return ImplFactoryOrder;
}();

exports.default = ImplFactoryOrder;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// http://blog.carbonfive.com/2015/01/14/gettin-freaky-functional-wcurried-javascript/
/**
 * Basic curry implementation.
 *
 * @private
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
var curry = exports.curry = function curry(fx) {
  var arity = fx.length;
  return function f1() {
    var args = Array.prototype.slice.call(arguments, 0);
    if (args.length >= arity) {
      return fx.apply(null, args);
    } else {
      return function f2() {
        var args2 = Array.prototype.slice.call(arguments, 0);
        return f1.apply(null, args.concat(args2));
      };
    }
  };
};

/**
 * Basic filter implementation.
 *
 * @private
 */
var filter = exports.filter = curry(function (fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
});

/**
 * Converts a value to integer.
 *
 * @param {Object} value
 * @returns {Number}
 *
 * @private
 */
var toInt = exports.toInt = function toInt(value) {
  if (typeof value === 'string') {
    return parseInt(value, 10);
  } else {
    return Math.round(value);
  }
};

/**
 * Checks truthy-ness of `value` and returns default if false.
 *
 * @param {Object} value
 * @param {Object} defaultValue
 *
 * @private
 */
var getOrElse = exports.getOrElse = function getOrElse(value, defaultValue) {
  return value || defaultValue;
};

/**
 * Checks truthy-ness of `value` as a Number and returns default if false.
 *
 * @param {Object} value
 * @param {Object} defaultValue
 *
 * @private
 */
var getIntOrElse = exports.getIntOrElse = function getIntOrElse(value, defaultValue) {
  return !isNaN(toInt(value)) ? toInt(value) : defaultValue;
};

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(149), __esModule: true };

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(150), __esModule: true };

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(154), __esModule: true };

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(161), __esModule: true };

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = __webpack_require__(138);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _from = __webpack_require__(132);

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * !This is a stripped down version of Bunyan targeted specifically for the browser
 *
 * -------------------------------------------------------------------------------
 *
 * Copyright (c) 2014 Trent Mick. All rights reserved.
 * Copyright (c) 2014 Joyent Inc. All rights reserved.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */



var VERSION = '0.2.3';

// Bunyan log format version. This becomes the 'v' field on all log records.
// `0` is until I release a version '1.0.0' of node-bunyan. Thereafter,
// starting with `1`, this will be incremented if there is any backward
// incompatible change to the log record format. Details will be in
// 'CHANGES.md' (the change log).
var LOG_VERSION = 0;

//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (typeof obj === 'undefined' || obj === null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = function(f) {

    if(f === null) {
        return 'null';
    }

    if(typeof f !== 'string') {
        return f.toString();
    }
    var formatRegExp = /%[sdj%]/g;

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') {
            return '%';
        }
        if (i >= len) {
            return x;
        }
        switch (x) {
            case '%s': return String(args[i++]);
            case '%d': return Number(args[i++]);
            case '%j':
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return '[Circular]';
                }
                break;
            default:
                return x;
        }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
        str += ' ' + x;
    }
    return str;
};

/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;
    //Error.captureStackTrace(this, getCaller3Info);

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func) {
            obj.func = func;
        }
    };
    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) {
        indent = '    ';
    }
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    console.error(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {
}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }

    if(rec.err && rec.err.stack) {
        console.error(rec.err.stack);
    }
};

function ConsoleFormattedStream() {}
ConsoleFormattedStream.prototype.write = function (rec) {

    var levelCss, defaultCss = 'color: DimGray', msgCss = 'color: SteelBlue';

    if (rec.level < DEBUG) {
        levelCss = 'color: DeepPink';
    } else if (rec.level < INFO) {
        levelCss = 'color: GoldenRod';
    } else if (rec.level < WARN) {
        levelCss = 'color: DarkTurquoise';
    } else if (rec.level < ERROR) {
        levelCss = 'color: Purple';
    } else if (rec.level < FATAL) {
        levelCss = 'color: Crimson';
    } else {
        levelCss = 'color: Black';
    }

    var loggerName = rec.childName ? rec.name + '/' + rec.childName : rec.name;

    //get level name and pad start with spacs
    var levelName = nameFromLevel[rec.level].toUpperCase();
    levelName = Array(6 - levelName.length).join(' ') + levelName;

    function padZeros(number, len) {
        return Array((len + 1) - (number + '').length).join('0') + number;
    }

    console.log('[%s:%s:%s:%s] %c%s%c: %s: %c%s',
        padZeros(rec.time.getHours(), 2), padZeros(rec.time.getMinutes(), 2),
        padZeros(rec.time.getSeconds(), 2), padZeros(rec.time.getMilliseconds(), 4),
        levelCss, levelName,
        defaultCss, loggerName,
        msgCss, rec.msg);
    if(rec.err && rec.err.stack) {
        console.log('%c%s,', levelCss, rec.err.stack);
    }
};

//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});


/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level = (typeof (nameOrNum) === 'string' ? levelFromName[nameOrNum.toLowerCase()] : nameOrNum);
    return level;
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array');
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' || Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object');
    }

    var fields, name, i;

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (i = 0; i < parentFieldNames.length; i++) {
            name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (i = 0; i < names.length; i++) {
            name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Null values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {

        /*
         * In the browser we'll be emitting to console.log by default.
         * Any console.log worth its salt these days can nicely render
         * and introspect objects (e.g. the Firefox and Chrome console)
         * so let's emit the raw log record. Are there browsers for which
         * that breaks things?
         */
        self.addStream({
            type: 'raw',
            stream: new ConsoleRawStream(),
            closeOnExit: false,
            level: options.level
        });

    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type && s.stream) {
        s.type = 'raw';
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
        case 'stream':
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
            break;
        case 'raw':
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
            break;
        default:
            throw new TypeError('unknown stream type "' + s.type + '"');
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
};


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
};


/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
};

/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
};


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        return this.streams.map(
            function (s) {
                return s.level;
            });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
};


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name])) {
            return;
        }
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" ' +
                    'Bunyan serializer. This should never happen. This is a bug' +
                    'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer broke field. See stderr for details.)', name);
        }
    });
};


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object. Attempt to warn/recover on error.
    var str;
    if (noemit || this.haveNonRawStreams) {
        try {
            str = JSON.stringify(rec, safeCycles()) + '\n';
        } catch (e) {
            var dedupKey = e.stack.split(/\n/g, 2).join('\n');
            _warn('bunyan: ERROR: Exception in ' +
                    '`JSON.stringify(rec)`. You can install the ' +
                    '"safe-json-stringify" module to have Bunyan fallback ' +
                    'to safer stringification. Record:\n' +
                    _indent(format('%s\n%s', rec, e.stack)),
                dedupKey);
            str = format('(Exception in JSON.stringify(rec): %j. See stderr for details.)\n', e.message);

        }
    }

    if (noemit) {
        return str;
    }


    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            s.stream.write(s.raw ? rec : str);
        }
    }

    return str;
};


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;

        function mkRecord(args) {
            var excludeFields;
            if (args[0] instanceof Error) {
                // `log.<level>(err, ...)`
                fields = {
                    // Use this Logger's err serializer, if defined.
                    err: (log.serializers && log.serializers.err ? log.serializers.err(args[0]) : Logger.stdSerializers.err(args[0]))
                };
                excludeFields = {err: true};
                if (args.length === 1) {
                    msgArgs = [fields.err.message];
                } else {
                    msgArgs = Array.prototype.slice.call(args, 1);
                }
            } else if (typeof (args[0]) !== 'object' && args[0] !== null ||
                Array.isArray(args[0])) {
                // `log.<level>(msg, ...)`
                fields = null;
                msgArgs = Array.prototype.slice.call(args);
            } else {  // `log.<level>(fields, msg, ...)`
                fields = args[0];
                msgArgs = Array.prototype.slice.call(args, 1);
            }

            // Build up the record object.
            var rec = objCopy(log.fields);
            rec.level = minLevel;
            var recFields = (fields ? objCopy(fields) : null);
            if (recFields) {
                if (log.serializers) {
                    log._applySerializers(recFields, excludeFields);
                }
                Object.keys(recFields).forEach(function (k) {
                    rec[k] = recFields[k];
                });
            }
            rec.levelName = nameFromLevel[minLevel];
            rec.msg = format.apply(log, msgArgs);
            if (!rec.time) {
                rec.time = (new Date());
            }
            // Get call source info
            if (log.src && !rec.src) {
                rec.src = getCaller3Info();
            }
            rec.v = LOG_VERSION;

            return rec;
        }

        var fields = null;
        var msgArgs = arguments;
        var rec = null;
        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log with an unbound log method: `this` is: %s',
                        caller.file, caller.line, this.toString()),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        } else if (this._level > minLevel) {
            /* pass through */
        } else {
            rec = mkRecord(msgArgs);
            this._emit(rec);
        }
    };
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);


//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex) {
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
Logger.stdSerializers.err = function(err) {
    if (!err || !err.stack) {
        return err;
    }

    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    };
    return obj;
};


// A JSON stringifier that handles cycles safely.
// Usage: JSON.stringify(obj, safeCycles())
function safeCycles() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;

//streams
module.exports.ConsoleFormattedStream = ConsoleFormattedStream;
module.exports.ConsoleRawStream = ConsoleRawStream;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP          = __webpack_require__(14).f
  , create      = __webpack_require__(48)
  , redefineAll = __webpack_require__(51)
  , ctx         = __webpack_require__(19)
  , anInstance  = __webpack_require__(44)
  , defined     = __webpack_require__(46)
  , forOf       = __webpack_require__(37)
  , $iterDefine = __webpack_require__(69)
  , step        = __webpack_require__(104)
  , setSpecies  = __webpack_require__(109)
  , DESCRIPTORS = __webpack_require__(17)
  , fastKey     = __webpack_require__(31).fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(45)
  , from    = __webpack_require__(166);
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(11).document && document.documentElement;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(17) && !__webpack_require__(25)(function(){
  return Object.defineProperty(__webpack_require__(66)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(30)
  , ITERATOR   = __webpack_require__(9)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(36);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(16);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(9)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(32)
  , gOPS     = __webpack_require__(71)
  , pIE      = __webpack_require__(49)
  , toObject = __webpack_require__(33)
  , IObject  = __webpack_require__(68)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(25)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(108)
  , hiddenKeys = __webpack_require__(67).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(20)
  , toObject    = __webpack_require__(33)
  , IE_PROTO    = __webpack_require__(73)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var has          = __webpack_require__(20)
  , toIObject    = __webpack_require__(22)
  , arrayIndexOf = __webpack_require__(167)(false)
  , IE_PROTO     = __webpack_require__(73)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global      = __webpack_require__(11)
  , core        = __webpack_require__(3)
  , dP          = __webpack_require__(14)
  , DESCRIPTORS = __webpack_require__(17)
  , SPECIES     = __webpack_require__(9)('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(19)
  , invoke             = __webpack_require__(173)
  , html               = __webpack_require__(98)
  , cel                = __webpack_require__(66)
  , global             = __webpack_require__(11)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(36)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogger = exports.LOG_LEVELS = exports.setLogLevel = exports.IceTransportTypes = exports.PlaybackVideoEncoder = exports.PlaybackAudioEncoder = exports.SharedObjectEventTypes = exports.FailoverSubscriberEventTypes = exports.RTMPSubscriberEventTypes = exports.RTCSubscriberEventTypes = exports.SubscriberEventTypes = exports.FailoverPublisherEventTypes = exports.RTCPublisherEventTypes = exports.PublisherEventTypes = exports.Red5ProSharedObject = exports.PlaybackControls = exports.PublisherView = exports.RTMPPublisher = exports.RTCPublisher = exports.Red5ProPublisher = exports.PlaybackView = exports.HLSSubscriber = exports.RTMPSubscriber = exports.RTCSubscriber = exports.Red5ProSubscriber = undefined;

var _index = __webpack_require__(24);

Object.defineProperty(exports, 'PlaybackControls', {
  enumerable: true,
  get: function get() {
    return _index.PlaybackControls;
  }
});

var _log = __webpack_require__(2);

var _index2 = __webpack_require__(125);

var subscriberLib = _interopRequireWildcard(_index2);

var _index3 = __webpack_require__(119);

var publisherLib = _interopRequireWildcard(_index3);

var _index4 = __webpack_require__(123);

var sharedObjectLib = _interopRequireWildcard(_index4);

var _playback = __webpack_require__(34);

var playbackEnum = _interopRequireWildcard(_playback);

var _webrtc = __webpack_require__(55);

var webrtcEnum = _interopRequireWildcard(_webrtc);

var _publisherEvent = __webpack_require__(82);

var publisherEvent = _interopRequireWildcard(_publisherEvent);

var _subscriberEvent = __webpack_require__(83);

var subscriberEvent = _interopRequireWildcard(_subscriberEvent);

var _sharedobjectEvent = __webpack_require__(56);

var sharedobjectEvent = _interopRequireWildcard(_sharedobjectEvent);

var _playback2 = __webpack_require__(43);

var _playback3 = _interopRequireDefault(_playback2);

var _publish = __webpack_require__(59);

var _publish2 = _interopRequireDefault(_publish);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/* ----------------------------  */
/* Subscription related references. */
/* ----------------------------  */

/**
 * The fail-over enabled Subscriber Factory.
 * @see Red5ProSubscriber
 */
/**
 * Main entry of SDK, accessible on the `window` global at `red5prosdk`.
 *
 * @file red5pro.min.js
 * @module red5prosdk
 *
 *
 */

// SDK_VERSION, LOG_LEVEL injected from webpack build.
var Red5ProSubscriber = exports.Red5ProSubscriber = subscriberLib.Red5ProSubscriber;
/**
 * The WebRTC based Subscriber.
 *
 * An instance of `RTCSubscriber` can be created explicitly using this class, or by the `Red5ProSubscriber` fail-over factory.
 * @see RTCSubscriber
 */
var RTCSubscriber = exports.RTCSubscriber = subscriberLib.RTCSubscriber;
/**
 * The Flash (utilizing RTMP protocol) based Subscriber.
 *
 * An instance of `RTMPSubscriber` can be created explicitly using this class, or by the `Red5ProSubscriber` fail-over factory.
 * @see RTMPSubscriber
 */
var RTMPSubscriber = exports.RTMPSubscriber = subscriberLib.RTMPSubscriber;
/**
 * The HLS (HTTP Live Stream) based Subscriber.
 *
 * An instance of `HLSSubscriber` can be created explicitly using this class, or by the `Red5ProSubscriber` fail-over factory.
 * @see HLSSubscriber
 */
var HLSSubscriber = exports.HLSSubscriber = subscriberLib.HLSSubscriber;
/**
 * Still used, but API-deprecated View instance for playback. Has default setup in version 4.0.0.
 * @private
 */
exports.PlaybackView = _playback3.default;

/* ----------------------------  */
/* Broadcast related references. */
/* ----------------------------  */

/**
 * The fail-over enabled Publisher Factory.
 * @see Red5ProPublisher
 */

var Red5ProPublisher = exports.Red5ProPublisher = publisherLib.Red5ProPublisher;
/**
 * The WebRTC based Publisher.<br>An instance of `RTCPublisher` can be created explicitly using this class, or by the `Red5ProPublisher` fail-over factory.
 * @see RTCPublisher
 */
var RTCPublisher = exports.RTCPublisher = publisherLib.RTCPublisher;
/**
 * The Flash (utilizing RTMP protocol) based Publisher.
 *
 * An instance of `RTMPPublisher` can be created explicitly using this class, or by the `Red5ProPublisher` fail-over factory.
 * @see RTMPPublisher
 */
var RTMPPublisher = exports.RTMPPublisher = publisherLib.RTMPPublisher;
/**
 * Still used, but API-deprecated View instance for broadcast/preview. Has default setup in version 4.0.0.
 * @private
 */
exports.PublisherView = _publish2.default;

/* Playback controls interface. */

/* Shared Object references. */
/**
 * The ShardObject class.
 * @see Red5ProSharedObject
 */
var Red5ProSharedObject = exports.Red5ProSharedObject = sharedObjectLib.Red5ProSharedObject;

/* Events */
/**
 * Enumeration of common Publisher Events.
 */
var PublisherEventTypes = exports.PublisherEventTypes = publisherEvent.PublisherEventTypes;
/**
 * Enueration of events specific to WebRTC-based Publishers.
 */
var RTCPublisherEventTypes = exports.RTCPublisherEventTypes = publisherEvent.RTCPublisherEventTypes;
/**
 * Enumeration of events specific to fail-over Publisher factory.
 */
var FailoverPublisherEventTypes = exports.FailoverPublisherEventTypes = publisherEvent.FailoverPublisherEventTypes;
/**
 * Enumeraiton of common Subscriber Events.
 */
var SubscriberEventTypes = exports.SubscriberEventTypes = subscriberEvent.SubscriberEventTypes;
/**
 * Enumeration of events specific to WebRTC-based Subscribers.
 */
var RTCSubscriberEventTypes = exports.RTCSubscriberEventTypes = subscriberEvent.RTCSubscriberEventTypes;
/**
 * Enumeration of events specific to RTMP-based Subscribers.
 */
var RTMPSubscriberEventTypes = exports.RTMPSubscriberEventTypes = subscriberEvent.RTCSubscriberEventTypes;
/**
 * Enumeration of events specific to fail-over Subscriber factory.
 */
var FailoverSubscriberEventTypes = exports.FailoverSubscriberEventTypes = subscriberEvent.FailoverSubscriberEventTypes;
/**
 * Enumeration of events for Shared Objects.
 */
var SharedObjectEventTypes = exports.SharedObjectEventTypes = sharedobjectEvent.SharedObjectEventTypes;

/* Enums */
/**
 * Enumerate Audio Encoder options for Subscribers.
 *  * `OPUS`
 *  * `PCMU`
 *  * `PCMA`
 *  * `SPEEX`
 *  * `NONE`
 */
var PlaybackAudioEncoder = exports.PlaybackAudioEncoder = playbackEnum.PlaybackAudioEncoder;
/**
 * Enumerated Video Encoder options for Subscribers.
 *  * `VP8`
 *  * `H264`
 *  * `NONE`
 */
var PlaybackVideoEncoder = exports.PlaybackVideoEncoder = playbackEnum.PlaybackVideoEncoder;

/**
 * Enumerate ICE Transport options for Publishers and Subscribers.
 * * `UDP`
 * * `TCP`
 */
var IceTransportTypes = exports.IceTransportTypes = webrtcEnum.IceTransportTypes;

(0, _log.establishLogger)('' + "debug" || _log.LEVELS.DEBUG); // eslint-disable-line no-undef

/**
 * Sets the log level for logs from the SDK
 * @param {string} level
 *    The specified log level.
 * @see LOG_LEVELS
 */
var setLogLevel = exports.setLogLevel = function setLogLevel(level) {
  if (_log.LEVELS.hasOwnProperty(level.toUpperCase())) {
    (0, _log.establishLogger)(level);
    if (console) {
      console.log('Red5 Pro SDK Version ' + "5.4.5"); // eslint-disable-line no-undef,no-console
    }
  }
};

/**
 * The enumerated log level Strings.
 *    * `TRACE`
 *    * `INFO`
 *    * `DEBUG`
 *    * `WARN`
 *    * `ERROR`
 *    * `FATAL`
 */
var LOG_LEVELS = exports.LOG_LEVELS = _log.LEVELS;
/**
 * Retrieves the Logger instance used by the SDK.
 *
 * @returns {Logger}
 *          The logger.
 */
var getLogger = exports.getLogger = _log.getLogger;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var jsonAttr = /['"](.*?)['"]:/gi;
var jsonVal = /:['"](.*?)['"]/gi;

/**
 * Reads the UTF string of the data passed in.
 *
 * @param {String} data
 * @param {Number} start
 * @param {Number} len
 *
 * @return {String}
 *         The Parsed information.
 *
 * @private
 */
function readUTF(data, start, len) {
  var result = '',
      offset = start,
      end = start + len;
  do {
    result += String.fromCharCode(data[offset++]);
  } while (offset < end);
  return result;
}

/**
 * Parses and interprets the orientation data from passed in JSON string.
 *
 * @param {String} text
 *
 * @return {Object}
 *          The parsed object with an `orientation` property if parsed properly.
 *
 * @private
 */
function parseJSONForOrientation(text) {
  try {
    var value = JSON.parse(text);
    if (value.hasOwnProperty('orientation')) {
      return {
        orientation: parseInt(value.orientation)
      };
    }
    return undefined;
  } catch (e) {
    var match = jsonAttr.exec(text);
    var match2 = void 0;
    if (match && match.length > 1) {
      match2 = jsonVal.exec(text);
      if (match[1] === 'orientation' && match2 && match2.length > 1) {
        return {
          orientation: parseInt(match2[1])
        };
      }
    }
    return undefined;
  }
}

/**
 * Event handler for metadata related to orientation information.
 *
 * @param {Element} player
 *        The media element related to the metadata.
 * @param {Function} callback
 *        The callback to invoke with the parsed orientation information.
 *
 * @private
 */
var onOrientationMetadata = exports.onOrientationMetadata = function onOrientationMetadata(player, callback) {

  var textTracks = typeof player.textTracks === 'function' ? player.textTracks() : player.textTracks;

  if (textTracks) {

    player.addTextTrack('metadata');

    textTracks.addEventListener('addtrack', function (addTrackEvent) {

      var track = addTrackEvent.track;
      track.mode = 'hidden';
      track.addEventListener('cuechange', function (cueChangeEvent) {
        var cues = void 0;
        var i = void 0;
        // Mostly Chrome.
        if (cueChangeEvent && cueChangeEvent.currentTarget) {
          cues = cueChangeEvent.currentTarget.cues;
        } else if (undefined === undefined) {
          cues = track.cues;
          cues = cues && cues.length > 0 ? cues : track.activeCues;
        } else if (undefined !== undefined) {
          // Mostly Firefox & Safari.
          cues = cues && cues.length > 0 ? cues : undefined.activeCues;
        }
        // Mostly failure.
        cues = cues || [];
        for (i = 0; i < cues.length; i++) {
          var data = cues[i];
          if (data.value) {
            var text = typeof data.value.data === 'string' ? data.value.data : readUTF(data.value.data, 0, data.size);
            var orientation = parseJSONForOrientation(text);
            if (typeof orientation !== 'undefined') {
              callback(orientation);
              break;
            }
          }
        }
      });
    });
  }
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Exception for missing element when assigning Presentation Controllers for Publishers and Subscribers.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoSupportedCameraResolutionsError = exports.NoElementFoundError = undefined;

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NoElementFoundError = exports.NoElementFoundError = function NoElementFoundError(message) {
  (0, _classCallCheck3.default)(this, NoElementFoundError);

  this.name = 'NoElementFound';
  this.message = message;
};

/**
 * Exception when requesting media with a `MediaConstraint` that the browser cannot support.
 * WebRTC Only.
 */


var NoSupportedCameraResolutionsError = exports.NoSupportedCameraResolutionsError = function NoSupportedCameraResolutionsError(message) {
  (0, _classCallCheck3.default)(this, NoSupportedCameraResolutionsError);

  this.name = 'NoSupportedCameraResolutionsError';
  this.message = message;
};

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(93);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _socketHelper = __webpack_require__(57);

var _socketHelper2 = _interopRequireDefault(_socketHelper);

var _object = __webpack_require__(28);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProPublisherSocket';

/**
 * Publisher-based extension of `SocketHelper`.
 *
 * @extends {SocketHelper}
 *
 * @private
 */

var PublisherSocketHelper = function (_SocketHelper) {
  (0, _inherits3.default)(PublisherSocketHelper, _SocketHelper);

  function PublisherSocketHelper(responder) {
    (0, _classCallCheck3.default)(this, PublisherSocketHelper);
    return (0, _possibleConstructorReturn3.default)(this, (PublisherSocketHelper.__proto__ || (0, _getPrototypeOf2.default)(PublisherSocketHelper)).call(this, responder, NAME));
  }

  /**
   * Override to respond to messages coming over WebSocket.
   */


  (0, _createClass3.default)(PublisherSocketHelper, [{
    key: 'respond',
    value: function respond(message) {
      if (message.data) {
        var json = this.getJsonFromSocketMessage(message);
        if (!(0, _get3.default)(PublisherSocketHelper.prototype.__proto__ || (0, _getPrototypeOf2.default)(PublisherSocketHelper.prototype), 'respond', this).call(this, message)) {
          if (json.data !== undefined) {
            if (json.data.sdp !== undefined) {
              if (json.data.sdp.type === 'answer') {
                this._responder.onSDPAnswer(json.data);
              }
            }
            if (json.data.candidate !== undefined) {
              if ((0, _object.isObjectEmpty)(json.data.candidate)) {
                this._responder.onEmptyCandidate();
              } else {
                this._responder.onAddIceCandidate(json.data.candidate);
              }
            }
            if (json.data.type === 'status') {
              if (json.data.code === 'NetConnection.ICE.TricleCompleted' || json.data.code === 'NetConnection.ICE.TrickleCompleted') {
                this._responder.onSocketIceCandidateEnd();
              } else {
                this._responder.onPublisherStatus(json.data);
              }
            }
            if (json.type !== undefined && json.type.toLowerCase() === 'metadata') {
              // It is a `send` API invocation.
              if (json.method !== undefined) {
                this._responder.onSendReceived(json.method, json.data);
              }
              // Else it is normal metadata.
              else {
                  this._responder.onMetaData(json.data);
                }
            }
          }
        }
      } else {
        (0, _log.warn)(NAME, '[ws.onmessage] - No Message Data.');
      }
    }
  }]);
  return PublisherSocketHelper;
}(_socketHelper2.default);

exports.default = PublisherSocketHelper;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(93);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _socketHelper = __webpack_require__(57);

var _socketHelper2 = _interopRequireDefault(_socketHelper);

var _object = __webpack_require__(28);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProSubscriptionSocket';

/**
 * Subscriber-based extension of `SocketHelper`.
 *
 * @extends {SocketHelper}
 *
 * @private
 */

var SubscriptionSocketHelper = function (_SocketHelper) {
  (0, _inherits3.default)(SubscriptionSocketHelper, _SocketHelper);

  function SubscriptionSocketHelper(responder) {
    (0, _classCallCheck3.default)(this, SubscriptionSocketHelper);
    return (0, _possibleConstructorReturn3.default)(this, (SubscriptionSocketHelper.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionSocketHelper)).call(this, responder, NAME));
  }

  /**
   * Override to respond to messages coming over WebSocket.
   */


  (0, _createClass3.default)(SubscriptionSocketHelper, [{
    key: 'respond',
    value: function respond(message) {
      if (message.data) {
        var json = this.getJsonFromSocketMessage(message);
        if (!(0, _get3.default)(SubscriptionSocketHelper.prototype.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionSocketHelper.prototype), 'respond', this).call(this, message)) {
          if (json.data !== undefined) {
            if (json.data.sdp !== undefined) {
              if (json.data.sdp.type === 'offer') {
                this._responder.onSDPOffer(json.data);
              }
            }
            if (json.data.candidate !== undefined) {
              if ((0, _object.isObjectEmpty)(json.data.candidate)) {
                this._responder.onEmptyCandidate();
              } else {
                this._responder.onAddIceCandidate(json.data.candidate);
              }
            }
            if (json.data.type === 'status') {
              if (json.data.code === 'NetConnection.ICE.TricleCompleted' || json.data.code === 'NetConnection.ICE.TrickleCompleted') {
                this._responder.onSocketIceCandidateEnd();
              } else if (json.data.code === 'NetStream.Play.UnpublishNotify') {
                this._responder.onUnpublish();
              } else if (json.data.code === 'NetConnection.Connect.Closed') {
                this._responder.onConnectionClosed();
              } else {
                this._responder.onSubscriberStatus(json.data);
              }
            }
            if (json.data.hasOwnProperty('status')) {
              if (json.data.status === 'NetStream.Play.UnpublishNotify') {
                this._responder.onUnpublish();
              }
            }
            if (json.type !== undefined) {
              if (json.type === 'metadata') {
                // It is a `send` API invocation.
                if (json.method !== undefined) {
                  this._responder.onSendReceived(json.method, json.data);
                }
                // Else it is normal metadata.
                else {
                    this._responder.onMetaData(json.data);
                  }
              }
            }
          } else if (json.type !== undefined) {
            if (json.type === 'metadata') {
              this._responder.onMetaData(json.metadata);
            }
          }
        }
      } else {
        (0, _log.warn)(NAME, '[ws.onmessage] - No Message Data.');
      }
    }
  }]);
  return SubscriptionSocketHelper;
}(_socketHelper2.default);

exports.default = SubscriptionSocketHelper;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _webrtc = __webpack_require__(41);

var webrtc = _interopRequireWildcard(_webrtc);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProPublishPeer';

/**
 * Proxy to Peer Connection for Publishers.
 *
 * @private
 */

var PublisherPeerHelper = function () {
  function PublisherPeerHelper(responder) {
    (0, _classCallCheck3.default)(this, PublisherPeerHelper);

    this._responder = responder;
    this._peerConnection = undefined;
  }

  /**
   * Removes handlers assigned to the peer connection instance.
   *
   * @param {RTCPeerConnection} connection
   */


  (0, _createClass3.default)(PublisherPeerHelper, [{
    key: '_removeConnectionHandlers',
    value: function _removeConnectionHandlers(connection) {
      connection.onconnectionstatechange = undefined;
      connection.oniceconnectionstatechange = undefined;
      connection.onicecandidate = undefined;
    }

    /**
     * Assigns handlers to events on the peer connection instance.
     *
     * @param {RTCPeerConnection} connection
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of connection.
     */

  }, {
    key: '_addConnectionHandlers',
    value: function _addConnectionHandlers(connection, promise) {
      var _this = this;

      var reconnectTimeout = void 0;
      var timeoutLimit = 5000;

      connection.onconnectionstatechange = function () {
        (0, _log.debug)(NAME, '[peer.onconnectionstatechange] - State: ' + connection.connectionState);
        if (connection.connectionState === 'connected') {
          (0, _log.debug)(NAME, '[peerconnection:open]');
          if (promise) {
            promise.resolve(_this);
          }
        } else if (connection.connectionState === 'failed' || connection.connectionState === 'disconnected') {
          (0, _log.warn)(NAME, '[peerconnection:error]');
          if (promise) {
            promise.reject();
          }
        } else {
          (0, _log.debug)(NAME, '[peerconnection:' + connection.connectionState + ']');
        }
      };

      connection.onicecandidate = function (event) {
        (0, _log.debug)(NAME, '[peer.onicecandidate] - Peer Candidate: ' + event.candidate);
        if (event.candidate) {
          _this._responder.onIceCandidate(event.candidate);
        } else if (event.candidate === null) {
          // null means they have finished sending candidates back and forth?
          // Moved to notification from server on trickle end event.
          // this._responder.onIceCandidateTrickleEnd()
        }
      };

      connection.oniceconnectionstatechange = function (event) {
        var state = connection.iceConnectionState;
        (0, _log.debug)(NAME, '[peer.oniceconnectionstatechange] - State: ' + state);
        if (state === 'connected' && _browser2.default.getIsEdge()) {
          // Support for ORTC order of candidates.
          // Typically this will be invoked from a `onicegatheringstatechange` event on the Connection.
          // Edge doesn't notify on that event.
          (0, _log.debug)(NAME, '[edge/ortc:notify complete]');
          _this._responder.onPeerGatheringComplete();
        } else if (state === 'failed') {
          if (reconnectTimeout) {
            clearTimeout(reconnectTimeout);
          }
          _this._responder.onPeerConnectionClose(event);
        } else if (state === 'disconnected') {
          // may receive a disconnect temporarily that will then return to a connection.
          reconnectTimeout = setTimeout(function () {
            (0, _log.debug)(NAME, '[peer.oniceconnectionstatechange] - Reconnect timeout reached. Closing PeerConnection.');
            clearTimeout(reconnectTimeout);
            _this._responder.onPeerConnectionClose(event);
          }, timeoutLimit);
        } else {
          if (reconnectTimeout) {
            (0, _log.debug)(NAME, '[peer.oniceconnectionstatechange] - Clearing timeout for reconnect.');
            clearTimeout(reconnectTimeout);
          }
        }
      };

      connection.onsignalingstatechange = function (event) {
        // eslint-disable-line no-unused-vars
        var state = connection.signalingState;
        (0, _log.debug)(NAME, '[peer.onsignalingstatechange] - State: ' + state);
      };

      connection.onicegatheringstatechange = function () {
        var state = connection.iceGatheringState;
        (0, _log.debug)(NAME, '[peer.onicegatheringstatechange] - State: ' + state);
        if (state === 'complete') {
          _this._responder.onPeerGatheringComplete();
        }
      };

      connection.onremovestream = function () {
        (0, _log.debug)(NAME, '[peer.onremovestream]');
      };
    }

    /**
     * Request to `getUserMedia` on browser.
     *
     * @param {Object} contraints
     *        The `MediaConstraints` object.
     * @return {Promise}
     */

  }, {
    key: 'getUserMedia',
    value: function getUserMedia(constraints) {
      return webrtc.getUserMedia(constraints);
    }

    /**
     * Request to force `getUserMedia` request using the provided constraints.
     *
     * @param {Object} constraints
     *        The `MediaConstraints` to force in request on `getUserMedia`.
     * @return {Promise}
     */

  }, {
    key: 'forceUserMedia',
    value: function forceUserMedia(constraints) {
      return webrtc.forceUserMedia(constraints);
    }

    /**
     * Request to create an Offer through the Peer Connection.
     *
     * @param {Object} bandwidth
     *        The optional bandwidth configuration to use in munging SDP before sending offer.
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of sending offer on Peer Connection.
     * @return {Promise}
     */

  }, {
    key: 'createOffer',
    value: function createOffer() {
      var _this2 = this;

      var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var offerPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      (0, _log.debug)(NAME, '[createoffer]');
      var p = offerPromise || new _promise.DeferredPromise();
      this._peerConnection.createOffer().then(function (sessionDescription) {
        _this2.setLocalDescription(sessionDescription, bandwidth).then(function () {
          if (bandwidth) {
            sessionDescription.sdp = webrtc.updateBandwidth(bandwidth, sessionDescription.sdp);
          }
          _this2._responder.onSDPSuccess();
          p.resolve(sessionDescription);
        }).catch(function (err) {
          _this2._responder.onSDPError(err);
          p.reject(err);
        });
      }).catch(function (err) {
        (0, _log.debug)(NAME, '[createoffer:error]');
        p.reject(err);
      });
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to set local description on the Peer Connection.
     *
     * @param {Object} sessionDescription
     * @return {Promise}
     */

  }, {
    key: 'setLocalDescription',
    value: function setLocalDescription(sessionDescription) {
      (0, _log.debug)(NAME, '[setlocaldescription]');
      return this._peerConnection.setLocalDescription(sessionDescription);
    }

    /**
     * Request to set remote description.
     *
     * @param {Object} sdp
     *        The Session Description tot set on the Peer Connection.
     * @return {Promise}
     */

  }, {
    key: 'setRemoteDescription',
    value: function setRemoteDescription(sdp) {
      (0, _log.debug)(NAME, '[setremotedescription]');
      return this._peerConnection.setRemoteDescription(new webrtc.RTCSessionDescription(sdp));
    }

    /**
     * Request to add ICE candidate to Peer Connection.
     *
     * @param {Object} candidate
     * @return {Promise}
     */

  }, {
    key: 'addIceCandidate',
    value: function addIceCandidate(candidate) {
      (0, _log.debug)(NAME, '[addcandidate]');
      return this._peerConnection.addIceCandidate(candidate);
    }

    /**
     * Deprecated.
     * Request to setup the proxied Peer Connection instance.
     * Use either `setUp` or `setUpWithPeerConfiguration`.
     *
     * @param {Array} iceServers
     *        List of ICE servers to use in the connection.
     * @param {Promise} setUpPromise
     *        The `Promise` to resolve or reject on in success in setting up the Peer Connection.
     * @param {String} rtcpMuxPolicy
     *        The type of mux policy to use.
     * @return {Promise}
     *
     * @note Marked for deprecation after 5.4.0 release.
     */

  }, {
    key: 'setUp',
    value: function setUp(iceServers) {
      var setUpPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var rtcpMuxPolicy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

      this.tearDown();
      var p = setUpPromise || new _promise.DeferredPromise();
      try {
        var peerConfig = {
          iceServers: iceServers,
          iceCandidatePoolSize: 2,
          bundlePolicy: 'max-bundle'
        };
        if (typeof rtcpMuxPolicy !== 'undefined') {
          peerConfig.rtcpMuxPolicy = rtcpMuxPolicy;
        }
        (0, _log.debug)(NAME, '[peerconnection:setup]: ' + (0, _stringify2.default)(peerConfig, null, 2));
        var peer = new webrtc.RTCPeerConnection(peerConfig, {
          optional: [{ RtpDataChannels: false }, { googCpuOveruseDetection: true }]
        });
        this._addConnectionHandlers(peer);
        this._peerConnection = peer;
        p.resolve(peer);
      } catch (e) {
        (0, _log.warn)(NAME, 'Could not establish a PeerConnection. ' + e.message);
        p.reject(e.message);
      }
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to setup the proxied Peer Connection instance with defined RTCConfiguration.
     * Use either `setUp` or `setUpWithPeerConfiguration`.
     * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary
     *
     * @param {RTCConfiguration} configuration
     *        A custom RTCConfiguration.
     * @param {Promise} setUpPromise
     *        The `Promise` to resolve or reject on in success in setting up the Peer Connection.
     * @return {Promise}
     */

  }, {
    key: 'setUpWithPeerConfiguration',
    value: function setUpWithPeerConfiguration(configuration) {
      var setUpPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      this.tearDown();
      var p = setUpPromise || new _promise.DeferredPromise();
      try {
        (0, _log.debug)(NAME, '[peerconnection:setUpWithPeerConfiguration]: ' + (0, _stringify2.default)(configuration, null, 2));
        var peer = new webrtc.RTCPeerConnection(configuration, {
          optional: [{ RtpDataChannels: false }, { googCpuOveruseDetection: true }]
        });
        this._addConnectionHandlers(peer);
        this._peerConnection = peer;
        p.resolve(peer);
      } catch (e) {
        (0, _log.warn)(NAME, 'Could not establish a PeerConnection. ' + e.message);
        p.reject(e.message);
      }
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to tear down proxied Peer Connection instance.
     */

  }, {
    key: 'tearDown',
    value: function tearDown() {
      if (this._peerConnection) {
        (0, _log.debug)(NAME, '[teardown]');
        this._removeConnectionHandlers(this._peerConnection);
        try {
          this._peerConnection.close();
        } catch (e) {
          (0, _log.warn)(NAME, '[peerconnection.close] error: ' + e.message);
        } finally {
          this._peerConnection = undefined;
        }
      }
    }

    /**
     * Accessor for the proxied RTCPeerConnection instance.
     *
     * @return {RTCPeerConnection}
     */

  }, {
    key: 'connection',
    get: function get() {
      return this._peerConnection;
    }
  }]);
  return PublisherPeerHelper;
}();

exports.default = PublisherPeerHelper;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _webrtc = __webpack_require__(41);

var webrtc = _interopRequireWildcard(_webrtc);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProSubscriptionPeer';

/**
 * Utility to check if candidate is empty, and considered the end of the trickle negotiation for a subscriber.
 *
 * @param {Object} candidate
 *
 * @private
 */
var isEmptyCandidate = function isEmptyCandidate(candidate) {
  return typeof candidate === 'undefined' || typeof candidate === 'string' && candidate.length === 0;
};

/**
 * Proxy to Peer Connection for Subscribers.
 *
 * @private
 */

var SubscriptionPeerHelper = function () {
  function SubscriptionPeerHelper(responder) {
    (0, _classCallCheck3.default)(this, SubscriptionPeerHelper);

    this._responder = responder;
    this._peerConnection = undefined;
    this._pendingMediaStream = undefined;
  }

  /**
   * Removes handlers assigned to the peer connection instance.
   *
   * @param {RTCPeerConnection} connection
   */


  (0, _createClass3.default)(SubscriptionPeerHelper, [{
    key: '_removeConnectionHandlers',
    value: function _removeConnectionHandlers(connection) {
      connection.onconnectionstatechange = undefined;
      connection.oniceconnectionstatechange = undefined;
      connection.onicecandidate = undefined;
      //    connection.onaddstream = undefined
      connection.ontrack = undefined;
    }

    /**
     * Assigns handlers to events on the peer connection instance.
     *
     * @param {RTCPeerConnection} connection
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of connection.
     */

  }, {
    key: '_addConnectionHandlers',
    value: function _addConnectionHandlers(connection, promise) {
      var _this = this;

      var reconnectTimeout = void 0;
      var timeoutLimit = 5000;

      connection.onconnectionstatechange = function () {
        if (connection.connectionState === 'connected') {
          (0, _log.debug)(NAME, '[peerconnection:open]');
          if (promise) {
            promise.resolve(_this);
          }
        } else if (connection.connectionState === 'failed' || connection.connectionState === 'disconnected') {
          (0, _log.warn)(NAME, '[peerconnection:error]');
          if (promise) {
            promise.reject();
          }
        }
      };

      connection.onicecandidate = function (event) {
        (0, _log.debug)(NAME, '[peer.onicecandidate] - Peer Candidate: ' + event.candidate);
        if (event.candidate) {
          _this._responder.onIceCandidate(event.candidate);
        } else if (event.candidate === null && _this._pendingMediaStream) {
          // null means they have finished sending candidates back and forth?
          _this._responder.onIceCandidateTrickleEnd(_this._pendingMediaStream);
          _this._pendingMediaStream = undefined;
        }
      };

      /*
      connection.onaddstream = (event) => {
        debug(NAME, `(onaddstream) Peer Add Stream: ${event.stream}`)
        if (event.stream && this._pendingMediaStream === undefined) {
          this._pendingMediaStream = event.stream
          this._responder.onAnswerMediaStream(event.stream)
        }
      }
      */

      // Picked up by Firefox, all others use `onaddstream`, but adapter.js will call both, so we limit.
      connection.ontrack = function (event) {
        (0, _log.debug)(NAME, '(ontrack) Peer Add Stream: ' + event.streams);
        if (event.streams && event.streams.length > 0 && _this._pendingMediaStream === undefined) {
          _this._pendingMediaStream = event.streams[0];
          _this._responder.onAnswerMediaStream(event.streams[0]);
        }
      };

      connection.oniceconnectionstatechange = function (event) {
        var state = connection.iceConnectionState;
        (0, _log.debug)(NAME, '[peer.oniceconnectionstatechange] - State: ' + state);
        if (state === 'connected' && _browser2.default.getIsEdge()) {
          // Support for ORTC order of candidates.
          // Typically this will be invoked from a `onicegatheringstatechange` event on the Connection.
          // Edge doesn't notify on that event.
          (0, _log.debug)(NAME, '[edge/ortc:notify complete]');
          _this._responder.onPeerGatheringComplete();
          // Trick for edge to receive null candidate and start playback.
          // TODO: Fix me?
          connection.onicecandidate({ candidate: null });
        } else if (state === 'failed') {
          if (reconnectTimeout) {
            clearTimeout(reconnectTimeout);
          }
          _this._responder.onPeerConnectionClose(event);
        } else if (state === 'disconnected') {
          // may receive a disconnect temporarily that will then return to a connection.
          reconnectTimeout = setTimeout(function () {
            (0, _log.debug)(NAME, '[peer.oniceconnectionstatechange] - Reconnect timeout reached. Closing PeerConnection.');
            clearTimeout(reconnectTimeout);
            _this._responder.onPeerConnectionClose(event);
          }, timeoutLimit);
        } else {
          if (reconnectTimeout) {
            (0, _log.debug)(NAME, '[peer.oniceconnectionstatechange] - Clearing timeout for reconnect.');
            clearTimeout(reconnectTimeout);
          }
        }
      };

      connection.onicegatheringstatechange = function () {
        var state = connection.iceGatheringState;
        (0, _log.debug)(NAME, '[peer.onicegatheringstatechange] - State: ' + state);
        if (state === 'complete') {
          _this._responder.onPeerGatheringComplete();
        }
      };

      connection.onremovestream = function () {
        (0, _log.debug)(NAME, '[peer.onremovestream]');
      };
    }

    /**
     * Request to create answer on Peer Connection.
     *
     * @param {Object} sdp
     *        The Session Description to set as remote description.
     * @return {Promise}
     */

  }, {
    key: 'createAnswer',
    value: function createAnswer(sdp) {
      var _this2 = this;

      (0, _log.debug)(NAME, '[createanswer]');
      var deferred = new _promise.DeferredPromise();

      this._peerConnection.setRemoteDescription(sdp).then(this._responder.onSDPSuccess).catch(function (err) {
        _this2._responder.onSDPError(err);
      });

      this._peerConnection.createAnswer().then(function (sessionDescription) {
        _this2._peerConnection.setLocalDescription(sessionDescription).then(_this2._responder.onSDPSuccess).catch(function (err) {
          _this2._responder.onSDPError(err);
        });
        deferred.resolve(sessionDescription);
      }).catch(deferred.reject);

      return deferred.promise;
    }

    /**
     * Request to add ICE candidate to Peer Connection.
     *
     * @param {Object} candidate
     * @return {Promise}
     */

  }, {
    key: 'addIceCandidate',
    value: function addIceCandidate(candidate) {
      (0, _log.debug)(NAME, 'checking if empty...');
      if (isEmptyCandidate(candidate)) {
        (0, _log.debug)(NAME, '[addicecandidate]:: empty');
      } else if (candidate !== null) {
        (0, _log.debug)(NAME, '[addicecandidate] :: non-empty');
        var iceCandidate = new webrtc.RTCIceCandidate({
          sdpMLineIndex: candidate.sdpMLineIndex,
          candidate: candidate.candidate
        });
        this._peerConnection.addIceCandidate(iceCandidate).then(function () {
          // nada
        }).catch(function (err) {
          (0, _log.error)(NAME, 'Error in add of ICE Candidiate + ' + err);
        });
      } else {
        (0, _log.debug)(NAME, '[addicecandidate] :: null');
        this._peerConnection.addIceCandidate(candidate).then(function () {
          // nada
        }).catch(function (err) {
          (0, _log.error)(NAME, 'Error in add of ICE Candidiate + ' + err);
        });
      }
    }

    /**
     * Deprecated.
     * Request to setup the proxied Peer Connection instance.
     * Use either `setUp` or `setUpWithPeerConfiguration`.
     *
     * @param {Array} iceServers
     *        List of ICE servers to use in the connection.
     * @param {Promise} setUpPromise
     *        The `Promise` to resolve or reject on in success in setting up the Peer Connection.
     * @param {String} rtcpMuxPolicy
     *        The type of mux policy to use.
     * @return {Promise}
     *
     * @note Marked for deprecation after 5.4.0 release.
     */

  }, {
    key: 'setUp',
    value: function setUp(iceServers) {
      var setUpPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var rtcpMuxPolicy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

      this.tearDown();
      var p = setUpPromise || new _promise.DeferredPromise();
      try {
        var peerConfig = {
          iceServers: iceServers,
          iceCandidatePoolSize: 2,
          bundlePolicy: "max-bundle"
        };
        if (typeof rtcpMuxPolicy !== 'undefined') {
          peerConfig.rtcpMuxPolicy = rtcpMuxPolicy;
        }
        (0, _log.debug)(NAME, '[peerconnection:setup]: ' + (0, _stringify2.default)(peerConfig, null, 2));
        var peer = new webrtc.RTCPeerConnection(peerConfig, {
          optional: [{ RtpDataChannels: false }, { googCpuOveruseDetection: true }]
        });
        this._peerConnection = peer;
        this._addConnectionHandlers(peer);
        p.resolve();
      } catch (e) {
        (0, _log.warn)(NAME, 'Could not create a RTCPeerConnection. Error: ' + e.message);
        p.reject(e.message);
      }
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to setup the proxied Peer Connection instance with defined RTCConfiguration.
     * Use either `setUp` or `setUpWithPeerConfiguration`.
     * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary
     *
     * @param {RTCConfiguration} configuration
     *        A custom RTCConfiguration.
     * @param {Promise} setUpPromise
     *        The `Promise` to resolve or reject on in success in setting up the Peer Connection.
     * @return {Promise}
     */

  }, {
    key: 'setUpWithPeerConfiguration',
    value: function setUpWithPeerConfiguration(configuration) {
      var setUpPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      this.tearDown();
      var p = setUpPromise || new _promise.DeferredPromise();
      try {
        (0, _log.debug)(NAME, '[peerconnection:setUpWithPeerConfiguration]: ' + (0, _stringify2.default)(configuration, null, 2));
        var peer = new webrtc.RTCPeerConnection(configuration, {
          optional: [{ RtpDataChannels: false }, { googCpuOveruseDetection: true }]
        });
        this._addConnectionHandlers(peer);
        this._peerConnection = peer;
        p.resolve(peer);
      } catch (e) {
        (0, _log.warn)(NAME, 'Could not establish a PeerConnection. ' + e.message);
        p.reject(e.message);
      }
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to tear down proxied Peer Connection instance.
     */

  }, {
    key: 'tearDown',
    value: function tearDown() {
      if (this._peerConnection) {
        (0, _log.debug)(NAME, '[teardown]');
        this._removeConnectionHandlers(this._peerConnection);
        try {
          this._peerConnection.close();
        } catch (e) {
          (0, _log.warn)(NAME, '[peerconnection.close] error: ' + e.message);
        }
      }
      this._pendingMediaStream = undefined;
      this._peerConnection = undefined;
    }

    /**
     * Accessor for the proxied RTCPeerConnection instance.
     *
     * @return {RTCPeerConnection}
     */

  }, {
    key: 'connection',
    get: function get() {
      return this._peerConnection;
    }
  }]);
  return SubscriptionPeerHelper;
}();

exports.default = SubscriptionPeerHelper;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RawStream = undefined;

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _browserBunyan = __webpack_require__(95);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Custom logger for bunyon.
 *
 * @private
 */
var RawStream = exports.RawStream = function () {
  function RawStream() {
    (0, _classCallCheck3.default)(this, RawStream);
  }

  (0, _createClass3.default)(RawStream, [{
    key: 'write',
    value: function write(rec) {
      console.log('%s - [%s] %s: %s', // eslint-disable-line no-console
      rec.time.toISOString(), rec.name, _browserBunyan.nameFromLevel[rec.level], rec.msg);
    }
  }]);
  return RawStream;
}();

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTCPublisher = exports.RTMPPublisher = exports.Red5ProPublisher = undefined;

var _set = __webpack_require__(92);

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = __webpack_require__(94);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _map = __webpack_require__(89);

var _map2 = _interopRequireDefault(_map);

var _implFactoryOrder = __webpack_require__(87);

var _implFactoryOrder2 = _interopRequireDefault(_implFactoryOrder);

var _eventEmitter = __webpack_require__(23);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _red5proRtmp = __webpack_require__(122);

var _red5proRtmp2 = _interopRequireDefault(_red5proRtmp);

var _red5proRtc = __webpack_require__(121);

var _red5proRtc2 = _interopRequireDefault(_red5proRtc);

var _promise = __webpack_require__(5);

var _publish = __webpack_require__(54);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'Red5ProPublisher';
var publishFactory = new _implFactoryOrder2.default();
var publisherImpl = function () {
  var map = new _map2.default();
  map.set(_publish.PublishTypes.RTC, _red5proRtc2.default);
  map.set(_publish.PublishTypes.RTMP, _red5proRtmp2.default);
  return map;
}();

/**
 * Main entry for failover support of all publisher implementations.
 *
 * @extends EventEmitter
 */

var Red5ProPublisher = function (_EventEmitter) {
  (0, _inherits3.default)(Red5ProPublisher, _EventEmitter);

  function Red5ProPublisher() {
    (0, _classCallCheck3.default)(this, Red5ProPublisher);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Red5ProPublisher.__proto__ || (0, _getPrototypeOf2.default)(Red5ProPublisher)).call(this));

    _this._options = undefined;
    _this._order = [_publish.PublishTypes.RTC, _publish.PublishTypes.RTMP];
    return _this;
  }

  /**
   * Utilizes Failover Publisher Factory to attempt in determining browser support for Publisher from defined order.
   *
   * @return {Promise}
   *
   * @private
   */


  (0, _createClass3.default)(Red5ProPublisher, [{
    key: '_getPublisherFromOrder',
    value: function _getPublisherFromOrder(order, options) {
      return publishFactory.create(order, publisherImpl, options, 'init');
    }

    /**
     * Returns the specified order for auto-failover.
     *
     *  @return {Array}
     *          Default: `['rtc', 'rtmp']`.
     */

  }, {
    key: 'getPublishOrder',
    value: function getPublishOrder() {
      return this._order;
    }

    /**
     * Defines the desired auto-failover order.
     *
     *  @param {Array} order
     *          The desired order. e.g, `['rtc', 'rtmp']`.
     *
     *  @return {Red5ProPublisher}
     *          This instance.
     */

  }, {
    key: 'setPublishOrder',
    value: function setPublishOrder(order) {
      // Allow for string value to define single item in order.
      order = typeof order === 'string' ? [order] : order;

      // Filter out values not available in enumeration of playback types.
      var t = order.filter(function (entry) {
        var key = void 0;
        for (key in _publish.PublishTypes) {
          if (_publish.PublishTypes[key].toLowerCase() === entry.toLowerCase()) {
            return true;
          }
        }
        return false;
      }).map(function (entry) {
        return entry.toLowerCase();
      });

      // Define new order.
      this._order = [].concat((0, _toConsumableArray3.default)(new _set2.default(t)));
      (0, _log.debug)(NAME, '[orderupdate]: ' + this._order);
      return this;
    }

    /**
     * Request to initialize and determine the proper Publisher implementation based on configuration.
     * The returned `Promise` will either resolve with the determined Publisher instance or reject with an error String in failure to determine Publisher type.
     *
     *  @param {Object} options
     *          The initialization configuration map for each desired failover tech.
     *  @return {Promise}
     */

  }, {
    key: 'init',
    value: function init(options) {
      var deferred = new _promise.DeferredPromise();
      (0, _log.debug)(NAME, '[publish]');
      this._options = options;
      this._getPublisherFromOrder(this._order, this._options).then(function (publisher) {
        deferred.resolve(publisher);
      }).catch(function (err) {
        (0, _log.warn)(NAME, '[publisherror]: Could not implement a publisher: ' + err);
        deferred.reject(err);
      });
      return deferred.promise;
    }

    /**
     * Return enumerated value Publisher types used in failover order.
     * @type {Object}
     */

  }, {
    key: 'publishTypes',
    get: function get() {
      return _publish.PublishTypes;
    }
  }]);
  return Red5ProPublisher;
}(_eventEmitter2.default);

exports.Red5ProPublisher = Red5ProPublisher;
exports.RTMPPublisher = _red5proRtmp2.default;
exports.RTCPublisher = _red5proRtc2.default;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isNan = __webpack_require__(135);

var _isNan2 = _interopRequireDefault(_isNan);

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _embed = __webpack_require__(80);

var embed = _interopRequireWildcard(_embed);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _sharedobjectHelperRtmp = __webpack_require__(84);

var _sharedobjectHelperRtmp2 = _interopRequireDefault(_sharedobjectHelperRtmp);

var _util = __webpack_require__(88);

var _object = __webpack_require__(28);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'R5ProPublisherSourceHandler';

/**
 * Determine the video dimensions setting value based on possible definition using `MediaConstraint`.
 * @private
 */
var convertDimensionOptions = function convertDimensionOptions(vo) {
  return vo.exact || vo.ideal || vo.max || vo.min || vo;
};

/**
 * Define the audio and video settings for Flash.
 * The `width` and `height` attributes relate to video. The `audio` attribute is a boolean flag.
 * @private
 */
var mediaConstraintsToFlashvars = function mediaConstraintsToFlashvars(constraints, flashvars) {
  var fv = (0, _object.deepCopy)(flashvars);
  if (typeof constraints.video === 'boolean') {
    fv.video = constraints.video;
  } else {
    var key = void 0;
    for (key in constraints.video) {
      fv[key] = convertDimensionOptions(constraints.video[key]);
    }
    fv.video = true;
  }
  fv.audio = typeof constraints.audio === 'boolean' ? constraints.audio : true;
  return fv;
};

/**
 * The internal Publish Source Handler for an RTMPPublisher.
 * @private
 */

var PublisherSourceHandler = function () {

  /**
   * @param {Element} video
   *        The video DOM Element.
   * @param {String} type
   *        The publisher type: most likely, `RTMP`.
   * @param {Object} soResponder
   *        Optional responder to SharedObject API. If not provided, will generate a `RTMPSharedObjectHandler` instance internally.
   * @private
   */
  function PublisherSourceHandler(video, type) {
    var soResponder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    (0, _classCallCheck3.default)(this, PublisherSourceHandler);

    this.video = video;
    this.clone = this.video.cloneNode(true);
    this.holder = this.video.parentNode;
    this._publisherType = type;
    this._swfId = null;
    this._embedFuture = undefined;
    this._soResponder = soResponder || new _sharedobjectHelperRtmp2.default();
  }

  /**
   * Requested and used by RTMPPublisher instance in recognizing completion of embed.
   *
   * @return {Promise}
   * @private
   */


  (0, _createClass3.default)(PublisherSourceHandler, [{
    key: 'getEmbedOperation',
    value: function getEmbedOperation() {
      this._embedFuture = _promise.Future.createIfNotExist(this._embedFuture);
      return this._embedFuture.promise;
    }

    /**
     * Clean up of references and modified display.
     * @private
     */

  }, {
    key: 'cleanUp',
    value: function cleanUp() {
      // Return to prior DOM manipulation.
      this.video.remove();
      this.video = this.clone.cloneNode(true);
      this.holder.appendChild(this.video);
      this._embedFuture = undefined;
    }

    /**
     * Request to define the embedding options for a RTMPPublisher.
     *
     * @param {String} swfId
     *        The unique id to use in embedding element.
     * @param {Object} options
     *        The initialization configuration to determine flashvars from.
     * @param {String} swfUrl
     *        Optional location of the SWF file to embed. Default is relative path to `red5pro-subscriber.swf`.
     * @param {String} minFlashVersion
     *        Optional semver of minimum Flash version to determine support. Default is `10.0.0`.
     * @return {Promise}
     *        The `Promise` either resolves or rejects the success of embed on page using SWFObject.
     * @private
     */

  }, {
    key: 'addSource',
    value: function addSource(swfId, options) {
      var swfUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var minFlashVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      (0, _log.debug)(NAME, '[addsource]');
      var self = this;
      this._swfId = swfId;
      this._embedFuture = _promise.Future.createIfNotExist(this._embedFuture);
      var deferred = this._embedFuture;
      options.swf = swfUrl || options.swf;
      options.minFlashVersion = minFlashVersion || options.minFlashVersion;
      embed.defineEmbedElement(this.video, this.holder).then(function (elementId) {
        (0, _log.debug)(NAME, '[element:complete]');
        var flashvars = {
          buffer: options.buffer != null ? options.buffer : 1,
          streamMode: options.streamMode,
          streamName: options.streamName,
          appName: options.app,
          host: options.host
        };
        if (options.backgroundColor) {
          flashvars.backgroundColor = options.backgroundColor;
        }
        if (options.context) {
          flashvars.roomName = options.context;
        }
        if (options.embedWidth === '100%' || options.embedHeight === '100%') {
          flashvars.autosize = true;
        }
        if (typeof options.connectionParams !== 'undefined') {
          flashvars.connectionParams = encodeURIComponent((0, _stringify2.default)(options.connectionParams));
        }
        flashvars = mediaConstraintsToFlashvars(options.mediaConstraints, flashvars);
        return embed.embedSwfObject(swfId, options, flashvars, _browser2.default.getSwfObject(), elementId);
      }).then(function () {
        (0, _log.debug)(NAME, '[embed:complete]');
        deferred.resolve(self);
      }).catch(function (err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    }

    /**
     * Request to connect to server for a broadcast session.
     *
     * @param {Object} publishOptions
     * @private
     */

  }, {
    key: 'connect',
    value: function connect(publishOptions) {
      (0, _log.debug)(NAME, '[connect]');
      var el = _browser2.default.getEmbedObject(this._swfId);
      if (el) {
        el.connect(publishOptions);
        this._soResponder.connect(this._swfId);
      } else {
        (0, _log.warn)(NAME, 'Could not determine embedded element with swf id: ' + this._swfId + '.');
      }
    }

    /**
     * Request to disconnect from server.
     *
     * @private
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      (0, _log.debug)(NAME, '[disconnect]');
      try {
        var el = _browser2.default.getEmbedObject(this._swfId);
        if (el) {
          el.disconnect();
        }
      } catch (e) {
        // nada.
      }
      this.cleanUp();
      this._soResponder.disconnect();
    }

    /**
     * Request to send a message to all subscribers.
     *
     * @param {String} methodName
     *        The method name associated with the message to be accepted by all subscribers.
     * @param {Object} data
     *        The data object to send associated with the method name.
     * @private
     */

  }, {
    key: 'send',
    value: function send(methodName, data) {
      var el = _browser2.default.getEmbedObject(this._swfId);
      if (el) {
        el.send(methodName, data);
      }
    }

    /**
     * Adds a response handler on SharedObject channel responder.
     * @private
     */

  }, {
    key: 'addSharedObjectResponseHandler',
    value: function addSharedObjectResponseHandler(handler) {
      this._soResponder.addResponseHandler(handler);
    }

    /**
     * Removes a response handler on SharedObject channel responder.
     * @private
     */

  }, {
    key: 'removeSharedObjectResponseHandler',
    value: function removeSharedObjectResponseHandler(handler) {
      this._soResponder.removeResponseHandler(handler);
    }

    /**
     * Sends message on SharedObject channel responder.
     *
     * @param {String} name
     *        The SharedObject name.
     * @param {String} callName
     *        The method name to be invoked.
     * @param {String} message
     *        The structured value to send.
     * @private
     */

  }, {
    key: 'sendToSharedObject',
    value: function sendToSharedObject(name, callName, message) {
      this._soResponder.sendToSharedObject(name, callName, message);
    }

    /**
     * Sends property update on SharedObject channel responder.
     *
     * @param {String} name
     *        The SharedObject name.
     * @param {String} key
     *        The property name on the SharedObject.
     * @param {String} value
     *        The structured property value.
     * @private
     */

  }, {
    key: 'sendPropertyToSharedObject',
    value: function sendPropertyToSharedObject(name, key, value) {
      this._soResponder.sendPropertyToSharedObject(name, key, value);
    }

    /**
     * Requests to get SharedObject instance from the SharedObject channel responder.
     * @private
     */

  }, {
    key: 'getRemoteSharedObject',
    value: function getRemoteSharedObject(sharedObjectName) {
      this._soResponder.getRemoteSharedObject(sharedObjectName);
    }

    /**
     * Request to connect to a shared object.
     *
     * @param {String} sharedObjectName
     *        The name of the SharedObject.
     * @private
     */

  }, {
    key: 'connectToSharedObject',
    value: function connectToSharedObject(sharedObjectName) {
      this._soResponder.connectToSharedObject(sharedObjectName);
    }

    /**
     * Request to close connection to a shared object.
     *
     * @param {String} sharedObjectName
     *        The name of the SharedObject.
     * @private
     */

  }, {
    key: 'closeSharedObject',
    value: function closeSharedObject(sharedObjectName) {
      this._soResponder.closeSharedObject(sharedObjectName);
    }

    /**
     * Deprecated. Request to update broadcast dimensions before a broadcast.
     *
     * @param {Object} quality
     *        Expects object with following structur: `{video: {width:Int, heightInt}}
     * @private
     */

  }, {
    key: 'setMediaQuality',
    value: function setMediaQuality(quality) {
      var el = _browser2.default.getEmbedObject(this._swfId);
      if (el) {
        if (quality.video && typeof quality.video !== 'boolean') {
          var w = !isNaN(quality.video.width) ? (0, _util.toInt)(quality.video.width) : _isNan2.default;
          var h = !isNaN(quality.video.height) ? (0, _util.toInt)(quality.video.height) : _isNan2.default;
          el.updateResolution(w, h);
        }
      }
    }

    /**
     * Returns the type of implementation: `RTMP`.
     *
     * @return {String}
     * @private
     */

  }, {
    key: 'getType',
    value: function getType() {
      return this._publisherType;
    }
  }]);
  return PublisherSourceHandler;
}();

exports.default = PublisherSourceHandler;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(61);

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = __webpack_require__(29);

var _extends3 = _interopRequireDefault(_extends2);

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _eventEmitter = __webpack_require__(23);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _webrtc = __webpack_require__(41);

var webrtc = _interopRequireWildcard(_webrtc);

var _websocket = __webpack_require__(42);

var websocket = _interopRequireWildcard(_websocket);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _socketHelperPub = __webpack_require__(114);

var _socketHelperPub2 = _interopRequireDefault(_socketHelperPub);

var _webrtcHelperPub = __webpack_require__(116);

var _webrtcHelperPub2 = _interopRequireDefault(_webrtcHelperPub);

var _publish = __webpack_require__(59);

var _publish2 = _interopRequireDefault(_publish);

var _event = __webpack_require__(15);

var _publish3 = __webpack_require__(54);

var _webrtc2 = __webpack_require__(55);

var _promise3 = __webpack_require__(5);

var _constraint = __webpack_require__(85);

var _urlEndpoint = __webpack_require__(58);

var _log = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pubStartRegex = /(.*) starting/i;
var pubStopRegex = /(.*) stopping/i;
var NAME = 'RTCPublisher';
var debug = function debug(message) {
  (0, _log.debug)(NAME, message);
};
var warn = function warn(message) {
  (0, _log.warn)(NAME, message);
};
var error = function error(message) {
  (0, _log.error)(NAME, message);
};

// Default to secure settings.
var defaultOptions = {
  protocol: 'wss',
  port: 443,
  app: 'live',
  streamMode: _publish3.PublishModeTypes.LIVE,
  keyFramerate: 3000,
  mediaElementId: 'red5pro-publisher',
  rtcConfiguration: {
    iceServers: [{ urls: 'stun:stun2.l.google.com:19302' }],
    iceCandidatePoolSize: 2,
    bundlePolicy: 'max-bundle'
  }, // Favored over iceServers.
  iceServers: undefined, // Deprecated. Preserved for backward-compatibility.
  iceTransport: _webrtc2.IceTransportTypes.UDP,
  bandwidth: {
    audio: 56,
    video: 512
  },
  mediaConstraints: new _constraint.RTCMediaConstraint(),
  onGetUserMedia: undefined

  /**
   * Main entry for WebRTC-based Publisher.
   *
   * @extends EventEmitter
   */
};
var RTCPublisher = function (_EventEmitter) {
  (0, _inherits3.default)(RTCPublisher, _EventEmitter);

  function RTCPublisher() {
    (0, _classCallCheck3.default)(this, RTCPublisher);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RTCPublisher.__proto__ || (0, _getPrototypeOf2.default)(RTCPublisher)).call(this));

    _this._options = undefined;
    _this._view = undefined;
    _this._peerHelper = undefined;
    _this._socketHelper = undefined;
    _this._mediaStream = undefined;

    _this._streamFuture = undefined;
    _this._availableFuture = undefined;
    _this._peerFuture = undefined;
    _this._offerFuture = undefined;
    _this._sendOfferFuture = undefined;
    _this._trickleEndFuture = undefined;
    _this._publishFuture = undefined;
    _this._unpublishFuture = undefined;

    _this._onOrientationChange = _this._onOrientationChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(RTCPublisher, [{
    key: '_getMediaStream',
    value: function _getMediaStream() {
      this._streamFuture = _promise3.Future.createIfNotExist(this._streamFuture);
      return this._streamFuture.promise;
    }
  }, {
    key: '_getTrickleEnd',
    value: function _getTrickleEnd() {
      return _promise3.Future.createIfNotExist(this._trickleEndFuture);
    }

    /**
     * Runs internal `getUserMedia` logic to determine broadcast constraints.
     *
     * @param {Object} options
     *        The initialization options provided in `init()`.
     *
     * @private
     */

  }, {
    key: '_gum',
    value: function _gum(options) {
      var _this2 = this;

      if (options.onGetUserMedia !== undefined) {
        debug('Requesting gUM from user-defined configuration:onGetUserMedia.');
        options.onGetUserMedia().then(function (media) {
          _this2._streamFuture.resolve(media);
        }).catch(function (err) {
          error('Could not resolve MediaAsset from provided gUM. Error - ' + err);
          _this2._streamFuture.reject(err);
        });
      } else {
        debug('Requesting gUM using mediaConstraints: ' + (0, _stringify2.default)(options.mediaConstraints, null, 2));
        this._peerHelper.getUserMedia(options.mediaConstraints).then(function (res) {
          debug('Found valid constraints: ' + (0, _stringify2.default)(res.constraints, null, 2));
          _this2.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.DIMENSION_CHANGE, _this2, res.constraints));
          _this2._streamFuture.resolve(res.media);
        }).catch(function (rej) {
          debug('Could not find valid constraint resolutions from: ' + (0, _stringify2.default)(rej.constraints, null, 2));
          error('Could not resolve MediaAsset from provided mediaConstraints. Error - ' + rej.error);
          debug('Attempting to find resolutions from original provided constraints: ' + (0, _stringify2.default)(rej.constraints, null, 2));
          // allowing to try original constraint requested.
          options.onGetUserMedia = function () {
            return _this2._peerHelper.forceUserMedia(rej.constraints);
          };
          _this2._gum(options);
        });
      }
    }

    /**
     * Invoked upon `onorientationchange` of the browser. Mobile browsers only.
     *
     * @param {int} orientation
     *        The orientation value of the device browser.
     *
     * @private
     */

  }, {
    key: '_onOrientationChange',
    value: function _onOrientationChange(orientation) {
      if (this._socketHelper) {
        this._socketHelper.post({
          send: {
            method: 'onMetaData',
            data: {
              deviceOrientation: orientation
            }
          }
        });
      }
    }

    /**
     * Invoked upon receipt from `_gum` with MediaStream instance returned from browser.
     *
     * @param {MediaStream} mediaStream
     *        The `MediaStream` object.
     *
     * @private
     */

  }, {
    key: '_onMediaStreamReceived',
    value: function _onMediaStreamReceived(mediaStream) {
      //    if (this._socketHelper && !this._socketHelper.isTerminated) {
      this._mediaStream = mediaStream;
      this.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.MEDIA_STREAM_AVAILABLE, this, mediaStream));
      if (this._view) {
        this._view.preview(this._mediaStream);
      }
      //    }
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and publishers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */

  }, {
    key: '_setViewIfNotExist',
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new _publish2.default(mediaElementId);
        view.attachPublisher(this);
      }
    }

    /**
     * Request availability based on unique `streamName`.
     * The return from the WebSocket request will either invoke `onStreamAvailable` or `onStreamUnavailable`.
     *
     * @param {String} streamName
     *        The unique stream name to check if it is _unavailable_ - meaning free to publish against.
     * @return {Promise}
     *        The promise will resolve/reject the `_availableFuture`.
     *
     * @private
     */

  }, {
    key: '_requestAvailability',
    value: function _requestAvailability(streamName) {
      debug('[requestavailability]');
      //this._availableFuture = undefined
      this._availableFuture = _promise3.Future.createIfNotExist(this._availableFuture);
      this._socketHelper.post({
        isAvailable: streamName,
        bundle: false
      });
      return this._availableFuture.promise;
    }

    /**
     * Request to setup RTCPeerConnection instance for exchange of SDP locally and remotely.
     *
     * @param {RTCConfiguration} rtcConfiguration
     *        A custom RTCConfiguration
     * @param {Array} iceServers
     *        List of ICE servers
     * @return {Promise}
     *        The promise will resolve/reject the `_peerFuture`.
     *
     * @note For backward compatibility, keeping arguments as optional, with at least one being fulfilled. The `configuration` param will be favored after 5.4.0, `iceServers` is up for deprecation.
     *
     * @private
     */

  }, {
    key: '_createPeerConnection',
    value: function _createPeerConnection(configuration) {
      var iceServers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      debug('[createpeeer]');
      this._peerFuture = undefined;
      this._peerFuture = _promise3.Future.createIfNotExist(this._peerFuture);

      if (iceServers && configuration) {
        warn('The iceServers configuration property is considered deprecated. Please use the rtcConfiguration configuration property upon which you can assign iceServers. Reference: https://www.red5pro.com/docs/streaming/migrationguide.html');
        configuration.iceServers = iceServers;
      }
      var p = void 0;
      if (configuration !== undefined) {
        p = this._peerHelper.setUpWithPeerConfiguration(configuration, this._peerFuture);
      } else {
        p = this._peerHelper.setUp(iceServers, this._peerFuture, this._options.rtcpMuxPolicy);
      }
      return p;
    }

    /**
     * Request to generate offer on Peer Connection instance.
     *
     * @param {Object} bandwidth
     *        Optional bandwidth configuration object to munge SDP.
     * @return {Promise}
     *        The promise will resolve/reject a success in creation of the offer through the Peer Connection.
     *
     * @private
     */

  }, {
    key: '_createOffer',
    value: function _createOffer() {
      var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      debug('[createoffer]');
      this._offerFuture = undefined;
      this._offerFuture = _promise3.Future.createIfNotExist(this._offerFuture);
      this._peerHelper.createOffer(bandwidth, this._offerFuture);
      return this._offerFuture.promise;
    }

    /**
     * Request to set a remote description on Peer Connection instance.
     *
     * @param {Object} sdp
     *        Object describing the Session Description.
     * @return {Promise}
     *        The promise will resolve/reject in a success in setting the remote SDP on the Peer Connection.
     *
     * @private
     */

  }, {
    key: '_setRemoteDescription',
    value: function _setRemoteDescription(sdp) {
      debug('[setremotedescription]');
      return this._peerHelper.setRemoteDescription(sdp);
    }

    /**
     * Request to send offer on WebSocket instance.
     *
     * @param {Object} sdp
     *        Object describing the Session Description.
     * @param {string} streamName
     *        The unique stream name of the broadcast.
     * @return {Promise}
     *        The promise will resolve/reject on the success of delivering an offer over the WebSocket.
     *
     * @private
     */

  }, {
    key: '_sendOffer',
    value: function _sendOffer(sdp, streamName, transport) {
      debug('[sendoffer]');
      this._sendOfferFuture = undefined;
      this._sendOfferFuture = _promise3.Future.createIfNotExist(this._sendOffFuture);
      this._socketHelper.post({
        handleOffer: streamName,
        transport: transport,
        data: {
          sdp: sdp
        }
      });
      return this._sendOfferFuture.promise;
    }

    /**
     * Request to send ICE candidate over the WebSocket.
     * This can happen several times in the ICE negotiation process.
     *
     * @param {Object} candidate
     *        The Candidate to send.
     * @param {string} streamName
     *        The associated unique stream name of the broadcast.
     *
     * @private
     */

  }, {
    key: '_sendCandidate',
    value: function _sendCandidate(candidate, streamName) {
      debug('[sendcandidate]');
      this._socketHelper.post({
        handleCandidate: streamName,
        data: {
          candidate: candidate
        }
      });
    }

    /**
     * Request on WebSocket to begin publishing.
     *
     * @param {string} streamName
     *        The unique stream name of the broadcast.
     * @param {string} mode
     *        The broadcast mode: `live`, `record` or `append`.
     * @param {int} framerate
     *        The key framerate to broadcast at.
     * @return {Promise}
     *        The promise will resolve/reject in the request to being a broadcast.
     *
     * @private
     */

  }, {
    key: '_requestPublish',
    value: function _requestPublish(streamName, streamMode, framerate) {
      debug('[requestpublish]');
      this._publishFuture = undefined;
      this._publishFuture = _promise3.Future.createIfNotExist(this._publishFuture);
      this._socketHelper.post({
        publish: streamName,
        mode: streamMode,
        keyFramerate: framerate
      });
      return this._publishFuture.promise;
    }

    /**
     * Request to stop a current broadcast.
     *
     * @param {String} streamName
     *        The unique stream name being broadcast on.
     * @return {Promise}
     *        The promise will resolve/reject on success of properly stopping a broadcast.
     *
     * @private
     */

  }, {
    key: '_requestUnpublish',
    value: function _requestUnpublish(streamName) {
      this._unpublishFuture = undefined;
      this._unpublishFuture = _promise3.Future.createIfNotExist(this._unpublishFuture);
      // If we get a false response from trying to send a close POST,
      //  it means that the socket has already been closed by another impetus -
      //  most likley loss of network or server failure.
      if (!this._socketHelper.post({
        unpublish: streamName
      })) {
        this._unpublishFuture.resolve();
      }
      return this._unpublishFuture.promise;
    }

    /**
     * Request to initialize the WebRTC-based Publisher based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */

  }, {
    key: 'init',
    value: function init(options) {
      var deferred = new _promise3.DeferredPromise();
      if (!webrtc.isSupported() || !websocket.isSupported()) {
        deferred.reject('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
      } else {
        this._options = (0, _extends3.default)({}, defaultOptions, options);
        this._peerHelper = new _webrtcHelperPub2.default(this);
        this._socketHelper = new _socketHelperPub2.default(this);
        this._getMediaStream().then(this._onMediaStreamReceived.bind(this)).catch(function (error) {
          warn('[gum]: ' + error);
        });
        this._gum(this._options);
        // auto preview.
        this._setViewIfNotExist(this._view, this._options.mediaElementId);
        deferred.resolve(this);
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */

  }, {
    key: 'setView',
    value: function setView(view) {
      this._view = view;
      if (this._mediaStream && this._view) {
        this._view.preview(this._mediaStream);
      }
      return this;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */

  }, {
    key: 'preview',
    value: function preview() {
      var _this3 = this;

      debug('[preview]');
      var p = new _promise2.default(function (res) {
        res(_this3);
      });
      this._setViewIfNotExist(this._view, this._options.mediaElementId);
      return p;
    }

    /**
     * Request to begin a broadcast session after initilization has occured.
     *
     * @param {String} streamName
     *        Optional stream name to broadcast on, otherwise defaulting to the `streamName` provided in `init()` configuration.
     * @param {Promise} promise
     *        Optional `Promise` object to resolve/reject on based on sequence of events in establishing a broadcast, otherwise defaulting to `Promise` created internally and returned.
     * @return {Promise}
     *        The returned `Promise` will resolve or reject on successful start of a broadcast.<br>
     *        There are several processes that occur in order to establish a WebRTC broadcast that involve - but are not limited to - ICE communication and assigning of local and remote SDPs on peer connections.
     */

  }, {
    key: 'publish',
    value: function publish() {
      var _this4 = this;

      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      debug('[publish]');
      this._options.streamName = streamName || this._options.streamName;
      var p = promise || new _promise3.DeferredPromise();
      var socketPromise = new _promise3.DeferredPromise();
      var socketurl = (0, _urlEndpoint.rtcSocketEndpointFromOptions)(this._options, {
        id: this._options.streamName
      });
      this._trickleEndFuture = this._getTrickleEnd();
      this._socketHelper.clearRetry();
      this._socketHelper.setUp(socketurl, socketPromise);

      // 0. Establish socket connection.
      socketPromise.promise
      // 1. Wait for stream attach
      .then(function () {
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_SUCCESS, _this4));
        return _this4._getMediaStream();
      })
      // 2. Request available stream to publish on
      .then(function () {
        return _this4._requestAvailability(_this4._options.streamName, _this4._options.streamType);
      })
      // 3. Create Peer Connection
      .then(function () {
        return _this4._createPeerConnection(_this4._options.rtcConfiguration, _this4._options.iceServers);
      })
      // 4. Make Offer on Peer Connection
      .then(function (connection) {
        _this4.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.PEER_CONNECTION_AVAILABLE, _this4, connection));
        connection.addStream(_this4._mediaStream);
        return _this4._createOffer(_this4._options.bandwidth);
      })
      // 5. Send Offer
      .then(function (sessionDescription) {
        _this4.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.OFFER_START, _this4, sessionDescription));
        return _this4._sendOffer(sessionDescription, _this4._options.streamName, _this4._options.iceTransport);
      })
      // 6. Set the session description remotely
      .then(function (sdp) {
        return _this4._setRemoteDescription(sdp.sdp);
      })
      // 7. Wait until ice trickle end
      .then(function (sdp) {
        _this4.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.OFFER_END, _this4, sdp));
        return _this4._getTrickleEnd().promise;
      })
      // 8. Request to publish stream
      .then(function () {
        _this4.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.ICE_TRICKLE_COMPLETE, _this4));
        return _this4._requestPublish(_this4._options.streamName, _this4._options.streamMode, _this4._options.keyFramerate);
      })
      // 9. Results in socket message of publish (see :onPublishStatus)
      .then(function () {
        _browser2.default.addOrientationChangeHandler(_this4._onOrientationChange);
        p.resolve(_this4);
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_START, _this4));
      }).catch(function (error) {
        _browser2.default.removeOrientationChangeHandler(_this4._onOrientationChange);
        p.reject(error);
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, _this4, error));
      });
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to stop a broadcast.
     * The returned `Promise` will either resolve or reject on successful stop of broadcast.
     *
     * @return {Promise}
     */

  }, {
    key: 'unpublish',
    value: function unpublish() {
      var _this5 = this;

      debug(NAME, '[unpublish]');
      var clearHelpers = function clearHelpers() {
        if (_this5._socketHelper) {
          debug(NAME, '[unpublish:teardown]');
          _this5._socketHelper.tearDown();
        }
        if (_this5._peerHelper) {
          _this5._peerHelper.tearDown();
        }
      };
      this._availableFuture = undefined;
      this._peerFuture = undefined;
      this._offerFuture = undefined;
      this._sendOfferFuture = undefined;
      this._trickleEndFuture = undefined;
      this._publishFuture = undefined;
      var f = this._requestUnpublish(this._options.streamName);
      f.then(function () {
        _this5._unpublishFuture = undefined;
        //      this._mediaStream = undefined
        clearHelpers();
        _this5.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.UNPUBLISH_SUCCESS, _this5));
      });
      _browser2.default.removeOrientationChangeHandler(this._onOrientationChange);
      return f;
    }

    /**
     * Deprecated. Use `muteAudio`.
     *
     * @private
     */

  }, {
    key: 'mute',
    value: function mute() {
      // backward comatibility - to be deprecated.
      this.muteAudio();
    }

    /**
     * Deprecated. Use `unmuteAudio`.
     *
     * @private
     */

  }, {
    key: 'unmute',
    value: function unmute() {
      // backward comatibility - to be deprecated.
      this.unmuteAudio();
    }

    /**
     * Request to mute the audio of the broadcast.
     * Can only be called once the broadcast has begun.
     */

  }, {
    key: 'muteAudio',
    value: function muteAudio() {
      this._socketHelper.post({
        mute: {
          muteAudio: true
        }
      });
    }

    /**
     * Request to unmute the audio of a broadcast that has been previously muted.
     */

  }, {
    key: 'unmuteAudio',
    value: function unmuteAudio() {
      this._socketHelper.post({
        mute: {
          muteAudio: false
        }
      });
    }

    /** Request to mute (not send) the video of the broadcast.
     * Can only be called once the broadcast has begun.
     */

  }, {
    key: 'muteVideo',
    value: function muteVideo() {
      this._socketHelper.post({
        mute: {
          muteVideo: true
        }
      });
    }

    /**
     * Request to unmute (resume sending) the video of a previously video-muted broadcast.
     */

  }, {
    key: 'unmuteVideo',
    value: function unmuteVideo() {
      this._socketHelper.post({
        mute: {
          muteVideo: false
        }
      });
    }

    /**
     * Request to send a message to all subscribers.
     *
     * @param {String} methodName
     *        The method name associated with the message to be accepted by all subscribers.
     * @param {Object} data
     *        The data object to send associated with the method name.
     */

  }, {
    key: 'send',
    value: function send(methodName, data) {
      this._socketHelper.post({
        send: {
          method: methodName,
          data: typeof data === 'string' ? JSON.parse(data) : data
        }
      });
    }

    /**
     * Request to invoke a method on the Application Adapter related to the `app` config setting.
     *
     * @param {String} methodName
     *        The name of the method to invoke on thw Application Adapter
     * @param {Array} args
     *        The ordered list of arguments to invoke on the method. Do not provide anything if the method takes no arguments.
     * @return {Promise}
     */

  }, {
    key: 'callServer',
    value: function callServer(methodName, args) {
      return this._socketHelper.postAsync({
        callAdapter: {
          method: methodName,
          arguments: args
        }
      });
    }

    /**
     * Event handler for availability of stream on request over the socket.
     *
     * @private
     */

  }, {
    key: 'onStreamAvailable',
    value: function onStreamAvailable(receipt) {
      debug('[onstreamavailable]: ' + (0, _stringify2.default)(receipt, null, 2));
      this._availableFuture = _promise3.Future.createIfNotExist(this._availableFuture);
      this._availableFuture.reject('Stream with name ' + this._options.streamName + ' already has a broadcast session.');
      this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_INVALID_NAME, this));
    }

    /**
     * Event handler for unavailability of stream on request over the socket.
     *
     * @private
     */

  }, {
    key: 'onStreamUnavailable',
    value: function onStreamUnavailable(receipt) {
      // Being unavailable, is a good thing for allowing to publish using `options.streamName`
      debug('Stream ' + this._options.streamName + ' does not exist.');
      debug('[onstreamunavailable]: ' + (0, _stringify2.default)(receipt, null, 2));
      this._availableFuture = _promise3.Future.createIfNotExist(this._availableFuture);
      this._availableFuture.resolve(true);
    }

    /**
     * Event handler for WebSocket errors.
     *
     * @private
     */

  }, {
    key: 'onSocketMessageError',
    value: function onSocketMessageError(message) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      error('Error in stream publish: ' + message + '.\n[Optional detail]: ' + detail);
      if (this._publishFuture) {
        this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_FAIL, this));
        this._publishFuture.reject(message);
      }
    }

    /**
     * Event handler for close of WebSocket.
     *
     * @private
     */

  }, {
    key: 'onSocketClose',
    value: function onSocketClose(closeEvent) {
      debug(NAME, '[onsocketclose]');
      if (this._peerHelper) {
        this._peerHelper.tearDown();
      }
      this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECTION_CLOSED, this, closeEvent));
    }

    /**
     * Event handler for close of Peer Connection.
     *
     * @private
     */

  }, {
    key: 'onPeerConnectionClose',
    value: function onPeerConnectionClose(event) {
      debug(NAME, '[onpeerconnectionclose]');
      if (this._socketHelper) {
        debug(NAME, '[onpeerconnectionclose:teardown]');
        this._socketHelper.tearDown();
      }
      this.onSocketClose(event);
    }

    /**
     * Event handler for success of SDP offer over WebSocket.
     *
     * @private
     */

  }, {
    key: 'onSDPSuccess',
    value: function onSDPSuccess(receipt) {
      var info = receipt ? ': ' + (0, _stringify2.default)(receipt, null, 2) : '';
      debug('[onsdpsuccess]' + info);
    }

    /**
     * Event handler for error in SDP offer over WebSocket.
     *
     * @private
     */

  }, {
    key: 'onSDPError',
    value: function onSDPError(receipt) {
      this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_FAIL, this));
      var error = receipt ? ': ' + (0, _stringify2.default)(receipt, null, 2) : '';
      error('[onsdperror]' + error);
    }

    /**
     * Event handler for success in SDP answer over WebSocket.
     *
     * @private
     */

  }, {
    key: 'onSDPAnswer',
    value: function onSDPAnswer(sdp) {
      debug('[sdpanswer]:: ' + (0, _stringify2.default)(sdp, null, 2));
      this._sendOfferFuture = _promise3.Future.createIfNotExist(this._sendOfferFuture);
      this._sendOfferFuture.resolve(sdp);
    }

    /**
     * Event handler for request to add ICE candidate on Peer Connection instance.
     *
     * @private
     */

  }, {
    key: 'onAddIceCandidate',
    value: function onAddIceCandidate(candidate) {
      debug('[addicecandidate]');
      this._peerHelper.addIceCandidate(candidate).then(function () {
        debug('[addicecandidate:success]');
      }).catch(function (err) {
        warn('[addicecandidate:error] - ' + err);
      });
    }

    /**
     * Event handler for receipt and request to send ICE candidate.
     *
     * @private
     */

  }, {
    key: 'onIceCandidate',
    value: function onIceCandidate(candidate) {
      debug('[icecandidatetrickle]');
      this._sendCandidate(candidate, this._options.streamName);
    }

    /**
     * Event handler for end of ICE trickle negotiation.
     *
     * @private
     */

  }, {
    key: 'onIceCandidateTrickleEnd',
    value: function onIceCandidateTrickleEnd() {
      debug('[icecandidatetrickle:end]');
    }

    /**
     * Event handler for receipt of empty candidate during ICE negotiation.
     *
     * @private
     */

  }, {
    key: 'onEmptyCandidate',
    value: function onEmptyCandidate() {
      debug('[icecandidatetrickle:empty]');
      this.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.PEER_CANDIDATE_END));
    }

    /**
     * Event handler for completion of peer ice candidate gathering.
     *
     * @private
     */

  }, {
    key: 'onPeerGatheringComplete',
    value: function onPeerGatheringComplete() {
      debug('[icecandidategathering:end]');
      if (this._socketHelper) {
        this._socketHelper.postEndOfCandidates(this._options.streamName);
      }
    }

    /**
     * Event handler for end of ICE candidate notification over WebSocket.
     *
     * @private
     */

  }, {
    key: 'onSocketIceCandidateEnd',
    value: function onSocketIceCandidateEnd() {
      debug('[socketicecandidate:end]');
      this._getTrickleEnd().resolve();
      // this._trickleEndFuture = undefined
    }

    /**
     * Publisher status event handler for start and stop of this Publisher instance.
     *
     * @private
     */

  }, {
    key: 'onPublisherStatus',
    value: function onPublisherStatus(status) {
      debug('[publisherstatus] - ' + (0, _stringify2.default)(status, null, 2));
      var stopResult = pubStopRegex.exec(status.message);
      var startResult = pubStartRegex.exec(status.message);
      if (stopResult && stopResult[1] === this._options.streamName) {
        this._unpublishFuture.resolve();
      } else if (startResult && startResult[1] === this._options.streamName) {
        this._publishFuture.resolve();
      } else {
        warn('Publisher status received, but could not handle.');
      }
    }

    /**
     * Notification from server on send method data.
     *
     * @private
     */

  }, {
    key: 'onSendReceived',
    value: function onSendReceived(methodName, data) {
      if (methodName === 'onMetaData') {
        this.onMetaData(data);
      } else {
        // environment.invoke(methodName, data)
        this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_SEND_INVOKE, this, {
          methodName: methodName,
          data: data
        }));
      }
    }

    /**
     * Notification from server on metadata.
     *
     * @private
     */

  }, {
    key: 'onMetaData',
    value: function onMetaData(data) {
      // eslint-disable-line no-unused-vars
      this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_METADATA, this, data));
    }

    /**
     * Helper method to overlay options over current configuration.
     *
     * @private
     */

  }, {
    key: 'overlayOptions',
    value: function overlayOptions(newOptions) {
      this._options = (0, _extends3.default)(this._options, newOptions);
    }

    /**
     * Returns the current WebSocket connection helper if established.
     * Used in SharedObject communication.
     *
     * @return {PublisherSocketHelper}
     *
     * @private
     */

  }, {
    key: 'getConnection',
    value: function getConnection() {
      return this._socketHelper;
    }

    /**
     * Returns the current RTCPeerConnection helper if established.
     *
     * @return {RTCPeerConnection}
     */

  }, {
    key: 'getPeerConnection',
    value: function getPeerConnection() {
      return this._peerHelper ? this._peerHelper.connection : undefined;
    }

    /**
     * Returns the `MediaStream` instance if generated through `getUserMedia` and exists for broadcast.
     *
     * @return {MediaStream}
     */

  }, {
    key: 'getMediaStream',
    value: function getMediaStream() {
      return this._mediaStream;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */

  }, {
    key: 'getOptions',
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the type of implementation: `RTC`.
     *
     * @return {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return _publish3.PublishTypes.RTC.toUpperCase();
    }
  }]);
  return RTCPublisher;
}(_eventEmitter2.default);

exports.default = RTCPublisher;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = __webpack_require__(29);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _eventEmitter = __webpack_require__(23);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _pubSourceHandler = __webpack_require__(120);

var _pubSourceHandler2 = _interopRequireDefault(_pubSourceHandler);

var _publish = __webpack_require__(59);

var _publish2 = _interopRequireDefault(_publish);

var _event = __webpack_require__(15);

var _promise = __webpack_require__(5);

var _publish3 = __webpack_require__(54);

var _constraint = __webpack_require__(85);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'RTMPPublisher';
var defaultOptions = {
  protocol: 'rtmp',
  port: 1935,
  streamMode: 'live',
  mediaElementId: 'red5pro-publisher',
  embedWidth: '100%', // DOM display style
  embedHeight: '100%', // DOM display style
  minFlashVersion: '10.0.0',
  swf: 'lib/red5pro/red5pro-publisher.swf',
  swfobjectURL: 'lib/swfobject/swfobject.js',
  productInstallURL: 'lib/swfobject/playerProductInstall.swf',
  mediaConstraints: new _constraint.RTMPMediaConstraint()

  /**
   * Main entry for Flash-based Publisher.
   *
   * @extends EventEmitter
   */
};
var RTMPPublisher = function (_EventEmitter) {
  (0, _inherits3.default)(RTMPPublisher, _EventEmitter);

  function RTMPPublisher() {
    (0, _classCallCheck3.default)(this, RTMPPublisher);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RTMPPublisher.__proto__ || (0, _getPrototypeOf2.default)(RTMPPublisher)).call(this));

    _this._options = undefined;
    _this._view = undefined;
    _this._sourceHandler = undefined;
    _this._elementId = undefined;
    _this._connectFuture = undefined;
    return _this;
  }

  /**
   * Still in use for assigning document element view management to this instance.
   *
   * @private
   */


  (0, _createClass3.default)(RTMPPublisher, [{
    key: '_setViewIfNotExist',
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new _publish2.default(mediaElementId);
        view.attachPublisher(this);
      }
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */

  }, {
    key: 'setView',
    value: function setView(view, elementId) {
      var _this2 = this;

      this._view = view;
      this._elementId = elementId;
      if (this._sourceHandler !== undefined) {
        this._sourceHandler.disconnect();
        this._sourceHandler = undefined;
      }
      if (this._view) {
        this._sourceHandler = new _pubSourceHandler2.default(this._view.view, this.getType());
      }
      if (this._options && this._sourceHandler) {
        this._sourceHandler.addSource(this._elementId, this._options).catch(function (err) {
          (0, _log.error)(NAME, 'Could not establish proper RTMP publisher: ' + err);
          _this2.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_FAILURE, _this2));
        });
      }
      return this;
    }

    /**
     * Define a window global callback used by Flash publisher to recognize embed complete.
     *
     * @private
     */

  }, {
    key: '_setUpConnectCallback',
    value: function _setUpConnectCallback(promise) {
      var _this3 = this;

      window.setActiveId = function (successId) {
        // successId === _options.streamName
        (0, _log.debug)(NAME, 'Embed and connect() complete for publisher swf. successId(' + successId + ').');
        promise.resolve(_this3);
        _this3.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_SUCCESS, _this3));
        _this3._tearDownConnectCallback();
      };
      // TODO: Setup timeout to reject?
    }

    /**
     * Tear down global callback used in Flash publisher recognize of embed.
     *
     * @private
     */

  }, {
    key: '_tearDownConnectCallback',
    value: function _tearDownConnectCallback() {
      window.setActiveId = undefined;
    }

    /**
     * Define global function handlers for ExternalInterface to invoke for API communication.
     *
     * @private
     */

  }, {
    key: '_establishExtIntHandlers',
    value: function _establishExtIntHandlers() {
      var _this4 = this;

      var id = this._options.streamName;
      var invokeFn = function invokeFn(label) {
        return ['publisher', label, id.split('-').join('_')].join('_');
      };
      window[invokeFn('r5proConnectClosed')] = function () {
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECTION_CLOSED, _this4));
      };
      window[invokeFn('r5proConnectSuccess')] = function () {
        return _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_SUCCESS, _this4));
      };
      window[invokeFn('r5proUnpublishSuccess')] = function () {
        return _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.UNPUBLISH_SUCCESS, _this4));
      };
      window[invokeFn('r5proPublishStart')] = function () {
        _this4._connectFuture.resolve(_this4);
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_START, _this4));
      };
      window[invokeFn('r5proPublishMetadata')] = function (metadata) {
        return _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_METADATA, _this4, metadata));
      };
      window[invokeFn('r5proConnectFailure')] = function () {
        _this4._connectFuture.reject(_event.PublisherEventTypes.CONNECT_FAILURE);
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, _this4));
      };
      window[invokeFn('r5proPublishFail')] = function () {
        _this4._connectFuture.reject(_event.PublisherEventTypes.PUBLISH_FAIL);
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_FAIL, _this4));
      };
      window[invokeFn('r5proPublishInvalidName')] = function () {
        _this4._connectFuture.reject(_event.PublisherEventTypes.PUBLISH_INVALID_NAME);
        _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_INVALID_NAME, _this4));
      };
    }

    /**
     * Request to initialize the Flash-based Publisher based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */

  }, {
    key: 'init',
    value: function init(options) {
      var self = this;
      var deferred = new _promise.DeferredPromise();
      var version = options.minFlashVersion || defaultOptions.minFlashVersion;
      if (!_browser2.default.supportsFlashVersion(version)) {
        deferred.reject('Could not resolve RTMPPublisher instance. Requires minimum Flash Player install of ' + version);
      } else {
        this._options = (0, _extends3.default)({}, defaultOptions, options);
        try {
          _browser2.default.injectScript(this._options.swfobjectURL).then(function () {
            (0, _log.debug)(NAME, 'SWFObject embedded.');
            if (self._sourceHandler) {
              (0, _log.debug)(NAME, 'Publish handler established.');
              return self._sourceHandler.addSource(self._elementId, self._options);
            } else {
              (0, _log.debug)(NAME, 'Publish handler not established.');
              return true;
            }
          }).then(function () {
            self._setViewIfNotExist(self._view, self._options.mediaElementId);
            deferred.resolve(self);
          }).catch(function (err) {
            (0, _log.error)(NAME, 'Could not embed Flash-based RTMP Publisher. Reason: ' + err);
            if (self._sourceHandler) {
              self._sourceHandler.disconnect();
            }
            deferred.reject(err);
            self.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_FAILURE, self));
          });
        } catch (e) {
          deferred.reject('Could not inject Flash-based Publisher into the page. Reason: ' + e.message);
          self.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_FAILURE, self));
        }
      }
      return deferred.promise;
    }

    /**
     * Request to being a broadcast session after initilization has occured.
     *
     * @param {String} streamName
     *        Optional stream name to broadcast on, otherwise defaulting to the `streamName` provided in `init()` configuration.
     * @param {Promise} promise
     *        Optional `Promise` object to resolve/reject on based on sequence of events in establishing a broadcast, otherwise defaulting to `Promise` created internally and returned.
     * @return {Promise}
     *        The returned `Promise` will resolve or reject on successful start of a broadcast.<br>
     *        There are several processes that occur in order to establish a Flash-based broadcast that involve - but are not limited to - proper embed of Flash object on page with flashvars used in establishing RTMP-based NetConnection.
     */

  }, {
    key: 'publish',
    value: function publish() {
      var _this5 = this;

      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      // eslint-disable-line no-unused-vars
      var dfd = promise || new _promise.DeferredPromise();
      this._setUpConnectCallback(dfd);
      this._options.streamName = streamName || this._options.streamName;
      var publishOptions = this._options;
      try {
        var srcHandler = this._sourceHandler;
        this._sourceHandler.getEmbedOperation().then(function () {
          (0, _log.debug)(NAME, '[handler:embed:complete]');
          var el = _browser2.default.getEmbedObject(_this5._elementId);
          if (el) {
            _this5._establishExtIntHandlers();
          }
          var count = 0;
          var limit = 100;
          var tryConnect = function tryConnect() {
            var timeout = void 0;
            timeout = setTimeout(function () {
              try {
                clearTimeout(timeout);
                srcHandler.connect((0, _stringify2.default)(publishOptions));
              } catch (e) {
                if (count++ > limit) {
                  throw e;
                } else {
                  tryConnect();
                }
              }
            }, 300);
          };
          tryConnect();
        }).catch(function (err) {
          dfd.reject(err);
          _this5.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, _this5));
        });
      } catch (e) {
        (0, _log.error)(NAME, '[handler:embed:error]');
        dfd.reject('Could not initiate connection sequence. Reason: ' + e.message);
        this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, this));
        this._tearDownConnectCallback();
      }
      this._connectFuture = dfd;
      return dfd.promise;
    }

    /**
     * Request to stop a broadcast.
     * The returned `Promise` will either resolve or reject on successful stop of broadcast.
     *
     * @return {Promise}
     */

  }, {
    key: 'unpublish',
    value: function unpublish() {
      var deferred = new _promise.DeferredPromise();
      try {
        _browser2.default.getEmbedObject(this._elementId).unpublish();
        deferred.resolve();
      } catch (e) {
        (0, _log.error)(NAME, 'Could not initiate publish sequence. Reason: ' + e.message);
        deferred.reject(e.message);
      }
      this._connectFuture = undefined;
      return deferred.promise;
    }

    /**
     * Request to send a message to all subscribers.
     *
     * @param {String} methodName
     *        The method name associated with the message to be accepted by all subscribers.
     * @param {Object} data
     *        The data object to send associated with the method name.
     */

  }, {
    key: 'send',
    value: function send(methodName, data) {
      this._sourceHandler.send(methodName, typeof data === 'string' ? data : (0, _stringify2.default)(data));
    }

    /**
     * Deprecated. Request to update broadcast dimensions before a broadcast.
     *
     * @param {Object} quality
     *        Expects object with following structur: `{video: {width:Int, heightInt}}
     *
     * @private
     */

  }, {
    key: 'setMediaQuality',
    value: function setMediaQuality(quality) {
      if (this._sourceHandler) {
        this._sourceHandler.setMediaQuality(quality);
      }
    }

    /**
     * Helper method to overlay options over current configuration.
     *
     * @param {Object} newOptions
     *        The options to overlay.
     *
     * @private
     */

  }, {
    key: 'overlayOptions',
    value: function overlayOptions(newOptions) {
      this._options = (0, _extends3.default)(this._options, newOptions);
    }

    /**
     * Returns the current Flash/RTMP connection helper if established.
     * Used in SharedObject communication.
     *
     * @return {PublisherSourceHandler}
     *
     * @private
     */

  }, {
    key: 'getConnection',
    value: function getConnection() {
      return this._sourceHandler;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */

  }, {
    key: 'getOptions',
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the type of implementation: `RTMP`.
     *
     * @return {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return _publish3.PublishTypes.RTMP.toUpperCase();
    }
  }]);
  return RTMPPublisher;
}(_eventEmitter2.default);

exports.default = RTMPPublisher;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Red5ProSharedObject = undefined;

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = __webpack_require__(60);

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _eventEmitter = __webpack_require__(23);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _index = __webpack_require__(15);

var _sharedobjectEvent = __webpack_require__(56);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'Red5ProSharedObject';
var SO_SUBTYPE_PROPERTY = 4;
var SO_SUBTYPE_METHOD = 6;

var debug = function debug(soName, message) {
  (0, _log.debug)([NAME, soName].join(':'), message);
};
var warn = function warn(soName, message) {
  (0, _log.warn)([NAME, soName].join(':'), message);
};
var error = function error(soName, message) {
  (0, _log.error)([NAME, soName].join(':'), message);
};

var decodeMessageIfJSONString = function decodeMessageIfJSONString(message) {
  return typeof message === 'string' ? JSON.parse(message) : message;
};

/**
 * Defines the structure of a Property Data notification object.
 *
 * @private
 */

var PropertyData = function () {
  function PropertyData(key, value) {
    (0, _classCallCheck3.default)(this, PropertyData);

    this.key = key;
    this.value = value;
  }

  (0, _createClass3.default)(PropertyData, [{
    key: 'toObject',
    value: function toObject() {
      var obj = {};
      obj[this.key] = this.value;
      return obj;
    }
  }]);
  return PropertyData;
}();

/**
 * Defines the structure of a Method Data notification object.
 *
 * @private
 */


var MethodData = function () {
  function MethodData(methodName, message) {
    (0, _classCallCheck3.default)(this, MethodData);

    this.methodName = methodName;
    var messageList = void 0;
    if (Object.prototype.toString.call(message) === '[object Array]') {
      var i = void 0;
      var msg = void 0;
      var length = message.length;
      messageList = [];
      for (i = 0; i < length; i++) {
        msg = decodeMessageIfJSONString(message[i]);
        if (Object.prototype.toString.call(message) === '[object Array]') {
          messageList = messageList.concat(msg);
        } else {
          messageList.push(msg);
        }
      }
    } else {
      messageList = [decodeMessageIfJSONString(message)];
    }
    this.message = messageList.length === 1 ? messageList[0] : messageList;
  }

  (0, _createClass3.default)(MethodData, [{
    key: 'toObject',
    value: function toObject() {
      return {
        methodName: this.methodName,
        message: this.message
      };
    }
  }]);
  return MethodData;
}();

/**
 * Main entry for Shared Object associated with Publishers and Subscribers.
 *
 * @extends EventEmitter
 */


var Red5ProSharedObject = function (_EventEmitter) {
  (0, _inherits3.default)(Red5ProSharedObject, _EventEmitter);

  /**
   * The API on this object is limited as it communicates along with message channel connection of a previously established Publisher or Subscriber, of which you provide in the constuctor.
   *
   * Event handlers should be assigned to new `Red5ProSharedObject` instances in order to handle notifications over the communication channel.
   *
   * @param {String} name
   *        The name of the Shared Object to connect to.
   * @param {Object} connection
   *        The connection delegate to send and receive Shared Object notifications on.
   *        This will either be a previously established Publisher or Subscriber instance.
   */
  function Red5ProSharedObject(name, connection) {
    (0, _classCallCheck3.default)(this, Red5ProSharedObject);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Red5ProSharedObject.__proto__ || (0, _getPrototypeOf2.default)(Red5ProSharedObject)).call(this));

    _this._name = name;
    _this._socket = connection.getConnection();
    _this._socket.addSharedObjectResponseHandler(_this);
    _this._onclose = _this.close.bind(_this);
    try {
      debug(_this._name, '[sharedobject:connect:attempt]');
      // Immediately invoke request on shared object through the `getConnection()`
      //  instance of a Publisher or Subscriber (whomever invoked this constructor).
      _this._socket.getRemoteSharedObject(_this._name);
      _browser2.default.addCloseHandler(_this._onclose, 0);
    } catch (e) {
      error(_this._name, '[sharedobject:connect:error]: ' + e.message);
    }
    return _this;
  }

  /**
   * Attempt to parse message into a Object.
   *
   * @param {Object} message
   *        Either a JSON string or object.
   *
   * @private
   */


  (0, _createClass3.default)(Red5ProSharedObject, [{
    key: '_getJsonFromSocketMessage',
    value: function _getJsonFromSocketMessage(message) {
      try {
        return typeof message.data === 'string' ? JSON.parse(message.data) : message.data;
      } catch (e) {
        warn(this._name, 'Could not parse message as JSON. Message= ' + message.data + '. Error= ' + e.message);
      }
      return null;
    }

    /**
     * Dispatch of PROPERTY_UPDATE with information.
     *
     * @param {Object} valueObject
     *        Optional value object to send in notification.
     *
     * @private
     */

  }, {
    key: '_notifyOfPropertyValues',
    value: function _notifyOfPropertyValues(valueObject) {
      if ((0, _keys2.default)(valueObject).length === 0) {
        this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.SharedObjectEventTypes.PROPERTY_UPDATE, this._name, {}));
      } else {
        var key = void 0;
        for (key in valueObject) {
          this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.SharedObjectEventTypes.PROPERTY_UPDATE, this._name, new PropertyData(key, valueObject[key]).toObject()));
        }
      }
    }

    /**
     * Dispatch of PROPERTY_UPDATE or METHOD_UPDATE based on event(s).
     *
     * @param {Array} events
     *        A list of events to iterate through and dispatch notifications from.
     *
     * @private
     */

  }, {
    key: '_notifyOfEvents',
    value: function _notifyOfEvents(events) {
      var i = void 0,
          event = void 0;
      var handled = false;
      var length = events.length;
      for (i = 0; i < length; i++) {
        event = events[i];
        switch (event.subtype) {
          case SO_SUBTYPE_PROPERTY:
            this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.SharedObjectEventTypes.PROPERTY_UPDATE, this._name, new PropertyData(event.attribute, event.value).toObject()));
            handled = true;
            break;
          case SO_SUBTYPE_METHOD:
            this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.SharedObjectEventTypes.METHOD_UPDATE, this._name, new MethodData(event.method, event.value).toObject()));
            handled = true;
            break;
        }
      }
      return handled;
    }

    /**
     * Invoked by connection channel to handle message and dispatch appropriate notifications.
     *
     * @private
     */

  }, {
    key: 'respond',
    value: function respond(message) {
      if (message.data) {
        var json = this._getJsonFromSocketMessage(message);
        if (json === null) {
          warn(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
          return true;
        }
        if (json.data !== undefined) {
          if (json.data.name === this._name) {
            debug(this._name, '[sharedobject-response]: ' + (0, _stringify2.default)(json, null, 2));
            if (json.data.status === 'SharedObject.Status.GetRemote' && json.data.message === 'Success') {
              this._socket.connectToSharedObject(this._name);
              return true;
            } else if (json.data.status === 'SharedObject.Status.GetRemote' && json.data.message === 'Fail') {
              this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.SharedObjectEventTypes.CONNECT_FAILURE, this._name));
              return true;
            } else if (json.data.status === 'SharedObject.Status.Connect' && json.data.message === 'Success') {
              this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.SharedObjectEventTypes.CONNECT_SUCCESS, this._name));
              return true;
            } else if (json.data.status === 'SharedObject.Status.Connect' && json.data.message === 'Fail') {
              this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.SharedObjectEventTypes.CONNECT_FAILURE, this._name));
              return true;
            } else if (json.data.type === 'sharedobject') {
              if (json.data.hasOwnProperty('events')) {
                return this._notifyOfEvents(json.data.events);
              } else if (json.data.hasOwnProperty('value')) {
                return this._notifyOfPropertyValues(json.data.value);
              }
            }
          } else {
            debug('Unhandled Socket exchange: ' + (0, _stringify2.default)(json, null, 2));
          }
        }
      }
      return false;
    }
  }, {
    key: 'send',
    value: function send(messageName, data) {
      this._socket.sendToSharedObject(this._name, messageName, data);
    }
  }, {
    key: 'setProperty',
    value: function setProperty(key, value) {
      this._socket.sendPropertyToSharedObject(this._name, key, value);
    }
  }, {
    key: 'close',
    value: function close() {
      if (this._socket === undefined) {
        warn('Socket no longer exist to close shared object properly.');
      }
      this._socket.closeSharedObject(this._name);
      if (this._socket) {
        this._socket.removeSharedObjectResponseHandler(this);
      }
      this._socket = undefined;
      this._name = undefined;
      _browser2.default.removeCloseHandler(this._onclose);
    }
  }, {
    key: 'getName',
    value: function getName() {
      return this._name;
    }
  }]);
  return Red5ProSharedObject;
}(_eventEmitter2.default);

exports.Red5ProSharedObject = Red5ProSharedObject;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _eventEmitter = __webpack_require__(23);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _event = __webpack_require__(86);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'ControlSlider';

/**
 * Custom slider control for Playback Controls.
 *
 * @private
 */

var ControlSlider = function (_EventEmitter) {
  (0, _inherits3.default)(ControlSlider, _EventEmitter);

  function ControlSlider(type) {
    (0, _classCallCheck3.default)(this, ControlSlider);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ControlSlider.__proto__ || (0, _getPrototypeOf2.default)(ControlSlider)).call(this));

    NAME = [NAME, type].join('::');
    (0, _log.debug)(NAME, '[init]');
    _this._container = _browser2.default.createElement('div');
    _this._button = _this.createButton();
    _this._track = _this.createTrack();
    _this._progressBar = _this.createProgressBar();
    _this._container.appendChild(_this._track);
    _this._container.appendChild(_this._progressBar);
    _this._container.appendChild(_this._button);
    _this._value = 0; // 0 - 1
    _this._disabled = false;
    _this._eventStartPosition = 0;
    _this._layout();
    _this._mouseupHandler = _this._mouseup.bind(_this);
    _this._mousedownHandler = _this._mousedown.bind(_this);
    _this._mousemoveHandler = _this._mousemove.bind(_this);
    _this._touchupHandler = _this._touchproxy.bind(_this);
    _this._touchdownHandler = _this._touchproxy.bind(_this);
    _this._touchmoveHandler = _this._touchproxy.bind(_this);
    _this._updateHandlers(_this._disabled);
    return _this;
  }

  /**
   * Touch event proxy to bubble out mouse events for handling interaction.
   *
   * @private
   */


  (0, _createClass3.default)(ControlSlider, [{
    key: '_touchproxy',
    value: function _touchproxy(event) {
      event.preventDefault();
      if (event.touches.length > 1 || event.type == "touchend" && event.touches.length > 0) {
        return;
      }
      var evt = _browser2.default.createEvent('MouseEvent');
      var type = void 0,
          touch = void 0;
      var t = event.originalTarget || event.target;
      switch (event.type) {
        case 'touchstart':
          type = 'mousedown';
          touch = event.changedTouches[0];
          break;
        case 'touchmove':
          type = 'mousemove';
          touch = event.changedTouches[0];
          break;
        case 'touchend':
          type = 'mouseup';
          touch = event.changedTouches[0];
          break;
      }

      evt.initMouseEvent(type, true, true, t.ownerDocument.defaultView, 0, touch.screenX, touch.screenY, touch.clientX, touch.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, 0, null);
      t.dispatchEvent(evt);
    }

    /**
     * Event handler for mouse up.
     *
     * @private
     */

  }, {
    key: '_mouseup',
    value: function _mouseup() {
      this._eventStartPosition = 0;
      document.removeEventListener('mousemove', this._mousemoveHandler);
      document.removeEventListener('mouseup', this._mouseupHandler);
      document.removeEventListener('touchmove', this._touchmoveHandler);
      document.removeEventListener('touchup', this._touchupHandler);
      this.trigger(new _event.SliderEvent(_event.SliderEventTypes.CHANGE_COMPLETE, this));
    }

    /**
     * Event handler for mouse move.
     *
     * @private
     */

  }, {
    key: '_mousemove',
    value: function _mousemove(event) {
      var positionOffset = _browser2.default.getMouseXFromEvent(event) - this._eventStartPosition;
      var rect = this._button.parentNode.getBoundingClientRect();
      var position = this._eventStartPosition + positionOffset - rect.left; // - environment.getScrollX()
      position = Math.max(0, position);
      position = Math.min(position, rect.width);
      var percentage = position / rect.width;
      this.trigger(new _event.SliderEvent(_event.SliderEventTypes.CHANGE, this, percentage));
    }

    /**
     * Event handler for mouse down.
     *
     * @private
     */

  }, {
    key: '_mousedown',
    value: function _mousedown(event) {
      this._eventStartPosition = _browser2.default.getMouseXFromEvent(event);
      this.trigger(new _event.SliderEvent(_event.SliderEventTypes.CHANGE_START, this));
      document.addEventListener('mousemove', this._mousemoveHandler);
      document.addEventListener('mouseup', this._mouseupHandler);
      document.addEventListener('touchmove', this._touchmoveHandler);
      document.addEventListener('touchup', this._touchupHandler);
    }

    /**
     * Adds or removes control hanlders based on flag of overall control being disabled.
     *
     * @param {Boolean} isDisabled
     *
     * @private
     */

  }, {
    key: '_updateHandlers',
    value: function _updateHandlers(isDisabled) {
      this._eventStartPosition = 0;
      if (isDisabled) {
        this._track.removeEventListener('click', this._mousemoveHandler);
        this._progressBar.removeEventListener('click', this._mousemoveHandler);
        this._button.removeEventListener('mousedown', this._mousedownHandler);
        document.removeEventListener('mousemove', this._mousemoveHandler);
        document.removeEventListener('mouseup', this._mouseupHandler);
        document.removeEventListener('touchmove', this._touchmoveHandler);
        document.removeEventListener('touchup', this._touchupHandler);
        this._track.classList.add('red5pro-media-slider-disabled');
        this._progressBar.classList.add('red5pro-media-slider-disabled');
        this._button.classList.add('red5pro-media-slider-disabled');
      } else {
        this._track.addEventListener('click', this._mousemoveHandler);
        this._progressBar.addEventListener('click', this._mousemoveHandler);
        this._button.addEventListener('mousedown', this._mousedownHandler);
        this._button.addEventListener('touchstart', this._touchdownHandler);
        this._track.classList.remove('red5pro-media-slider-disabled');
        this._progressBar.classList.remove('red5pro-media-slider-disabled');
        this._button.classList.remove('red5pro-media-slider-disabled');
      }
    }

    /**
     * Re-layout sub controls.
     *
     * @private
     */

  }, {
    key: '_layout',
    value: function _layout() {
      var position = this._progressBar.parentNode.clientWidth * this._value;
      this._progressBar.style.width = position + 'px';
      this._button.style.left = position - this._button.clientWidth * 0.5 + 'px';
    }

    /**
     * Creates the button element.
     *
     * @private
     */

  }, {
    key: 'createButton',
    value: function createButton() {
      var span = _browser2.default.createElement('span');
      span.classList.add('red5pro-media-slider-button');
      return span;
    }

    /**
     * Creates the progress bar element.
     *
     * @private
     */

  }, {
    key: 'createProgressBar',
    value: function createProgressBar() {
      var span = _browser2.default.createElement('span');
      span.classList.add('red5pro-media-slider-progress');
      return span;
    }

    /**
     * Creates the track element.
     *
     * @private
     */

  }, {
    key: 'createTrack',
    value: function createTrack() {
      var span = _browser2.default.createElement('span');
      span.classList.add('red5pro-media-slider-track');
      return span;
    }

    /**
     * Returns the current value.
     *
     * @return {Number}
     */

  }, {
    key: 'value',
    get: function get() {
      return this._value;
    }

    /**
     * Sets the current value.
     *
     * @param {Number} 0..1
     */
    ,
    set: function set(percentValue /* 0 - 1 */) {
      this._value = percentValue;
      this._layout();
    }

    /**
     * Returns disabled flag.
     *
     * @return {Boolean}
     */

  }, {
    key: 'disabled',
    get: function get() {
      return this._disabled;
    }

    /**
     * Sets the disabled flag.
     *
     * @param {Boolean} bool
     */
    ,
    set: function set(bool) {
      this._disabled = bool;
      this._updateHandlers(bool);
    }

    /**
     * Returns the target container this control is assigned to in the DOM.
     *
     * @return {Element}
     */

  }, {
    key: 'view',
    get: function get() {
      return this._container;
    }
  }]);
  return ControlSlider;
}(_eventEmitter2.default);

exports.default = ControlSlider;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTMPSubscriber = exports.HLSSubscriber = exports.RTCSubscriber = exports.Red5ProSubscriber = undefined;

var _set = __webpack_require__(92);

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = __webpack_require__(94);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _map = __webpack_require__(89);

var _map2 = _interopRequireDefault(_map);

var _implFactoryOrder = __webpack_require__(87);

var _implFactoryOrder2 = _interopRequireDefault(_implFactoryOrder);

var _eventEmitter = __webpack_require__(23);

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _red5proRtc = __webpack_require__(127);

var _red5proRtc2 = _interopRequireDefault(_red5proRtc);

var _red5proRtmp = __webpack_require__(128);

var _red5proRtmp2 = _interopRequireDefault(_red5proRtmp);

var _red5proHls = __webpack_require__(126);

var _red5proHls2 = _interopRequireDefault(_red5proHls);

var _promise = __webpack_require__(5);

var _playback = __webpack_require__(34);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'Red5ProSubscriber';

var playbackFactory = new _implFactoryOrder2.default();
var playbackImpl = function () {
  var map = new _map2.default();
  map.set(_playback.PlaybackTypes.RTC, _red5proRtc2.default);
  map.set(_playback.PlaybackTypes.RTMP, _red5proRtmp2.default);
  map.set(_playback.PlaybackTypes.HLS, _red5proHls2.default);
  return map;
}();

/**
 * Main entry for failover support of all subscriber implementations.
 *
 * @extends EventEmitter
 */

var Red5ProSubscriber = function (_EventEmitter) {
  (0, _inherits3.default)(Red5ProSubscriber, _EventEmitter);

  function Red5ProSubscriber() {
    (0, _classCallCheck3.default)(this, Red5ProSubscriber);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Red5ProSubscriber.__proto__ || (0, _getPrototypeOf2.default)(Red5ProSubscriber)).call(this));

    _this._options = undefined;
    _this._order = [_playback.PlaybackTypes.RTC, _playback.PlaybackTypes.RTMP, _playback.PlaybackTypes.HLS];
    return _this;
  }

  /**
   * Utilizes Failover Publisher Factory to attempt in determining browser support for Publisher from defined order.
   *
   * @return {Promise}
   *
   * @private
   */


  (0, _createClass3.default)(Red5ProSubscriber, [{
    key: '_getPlaybackFromOrder',
    value: function _getPlaybackFromOrder(order, options) {
      return playbackFactory.create(order, playbackImpl, options, 'init');
    }

    /**
     * Returns the specified order for auto-failover.
     *
     *  @return {Array}
     *          Default: `['rtc', 'rtmp', 'hls']`.
     */

  }, {
    key: 'getPlaybackOrder',
    value: function getPlaybackOrder() {
      return this._order;
    }

    /**
     * Defines the desired auto-failover order.
     *
     *  @param {Array} order
     *          The desired order. e.g, `['rtc', 'rtmp', 'hls']`.
     */

  }, {
    key: 'setPlaybackOrder',
    value: function setPlaybackOrder(order) {
      // Allow for string value to define single item in order.
      order = typeof order === 'string' ? [order] : order;

      // Filter out values not available in enumeration of playback types.
      var t = order.filter(function (entry) {
        var key = void 0;
        for (key in _playback.PlaybackTypes) {
          if (_playback.PlaybackTypes[key].toLowerCase() === entry.toLowerCase()) {
            return true;
          }
        }
        return false;
      }).map(function (entry) {
        return entry.toLowerCase();
      });

      // Define new order.
      this._order = [].concat((0, _toConsumableArray3.default)(new _set2.default(t)));
      (0, _log.debug)(NAME, '[orderupdate]: ' + this._order);
      return this;
    }

    /**
     * Request to initialize and determine the proper Subscriber implementation based on configuration.
     *
     * The returned `Promise` will either resolve with the determined Subscriber instance or reject with an error String in failure to determine Subscriber type.
     *
     *  @param {Object} options
     *          The initialization configuration map for each desired failover tech.
     *  @return {Promise}
     */

  }, {
    key: 'init',
    value: function init(options) {
      this._options = options;
      var deferred = new _promise.DeferredPromise();
      (0, _log.debug)(NAME, '[init]');
      this._getPlaybackFromOrder(this._order, this._options).then(function (subscriber) {
        (0, _log.debug)(NAME, '[init:success]: subscriber found ' + subscriber.getType());
        deferred.resolve(subscriber);
      }).catch(function (err) {
        (0, _log.warn)(NAME, '[playerror]: Could not implement a subscriber: ' + err);
        deferred.reject(err);
      });
      return deferred.promise;
    }

    /**
     * Return enumerated value Subscriber types used in failover order.
     * @type {Object}
     */

  }, {
    key: 'playbackTypes',
    get: function get() {
      return _playback.PlaybackTypes;
    }
  }]);
  return Red5ProSubscriber;
}(_eventEmitter2.default);

exports.Red5ProSubscriber = Red5ProSubscriber;
exports.RTCSubscriber = _red5proRtc2.default;
exports.HLSSubscriber = _red5proHls2.default;
exports.RTMPSubscriber = _red5proRtmp2.default;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(29);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _websocket = __webpack_require__(42);

var websocket = _interopRequireWildcard(_websocket);

var _socketHelper = __webpack_require__(57);

var _socketHelper2 = _interopRequireDefault(_socketHelper);

var _red5proSourceHandlerHls = __webpack_require__(129);

var _red5proSourceHandlerHls2 = _interopRequireDefault(_red5proSourceHandlerHls);

var _playback = __webpack_require__(43);

var _playback2 = _interopRequireDefault(_playback);

var _index = __webpack_require__(24);

var _event = __webpack_require__(15);

var _playback3 = __webpack_require__(34);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

var _urlEndpoint = __webpack_require__(58);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'HLSSubscriber';

/**
 * Simple generation og unique subscriber id.
 *
 * @return {String}
 *
 * @private
 */
var generateSubscriptionId = function generateSubscriptionId() {
  var id = Math.floor(Math.random() * 0x10000).toString(16);
  return 'subscriber-' + id;
};

// Default to secure settings.
var defaultOptions = {
  protocol: 'https',
  port: 443,
  app: 'live',
  mimeType: 'application/x-mpegURL',
  mediaElementId: 'red5pro-subscriber',
  autoLayoutOrientation: true,
  muteOnAutoplayRestriction: true,
  subscriptionId: generateSubscriptionId()

  /**
   * Util to return the endpoint for an HLS video file.
   *
   * @param {Object} options
   *        The initialization object.
   * @return {String}
   *
   * @private
   */
};var optionsToHlsURL = function optionsToHlsURL(options) {
  var protocol = options.hlsprotocol ? options.hlsprotocol : options.protocol;
  var port = options.hlsport ? options.hlsport : options.port;
  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
  return protocol + '://' + options.host + ':' + port + '/' + appEndpoint + '/' + options.streamName + '.m3u8';
};

/**
 * Main entry for HLS-based Subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 */

var HLSSubscriber = function (_PlaybackController) {
  (0, _inherits3.default)(HLSSubscriber, _PlaybackController);

  function HLSSubscriber() {
    (0, _classCallCheck3.default)(this, HLSSubscriber);

    var _this = (0, _possibleConstructorReturn3.default)(this, (HLSSubscriber.__proto__ || (0, _getPrototypeOf2.default)(HLSSubscriber)).call(this));

    _this._options = undefined;
    _this._view = undefined;
    _this._sourceHandler = undefined;
    _this._socketHelper = undefined;
    _this._viewResolver = new _promise.DeferredPromise();
    _this._subscriptionResolver = new _promise.DeferredPromise();
    _this._boundBubbleSubscriberEvents = _this.bubbleSubscriberEvents.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(HLSSubscriber, [{
    key: '_getViewResolverPromise',
    value: function _getViewResolverPromise() {
      return this._viewResolver.promise;
    }
  }, {
    key: '_getSubscriptionResolverPromise',
    value: function _getSubscriptionResolverPromise() {
      return this._subscriptionResolver.promise;
    }

    /**
     * Proxy event bubbler through handler instance.
     *
     * @private
     */

  }, {
    key: 'bubbleSubscriberEvents',
    value: function bubbleSubscriberEvents(event) {
      if (event.type === _event.SubscriberEventTypes.SUBSCRIBE_START) {
        this._subscriptionResolver.resolve(this);
      }
      this.trigger(new _event.SubscriberEvent(event.type, this, event.data));
    }

    /**
     * Gloms the Playback Controls API onto this instance to provide ease in use.
     *
     * @param {Object} handler
     *        The method request handler to bind and forward calls on.
     *
     * @private
     */

  }, {
    key: '_glomSourceHandlerAPI',
    value: function _glomSourceHandlerAPI(handler) {
      var _this2 = this;

      this.play = handler.play.bind(handler);
      this.pause = handler.pause.bind(handler);
      this.resume = handler.resume.bind(handler);
      this.stop = handler.stop.bind(handler);
      this.mute = handler.mute.bind(handler);
      this.unmute = handler.unmute.bind(handler);
      this.setVolume = handler.setVolume.bind(handler);
      this.seekTo = handler.seekTo.bind(handler);
      this.toggleFullScreen = handler.toggleFullScreen.bind(handler);
      handler.on('*', function (event) {
        _this2.trigger(new _event.SubscriberEvent(event.type, _this2, event.data));
      });
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and subscribers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */

  }, {
    key: '_setViewIfNotExist',
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new _playback2.default(mediaElementId);
        view.attachSubscriber(this);
      }
    }

    /**
     * Attempt to initialize the subscription handler for HLS.
     *
     * @param {Object} options
     *        The initialization configuration.
     * @param {Object} handler
     *        The handler instance that will manage view interaction and events.
     *
     * @private
     */

  }, {
    key: '_initHandler',
    value: function _initHandler(options) {
      var _this3 = this;

      var urlRegex = /^http(|s).*\.m3u8/g;
      var url = this._options.streamName.match(urlRegex) ? this._options.streamName : optionsToHlsURL(this._options);
      this._sourceHandler.on('*', this._boundBubbleSubscriberEvents);
      this._sourceHandler.addSource(url, options.mimeType, options).then(function () {
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_SUCCESS));
      }).catch(function (err) {
        (0, _log.error)(NAME, 'Could not establish an HLS Subscriber: ' + err);
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE));
      });
    }

    /**
     * Request to initialize the HLS-based Subscriber based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */

  }, {
    key: 'init',
    value: function init(options) {
      var _this4 = this;

      var deferred = new _promise.DeferredPromise();
      if (!_browser2.default.supportsHLS()) {
        (0, _log.warn)(NAME, 'Could not resolve HLSSubscriber instance.');
        deferred.reject('Could not resolve HLSSubscriber instance.');
      } else if (options.connectionParams && !websocket.isSupported()) {
        // If `connectionParams` are provided in the init config,
        //  then a subsequent validation call is made on a WebSocket to 
        //  ensure that this client is allowed access.
        (0, _log.warn)(NAME, 'Could not resolve HLSSubscriber instance with connection params. WebSocket support is required.');
        deferred.reject(NAME, 'Could not resolve HLSSubscriber instance with connection params. WebSocket support is required.');
      } else {
        this._options = (0, _extends3.default)({}, defaultOptions, options);
        var socketPromise = new _promise.DeferredPromise();
        if (this._options.connectionParams) {
          this._socketHelper = new _socketHelper2.default(this, 'HLSSubscriptionSocket');
          var socketurl = (0, _urlEndpoint.hlsSocketEndpointFromOptions)(this._options, {
            id: this._options.subscriptionId
          });
          this._socketHelper.setUp(socketurl, socketPromise);
        } else {
          socketPromise.resolve();
        }
        socketPromise.promise.then(function () {
          // Tear down socket helper if exists.
          // We only needed it to do validation with optional connectionParams.
          if (_this4._socketHelper) {
            _this4._socketHelper.tearDown();
            _this4._socketHelper = undefined;
          }
          _this4._setViewIfNotExist(_this4._view, _this4._options.mediaElementId);
          _this4._getViewResolverPromise().then(function (view) {
            _this4._sourceHandler = new _red5proSourceHandlerHls2.default(view.view, _this4.getType());
            _this4._glomSourceHandlerAPI(_this4._sourceHandler);
            if (_this4._options) {
              _this4._initHandler(_this4._options);
            }
          });
          deferred.resolve(_this4);
        }).catch(function (error) {
          deferred.reject(error);
          _this4.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE, _this4, error));
        });
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */

  }, {
    key: 'setView',
    value: function setView(view) {
      this._view = view;
      this._viewResolver.resolve(view);
      return this;
    }

    /**
     * Request to begin subscribing to a stream.
     *
     * @return {Promise}
     *          The returned `Promise` will resolve or reject on successful start of playback.
     */

  }, {
    key: 'subscribe',
    value: function subscribe() {
      return this._getSubscriptionResolverPromise();
    }

    /**
     * Request to stop a subscription.
     * The returned `Promise` will either resolve or reject on successful stop of subscription.
     *
     * @return {Promise}
     */

  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      (0, _log.debug)(NAME, '[unscubscribe]');
      var deferred = new _promise.DeferredPromise();
      if (this._socketHelper) {
        this._socketHelper.tearDown();
      }
      try {
        this._sourceHandler.stop();
        this._sourceHandler.disconnect();
        deferred.resolve();
      } catch (e) {
        deferred.reject(e.message);
      }
      return deferred.promise;
    }

    /**
     * Returns connection handler for playback.
     *
     * @return {Object}
     */

  }, {
    key: 'getConnection',
    value: function getConnection() {
      return this._sourceHandler;
    }

    /**
     * Returns reference to playback controls if available.
     *
     * @return {PlaybackControls}
     */

  }, {
    key: 'getControls',
    value: function getControls() {
      return this._sourceHandler ? this._sourceHandler.getControls() : undefined;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */

  }, {
    key: 'getOptions',
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the target view Element.
     *
     * @return {Element}
     */

  }, {
    key: 'getPlayer',
    value: function getPlayer() {
      return this._view.view;
    }

    /**
     * Returns the type of implementation: `RTC`.
     *
     * @return {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return _playback3.PlaybackTypes.HLS.toUpperCase();
    }
  }]);
  return HLSSubscriber;
}(_index.PlaybackController);

exports.default = HLSSubscriber;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = __webpack_require__(29);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _translationUtil = __webpack_require__(81);

var _webrtc = __webpack_require__(41);

var webrtc = _interopRequireWildcard(_webrtc);

var _websocket = __webpack_require__(42);

var websocket = _interopRequireWildcard(_websocket);

var _red5proSourceHandlerRtc = __webpack_require__(130);

var _red5proSourceHandlerRtc2 = _interopRequireDefault(_red5proSourceHandlerRtc);

var _socketHelperSub = __webpack_require__(115);

var _socketHelperSub2 = _interopRequireDefault(_socketHelperSub);

var _webrtcHelperSub = __webpack_require__(117);

var _webrtcHelperSub2 = _interopRequireDefault(_webrtcHelperSub);

var _playback = __webpack_require__(43);

var _playback2 = _interopRequireDefault(_playback);

var _controls = __webpack_require__(24);

var _object = __webpack_require__(28);

var _urlEndpoint = __webpack_require__(58);

var _event = __webpack_require__(15);

var _playback3 = __webpack_require__(34);

var _webrtc2 = __webpack_require__(55);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var subStartRegex = /(.*) starting/i;
var NAME = 'RTCSubscriber';

/**
 * Simple generation og unique subscriber id.
 *
 * @return {String}
 *
 * @private
 */
var generateSubscriptionId = function generateSubscriptionId() {
  var id = Math.floor(Math.random() * 0x10000).toString(16);
  return 'subscriber-' + id;
};

// Default to secure settings.
var defaultOptions = {
  protocol: 'wss',
  port: 443,
  app: 'live',
  autoLayoutOrientation: true,
  mediaElementId: 'red5pro-subscriber',
  rtcConfiguration: {
    iceServers: [{ urls: 'stun:stun2.l.google.com:19302' }],
    iceCandidatePoolSize: 2,
    bundlePolicy: 'max-bundle'
  }, // Favored over iceServers.
  iceServers: undefined, // Deprecated. Preserved for backward-compatibility.
  iceTransport: _webrtc2.IceTransportTypes.UDP,
  muteOnAutoplayRestriction: true,
  maintainConnectionOnSubscribeErrors: false

  /**
   * Main entry for WebRTC-based Subscriber.
   *
   * @extends EventEmitter
   * @extends SubscriberPlaybackController
   */
};
var RTCSubscriber = function (_PlaybackController) {
  (0, _inherits3.default)(RTCSubscriber, _PlaybackController);

  function RTCSubscriber() {
    (0, _classCallCheck3.default)(this, RTCSubscriber);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RTCSubscriber.__proto__ || (0, _getPrototypeOf2.default)(RTCSubscriber)).call(this));

    _this._view = undefined;
    _this._options = undefined;
    _this._peerHelper = undefined;
    _this._socketHelper = undefined;
    _this._connectionClosed = true;
    _this._sourceHandler = undefined;
    _this._mediaStream = undefined;
    _this._viewResolver = new _promise.DeferredPromise();
    _this._availabilityResolver = new _promise.DeferredPromise();
    _this._subscriptionResolver = new _promise.DeferredPromise();
    _this._orientation = 0;
    return _this;
  }

  (0, _createClass3.default)(RTCSubscriber, [{
    key: '_getViewResolverPromise',
    value: function _getViewResolverPromise() {
      return this._viewResolver.promise;
    }
  }, {
    key: '_getAvailabilityResolverPromise',
    value: function _getAvailabilityResolverPromise() {
      return this._availabilityResolver.promise;
    }
  }, {
    key: '_getSubscriptionResolverPromise',
    value: function _getSubscriptionResolverPromise() {
      return this._subscriptionResolver.promise;
    }

    /**
     * Gloms the Playback Controls API onto this instance to provide ease in use.
     *
     * @param {Object} handler
     *        The method request handler to bind and forward calls on.
     *
     * @private
     */

  }, {
    key: '_glomSourceHandlerAPI',
    value: function _glomSourceHandlerAPI(handler) {
      var _this2 = this;

      this.play = handler.play.bind(handler);
      this.pause = handler.pause.bind(handler);
      this.resume = handler.resume.bind(handler);
      this.stop = handler.stop.bind(handler);
      this.mute = handler.mute.bind(handler);
      this.unmute = handler.unmute.bind(handler);
      this.setVolume = handler.setVolume.bind(handler);
      this.seekTo = handler.seekTo.bind(handler);
      this.toggleFullScreen = handler.toggleFullScreen.bind(handler);
      handler.on('*', function (event) {
        _this2.trigger(new _event.SubscriberEvent(event.type, _this2, event.data));
      });
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and subscribers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */

  }, {
    key: '_setViewIfNotExist',
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new _playback2.default(mediaElementId);
        view.attachSubscriber(this);
      }
    }

    /**
     * Attempt to initialize the subscription handler for WebRTC.
     *
     * @param {Object} options
     *        The initialization configuration.
     * @param {Object} handler
     *        The handler instance that will manage view interaction and events.
     *
     * @private
     */

  }, {
    key: '_initHandler',
    value: function _initHandler(options, handler) {
      if (options && handler) {
        handler.on('*', this._boundBubbleSubscriberEvents);
        handler.addSource(options);
      }
    }

    /**
     * Request available stream by name on server through WebSocket request.
     *
     * @param {String} streamName
     *        The name of the stream to look up.
     * @private
     */

  }, {
    key: '_requestAvailability',
    value: function _requestAvailability(streamName) {
      (0, _log.debug)(NAME, '[requestavailability]');
      // message on socket returns -> onStream(Un)Available
      this._socketHelper.post({
        isAvailable: streamName
      });
    }

    /**
     * Request offer over WebSocket.
     *
     * @param {String} streamName
     *        The name of the stream to subscribe to.
     * @param {String} subscriptionId
     *        The unique id of this subscriber.
     * @param {String} vEncoding
     *        Optional encoding type for video. Defaults to server selection.
     * @param {String} aEncoding
     *        Optional encoding type for audio. Defaults to server selection.
     *
     * @private
     */

  }, {
    key: '_requestOffer',
    value: function _requestOffer(streamName, subscriptionId, transport) {
      var vEncoding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var aEncoding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

      (0, _log.debug)(NAME, '[requestoffer]');
      var offer = {
        requestOffer: streamName,
        requestId: subscriptionId,
        transport: transport
      };
      if (typeof vEncoding !== 'undefined' && vEncoding !== _playback3.PlaybackVideoEncoder.NONE) {
        offer.videoEncoding = vEncoding;
      } else if (_browser2.default.getIsEdge()) {
        // Force VP8 on Edge if not specified in the init config.
        // offer.videoEncoding = PlaybackVideoEncoder.VP8
      }
      if (typeof aEncoding !== 'undefined' && aEncoding !== _playback3.PlaybackAudioEncoder.NONE) {
        offer.audioEncoding = aEncoding;
      }
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.OFFER_START, this));
      // message on socket returns -> onSDPOffer
      this._socketHelper.post(offer);
    }

    /**
     * Creates and sends an answer based on provided SDP.
     *
     * @param {Object} sdp
     *        The SDP object to use in creating an SDP answer to send back.
     *
     * @private
     */

  }, {
    key: '_requestAnswer',
    value: function _requestAnswer(sdp) {
      var _this3 = this;

      (0, _log.debug)(NAME, '[requestanswer]');
      // invokes -> sendAnswer
      this._peerHelper.createAnswer(sdp).then(function (sessionDescription) {
        (0, _log.debug)(NAME, '[onanswercreated]');
        (0, _log.debug)(NAME, '[> sendanswer]');
        _this3._sendAnswer(_this3._options.streamName, _this3._options.subscriptionId, sessionDescription);
      }).catch(function (error) {
        _this3.onSDPError(error);
      });
    }

    /**
     * Posts SDP answer to server over WebSocket.
     *
     * @param {String} streamName
     *        The target stream name.
     * @param {String} subscriptionId
     *        The unique id of this subscriber.
     * @param {Object} sdp
     *        The SDP to send as an answer.
     *
     * @private
     */

  }, {
    key: '_sendAnswer',
    value: function _sendAnswer(streamName, subscriptionId, sdp) {
      (0, _log.debug)(NAME, '[sendanswer]: streamname(' + streamName + '), subscriptionid(' + subscriptionId + ')');
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.ANSWER_START, this, sdp));
      // message on socket response -> onAddIceCandidate
      // message on peer response -> onaddstream
      this._socketHelper.post({
        handleAnswer: streamName,
        requestId: subscriptionId,
        data: {
          sdp: sdp
        }
      });
    }

    /**
     * Sends a candidate to the server over WebSocket.
     *
     * @param {Object} candidate
     *        The peer candidate description.
     *
     * @private
     */

  }, {
    key: '_sendCandidate',
    value: function _sendCandidate(candidate) {
      (0, _log.debug)(NAME, '[sendcandidate]');
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.CANDIDATE_START, this, candidate));
      // message on peer response -> onicecandidate
      this._socketHelper.post({
        handleCandidate: this._options.streamName,
        requestId: this._options.subscriptionId,
        data: {
          candidate: candidate
        }
      });
    }

    /**
     * Setup and connect to begin a subscription.
     * This is invoked once the availability of the stream is recognized on the server and notified on this instance.
     *
     * @param {RTCConfiguration} rtcConfiguration
     *        A custom RTCConfiguration
     * @param {Array} iceServers
     *        The ICE server list to use in trickle.
     * @note For backward compatibility, keeping arguments as optional, with at least one being fulfilled. The `configuration` param will be favored after 5.4.0, `iceServers` is up for deprecation.
     *
     * @private
     */

  }, {
    key: '_connect',
    value: function _connect(configuration) {
      var _this4 = this;

      var iceServers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      (0, _log.debug)(NAME, '[connect]');
      if (iceServers && configuration) {
        (0, _log.warn)('The iceServers configuration property is considered deprecated. Please use the rtcConfiguration configuration property upon which you can assign iceServers. Reference: https://www.red5pro.com/docs/streaming/migrationguide.html');

        configuration.iceServers = iceServers;
      }
      this._options.iceServers = configuration ? configuration.iceServers : iceServers;
      var p = void 0;
      if (configuration !== undefined) {
        p = this._peerHelper.setUpWithPeerConfiguration(configuration, undefined);
      } else {
        p = this._peerHelper.setUp(this._options.iceServers, undefined, this._options.rtcpMuxPolicy);
      }
      p.then(function (connection) {
        _this4.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.PEER_CONNECTION_AVAILABLE, _this4, connection));
        _this4._requestOffer(_this4._options.streamName, _this4._options.subscriptionId, _this4._options.iceTransport, _this4._options.videoEncoding, _this4._options.audioEncoding);
      }).catch(function () {
        (0, _log.warn)(NAME, 'Could not establish RTCPeerConnection.');
        _this4.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE, _this4));
      });
      //  TODO: Normalize returns to either all be chainable or not be chainable
      return this;
    }

    /**
     * Disconnect and teardown after close of subscription.
     *
     * @private
     */

  }, {
    key: '_disconnect',
    value: function _disconnect() {
      if (this._socketHelper) {
        (0, _log.debug)(NAME, '[disconnect:socket]');
        this._socketHelper.tearDown();
      }
      if (this._peerHelper) {
        (0, _log.debug)(NAME, '[disconnect:peer]');
        this._peerHelper.tearDown();
      }
      if (this._sourceHandler) {
        (0, _log.debug)(NAME, '[disconnect:source]');
        this._sourceHandler.disconnect();
      }
      this._connectionClosed = true;
    }

    /**
     * Request to kick off autoplay if setting is flagged.
     *
     * @param {Object} options
     *        The initialization object.
     * @param {Element} view
     *        The target element view that will playback the stream.
     *
     * @private
     */

  }, {
    key: '_playIfAutoplaySet',
    value: function _playIfAutoplaySet(options, view) {
      if (options && view) {
        options.autoplay = _browser2.default.hasAttributeDefined(view.view, 'autoplay');
        if (options.autoplay) {
          this._sourceHandler.attemptAutoplay(options.muteOnAutoplayRestriction);
        }
      }
    }

    /**
     * Request to begin subscription on server over WebSocket.
     *
     * @private
     */

  }, {
    key: '_sendSubscribe',
    value: function _sendSubscribe() {
      (0, _log.debug)(NAME, '[sendsubscribe]');
      this._socketHelper.post({
        subscribe: this._options.streamName,
        requestId: this._options.subscriptionId
      });
    }

    /**
     * Request to initialize the WebRTC-based Subscriber based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */

  }, {
    key: 'init',
    value: function init(options) {
      var _this5 = this;

      var deferred = new _promise.DeferredPromise();
      if (!webrtc.isSupported() || !websocket.isSupported()) {
        deferred.reject('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
      } else {
        this._disconnect();
        this._options = (0, _extends3.default)({}, defaultOptions, options);
        this._options.subscriptionId = this._options.subscriptionId || generateSubscriptionId();

        this._peerHelper = new _webrtcHelperSub2.default(this);
        this._socketHelper = new _socketHelperSub2.default(this);
        var socketPromise = new _promise.DeferredPromise();
        var socketurl = (0, _urlEndpoint.rtcSocketEndpointFromOptions)(this._options, {
          id: this._options.subscriptionId
        });

        socketPromise.promise.then(function () {
          deferred.resolve(_this5);
          _this5._connectionClosed = false;
          _this5.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_SUCCESS, _this5));
        }).catch(function (error) {
          deferred.reject(error);
          _this5.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE, _this5, error));
        });

        this._socketHelper.setUp(socketurl, socketPromise);
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */

  }, {
    key: 'setView',
    value: function setView(view) {
      this._view = view;
      this._viewResolver.resolve(this._view);
      return this;
    }

    /**
     * Request to begin subscribing to a stream.
     *
     * @return {Promise}
     *          The returned `Promise` will resolve or reject on successful start of playback.
     *        There are several processes that occur in order to establish a WebRTC subscription that involve - but are not limited to - ICE communication and assigning of local and remote SDPs on peer connections.
     */

  }, {
    key: 'subscribe',
    value: function subscribe() {
      var _this6 = this;

      this._getViewResolverPromise().then(function (view) {
        _this6._sourceHandler = new _red5proSourceHandlerRtc2.default(view.view, _this6.getType());
        _this6._glomSourceHandlerAPI(_this6._sourceHandler);
        _this6._initHandler(_this6._options, _this6._sourceHandler);
      }).catch(function () {
        // passed up through overarching promise.
      });
      this._getAvailabilityResolverPromise().then(function () {
        _this6._connect(_this6._options.rtcConfiguration, _this6._options.iceServers);
      }).catch(function () {
        // passed up through overarching promise.
      });
      this._setViewIfNotExist(this._view, this._options.mediaElementId);
      this._requestAvailability(this._options.streamName, this._options.streamType);
      return this._getSubscriptionResolverPromise();
    }

    /**
     * Request to stop a subscription.
     * The returned `Promise` will either resolve or reject on successful stop of subscription.
     *
     * @return {Promise}
     */

  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      (0, _log.debug)(NAME, '[unsubscribe]');
      var deferred = new _promise.DeferredPromise();
      this.stop();
      this._disconnect();
      this._mediaStream = undefined;
      deferred.resolve(this);
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_STOP, this));
      return deferred.promise;
    }

    /**
     * Event handler for stream being available on server.
     *
     * @private
     */

  }, {
    key: 'onStreamAvailable',
    value: function onStreamAvailable(receipt) {
      (0, _log.debug)(NAME, '[onstreamavailable]: ' + (0, _stringify2.default)(receipt, null, 2));
      this._availabilityResolver.resolve(this);
    }

    /**
     * Event handler for stream being unavailable on server.
     *
     * @private
     */

  }, {
    key: 'onStreamUnavailable',
    value: function onStreamUnavailable(receipt) {
      (0, _log.debug)(NAME, 'Stream ' + this._options.streamName + ' does not exist.');
      (0, _log.debug)(NAME, '[onstreamunavailable]: ' + (0, _stringify2.default)(receipt, null, 2));
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_INVALID_NAME, this));
      this._availabilityResolver.reject('Stream ' + this._options.streamName + ' does not exist.');
      this._subscriptionResolver.reject('Stream ' + this._options.streamName + ' does not exist.');
      if (!this._options.maintainConnectionOnSubscribeErrors) {
        this._disconnect();
      } else {
        // Reset promise for possible retry.
        this._availabilityResolver = new _promise.DeferredPromise();
        this._subscriptionResolver = new _promise.DeferredPromise();
      }
    }

    /**
     * Event handler for success of SDP being added remotely and locally through the Peer Connection.
     *
     * @param {Object} receipt
     *
     * @private
     */

  }, {
    key: 'onSDPSuccess',
    value: function onSDPSuccess(receipt) {
      (0, _log.debug)(NAME, '[onsdpsuccess]: ' + (0, _stringify2.default)(receipt, null, 2));
    }

    /**
     * Event handler for success in SDP offer.
     *
     * @param {Object} receipt
     *        The optional successful object.
     *
     * @private
     */

  }, {
    key: 'onSDPOffer',
    value: function onSDPOffer(receipt) {
      (0, _log.debug)(NAME, '[onsdpoffer]: ' + (0, _stringify2.default)(receipt, null, 2));
      var sdp = new webrtc.RTCSessionDescription(receipt.sdp);
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.OFFER_END, this));
      this._requestAnswer(sdp);
    }

    /**
     * Event handler for all errors related to SDP through the Peer Connection.
     *
     * @param {Object} receipt
     *        The optional error object.
     *
     * @private
     */

  }, {
    key: 'onSDPError',
    value: function onSDPError(receipt) {
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_FAIL, this, receipt));
      this._subscriptionResolver.reject('Invalid SDP.');
      (0, _log.error)(NAME, '[onsdperror]');
      (0, _log.error)(NAME, receipt);
    }

    /**
     * Event handler for receipt of a `MediaStream`.
     *
     * @param {MediaStream} stream
     *        The stream returned on the Peer Connection.
     *
     * @private
     */

  }, {
    key: 'onAnswerMediaStream',
    value: function onAnswerMediaStream() {
      var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      // eslint-disable-line no-unused-vars
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.ANSWER_END, this));
    }

    /**
     * Event handler on receipt of ICE candidate.
     *
     * @param {Object} candidate
     *        The ICE candidate.
     *
     * @private
     */

  }, {
    key: 'onIceCandidate',
    value: function onIceCandidate(candidate) {
      (0, _log.debug)(NAME, '[onicecandidate]');
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.CANDIDATE_END, this));
      this._sendCandidate(candidate);
    }

    /**
     * Event handler for end of ICE communication (trickle).
     *
     * @param {MediaStream} stream
     *        The `MediaStream` that has become available post-trickle.
     *
     * @private
     */

  }, {
    key: 'onIceCandidateTrickleEnd',
    value: function onIceCandidateTrickleEnd(stream) {
      var _this7 = this;

      (0, _log.debug)(NAME, '[onicetrickleend]');
      this._getViewResolverPromise().then(function (view) {
        view.attachStream(stream);
        _this7._mediaStream = stream;
        _this7.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.ON_ADD_STREAM, _this7, _this7._mediaStream));
      });
    }

    /**
     * Event handler to add ICE candidate to Peer Connection.
     *
     * @param {Object} candidate
     *
     * @private
     */

  }, {
    key: 'onAddIceCandidate',
    value: function onAddIceCandidate(candidate) {
      (0, _log.debug)(NAME, '[onaddicecandidate]');
      this._peerHelper.addIceCandidate(candidate);
    }

    /**
     * Event handler for receipt of empty candidate during ICE negotiation.
     *
     * @private
     */

  }, {
    key: 'onEmptyCandidate',
    value: function onEmptyCandidate() {
      (0, _log.debug)(NAME, '[icecandidatetrickle:empty]');
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.PEER_CANDIDATE_END));
    }

    /**
     * Event handler for completion of peer ice candidate gathering.
     *
     * @private
     */

  }, {
    key: 'onPeerGatheringComplete',
    value: function onPeerGatheringComplete() {
      (0, _log.debug)(NAME, '[icecandidategathering:end]');
      if (this._socketHelper) {
        this._socketHelper.postEndOfCandidates(this._options.streamName);
      }
    }

    /**
     * Event handler for notification of end in ice candidates over the WebSocket.
     *
     * @private
     */

  }, {
    key: 'onSocketIceCandidateEnd',
    value: function onSocketIceCandidateEnd() {
      (0, _log.debug)(NAME, '[onsocketicecandidateend]');
      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.ICE_TRICKLE_COMPLETE, this));
      this._sendSubscribe();
    }

    /**
     * General event handler for errors coming over the WebSocket.
     *
     * @param {String} message
     * @param {Object} detail
     *        Optional additional detail.
     *
     * @private
     */

  }, {
    key: 'onSocketMessageError',
    value: function onSocketMessageError(message) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      (0, _log.error)(NAME, 'Error in stream subscription: ' + message + '.\n[Optional detail]: ' + detail);
      this._subscriptionResolver.reject('Error in stream subscription: ' + message + '.');
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_FAIL, this, message));
    }

    /**
     * Event handler for close on the WebSocket.
     *
     * @param {Event} closeEvent
     *
     * @private
     */

  }, {
    key: 'onSocketClose',
    value: function onSocketClose(closeEvent) {
      (0, _log.debug)(NAME, '[onsocketclose]');
      if (this._peerHelper) {
        this._peerHelper.tearDown();
      }
      this.onConnectionClosed(closeEvent);
    }

    /**
     * Event handler for close of Peer Connection.
     *
     * @param {Event} event
     *
     * @private
     */

  }, {
    key: 'onPeerConnectionClose',
    value: function onPeerConnectionClose(event) {
      (0, _log.debug)(NAME, '[onpeerconnectionclose]');
      if (this._socketHelper) {
        this._socketHelper.tearDown();
      }
      this.onSocketClose(event);
    }

    /**
     * Event handler for `Unpublish` of stream subscribed to. Occurs when a broadcaster stops their stream while this subscription stream is open.
     *
     * @private
     */

  }, {
    key: 'onUnpublish',
    value: function onUnpublish() {
      (0, _log.debug)(NAME, '[onunpublish]');
      if (this._sourceHandler) {
        this._sourceHandler.unpublish();
      }
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAY_UNPUBLISH, this));
    }

    /**
     * Event handler for connection on stream being closed.
     *
     * @private
     */

  }, {
    key: 'onConnectionClosed',
    value: function onConnectionClosed() {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (!this._connectionClosed) {
        (0, _log.debug)(NAME, '[onconnectionclosed]');
        this._disconnect();
        this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECTION_CLOSED, this, event));
      }
    }

    /**
     * Event handler for accepting data through the `send` API of a Publisher. This is the receiving end of the communication channel in which a Publisher can send data to all subscribers.
     *
     * @param {String} methodName
     *        The target method name associated with the communication.
     * @param {Object} data
     *        The data being sent.
     *
     * @private
     */

  }, {
    key: 'onSendReceived',
    value: function onSendReceived(methodName, data) {
      if (methodName === 'onMetaData') {
        this.onMetaData(data);
      } else {
        // environment.invoke(methodName, data)
        this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_SEND_INVOKE, this, {
          methodName: methodName,
          data: data
        }));
      }
    }

    /**
     * Event handler for status notifications of the subscription stream coming over the WebSocket.
     *
     * @param {Object} status
     *        The status object.
     *
     * @private
     */

  }, {
    key: 'onSubscriberStatus',
    value: function onSubscriberStatus(status) {
      (0, _log.debug)(NAME, '[subscriberstatus] - ' + (0, _stringify2.default)(status, null, 2));
      var startResult = subStartRegex.exec(status.message);
      if (startResult && startResult[1] === this._options.streamName) {
        this._subscriptionResolver.resolve(this);
        this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_START, this));
        this._playIfAutoplaySet(this._options, this._view);
      }
    }

    /**
     * Event handler for metadata being sent related to the subscription stream coming over the WebSocket.
     *
     * @param {Object} metadata
     *
     * @private
     */

  }, {
    key: 'onMetaData',
    value: function onMetaData(metadata) {
      if (typeof metadata.orientation !== 'undefined' && metadata.orientation !== this._orientation) {
        this._orientation = metadata.orientation;
        if (this._options.autoLayoutOrientation) {
          (0, _translationUtil.applyOrientation)(this._view.view, parseInt(metadata.orientation, 10), (0, _object.metadataResolutionToObject)(metadata.resolution));
          if (this._sourceHandler) {
            this._sourceHandler.handleOrientationChange(parseInt(metadata.orientation));
          }
        }
        this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.ORIENTATION_CHANGE, this, {
          orientation: parseInt(metadata.orientation),
          viewElement: this._view.view
        }));
      }
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_METADATA, this, metadata));
    }

    /**
     * Request to invoke a method on the Application Adapter related to the `app` config setting.
     *
     * @param {String} methodName
     *        The name of the method to invoke on thw Application Adapter
     * @param {Array} args
     *        The ordered list of arguments to invoke on the method. Do not provide anything if the method takes no arguments.
     * @return {Promise}
     */

  }, {
    key: 'callServer',
    value: function callServer(methodName, args) {
      return this._socketHelper.postAsync({
        callAdapter: {
          method: methodName,
          arguments: args
        }
      });
    }

    /**
     * Enters subscriber into standby mode - keeping connection open but not bothering to consume video or audio.
     */

  }, {
    key: 'enableStandby',
    value: function enableStandby() {
      this._socketHelper.post({
        standby: true
      });
    }

    /**
     * Removes subscriber from standby mode - turning the audio and video back on and consumable after a mute request.
     */

  }, {
    key: 'disableStandby',
    value: function disableStandby() {
      this._socketHelper.post({
        standby: false
      });
    }

    /**
     * Returns the current WebSocket connection helper if established.
     * Used in SharedObject communication.
     *
     * @return {PublisherSocketHelper}
     *
     * @private
     */

  }, {
    key: 'getConnection',
    value: function getConnection() {
      return this._socketHelper;
    }

    /**
     * Returns the current RTCPeerConnection helper if established.
     *
     * @return {RTCPeerConnection}
     */

  }, {
    key: 'getPeerConnection',
    value: function getPeerConnection() {
      return this._peerHelper ? this._peerHelper.connection : undefined;
    }

    /**
     * Returns the `MediaStream` instance if generated through `getUserMedia` and exists for broadcast.
     *
     * @return {MediaStream}
     */

  }, {
    key: 'getMediaStream',
    value: function getMediaStream() {
      return this._mediaStream;
    }

    /**
     * Returns reference to playback controls if available.
     *
     * @return {PlaybackControls}
     */

  }, {
    key: 'getControls',
    value: function getControls() {
      return this._sourceHandler ? this._sourceHandler.getControls() : undefined;
    }

    /**
     * Returns the target view Element.
     *
     * @return {Element}
     */

  }, {
    key: 'getPlayer',
    value: function getPlayer() {
      return this._view.view;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */

  }, {
    key: 'getOptions',
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the type of implementation: `RTC`.
     *
     * @return {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return _playback3.PlaybackTypes.RTC.toUpperCase();
    }
  }]);
  return RTCSubscriber;
}(_controls.PlaybackController);

exports.default = RTCSubscriber;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(61);

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = __webpack_require__(29);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _red5proSourceHandlerRtmp = __webpack_require__(131);

var _red5proSourceHandlerRtmp2 = _interopRequireDefault(_red5proSourceHandlerRtmp);

var _playback = __webpack_require__(43);

var _playback2 = _interopRequireDefault(_playback);

var _controls = __webpack_require__(24);

var _event = __webpack_require__(15);

var _playback3 = __webpack_require__(34);

var _state = __webpack_require__(35);

var _promise3 = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'RTMPSubcriber';

var defaultOptions = {
  protocol: 'rtmp',
  port: 1935,
  width: 320, // media playback
  height: 240, // media playback
  embedWidth: '100%', // DOM display style
  embedHeight: '100%', // DOM display style
  minFlashVersion: '10.0.0',
  swf: 'lib/red5pro/red5pro-subscriber.swf',
  swfobjectURL: 'lib/swfobject/swfobject.js',
  productInstallUrl: 'lib/swfobject/playerProductInstall.swf',
  mediaElementId: 'red5pro-subscriber',
  // with Autoscale enabled server only =>
  useAdaptiveBitrateController: false,
  abrVariants: undefined,
  abrVariantUpgradeSettings: {
    minimumDowngradePlaybackSpan: 10000, // Amount of time playback needs to exceed between playback and downgrade in order to be eligible for upgrade
    upgrade: [{
      level: 1,
      retryTimeout: 0
    }, {
      level: 2,
      retryTimeout: 10000 // If on level 2, in 10 seconds after playback, try and switch up.
    }, {
      level: 3,
      retryTimeout: 20000 // If on level 3, in 20 seconds after playback, try and switch up.
    }]
  }

  /**
   * Main entry for Flash-based Subscriber over RTMP.
   *
   * @extends EventEmitter
   * @extends SubscriberPlaybackController
   */
};
var RTMPSubscriber = function (_PlaybackController) {
  (0, _inherits3.default)(RTMPSubscriber, _PlaybackController);

  function RTMPSubscriber() {
    (0, _classCallCheck3.default)(this, RTMPSubscriber);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RTMPSubscriber.__proto__ || (0, _getPrototypeOf2.default)(RTMPSubscriber)).call(this));

    _this._options = undefined;
    _this._view = undefined;
    _this._sourceHandler = undefined;
    _this._elementId = undefined;
    _this._embedPromise = undefined;
    _this._getEmbedPromise().then(function () {
      _this.onEmbedComplete();
    }).catch(function (err) {
      return _this.onEmbedFailure(err);
    });
    _this._viewResolver = new _promise3.DeferredPromise();
    _this._subscriptionResolver = new _promise3.DeferredPromise();
    return _this;
  }

  (0, _createClass3.default)(RTMPSubscriber, [{
    key: '_getViewResolverPromise',
    value: function _getViewResolverPromise() {
      return this._viewResolver.promise;
    }
  }, {
    key: '_getSubscriptionResolverPromise',
    value: function _getSubscriptionResolverPromise() {
      return this._subscriptionResolver.promise;
    }
  }, {
    key: '_getEmbedPromise',
    value: function _getEmbedPromise() {
      this._embedPromise = _promise3.Future.createIfNotExist(this._embedPromise);
      return this._embedPromise.promise;
    }

    /**
     * Gloms the Playback Controls API onto this instance to provide ease in use.
     *
     * @param {Object} handler
     *        The method request handler to bind and forward calls on.
     *
     * @private
     */

  }, {
    key: '_glomSourceHandlerAPI',
    value: function _glomSourceHandlerAPI(handler) {
      var _this2 = this;

      /*
       * || Note ||
       * play() is not glommed as it needs to be handled differently.
       */

      this.pause = handler.pause.bind(handler);
      this.resume = handler.resume.bind(handler);
      this.stop = handler.stop.bind(handler);
      this.mute = handler.mute.bind(handler);
      this.unmute = handler.unmute.bind(handler);
      this.setVolume = handler.setVolume.bind(handler);
      this.seekTo = handler.seekTo.bind(handler);
      this.toggleFullScreen = handler.toggleFullScreen.bind(handler);

      // Adaptive Bitrate Controller - Autoscale enabled only.
      this.setABRLevel = handler.setABRLevel.bind(handler);
      this.setABRVariants = handler.setABRVariants.bind(handler);
      this.stopABRController = handler.stopABRController.bind(handler);
      this.startABRController = handler.startABRController.bind(handler);
      this.setABRVariantUpgradeSettings = handler.setABRVariantUpgradeSettings.bind(handler);

      handler.on('*', function (event) {
        _this2.trigger(new _event.SubscriberEvent(event.type, _this2, event.data));
      });
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and subscribers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */

  }, {
    key: '_setViewIfNotExist',
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new _playback2.default(mediaElementId);
        view.attachSubscriber(this);
      }
    }

    /**
     * Define global function handlers for ExternalInterface to invoke for API communication.
     *
     * @private
     */

  }, {
    key: '_establishExtIntHandlers',
    value: function _establishExtIntHandlers(id) {
      var _this3 = this;

      (0, _log.debug)(NAME, 'Subscriber ID provided to client: (' + id + ').');
      var invokeFn = function invokeFn(label) {
        return ['subscriber', label, id.split('-').join('_')].join('_');
      };
      window[invokeFn('r5proConnectClosed')] = function () {
        return _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECTION_CLOSED, _this3));
      };
      window[invokeFn('r5proConnectSuccess')] = function () {
        return _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_SUCCESS, _this3));
      };
      window[invokeFn('r5proConnectFailure')] = function () {
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE, _this3));
      };
      window[invokeFn('r5proSubscribeStop')] = function () {
        return _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_STOP, _this3));
      };
      window[invokeFn('r5proSubscribeMetadata')] = function (metadata) {
        return _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_METADATA, _this3, JSON.parse(metadata)));
      };
      window[invokeFn('r5proSubscribeUnpublish')] = function () {
        return _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAY_UNPUBLISH, _this3));
      };
      window[invokeFn('r5proSubscribeSendInvoke')] = function (payload) {
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_SEND_INVOKE, _this3, typeof payload === 'string' ? JSON.parse(payload) : payload));
      };
      window[invokeFn('r5proSubscribePlayRequest')] = function () {
        _this3.play();
      };
      window[invokeFn('r5proSubscribeStart')] = function () {
        _this3._subscriptionResolver.resolve(_this3);
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_START, _this3));
      };
      window[invokeFn('r5proSubscribeInvalidName')] = function () {
        _this3._subscriptionResolver.reject('NetStream.Play.StreamNotFound', _this3);
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_INVALID_NAME, _this3));
      };
      window[invokeFn('r5proSubscribeFail')] = function () {
        _this3._subscriptionResolver.reject('NetStream.Failed', _this3);
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_FAIL, _this3));
      };
      window[invokeFn('r5proSubscribeVolumeChange')] = function (payload) {
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.VOLUME_CHANGE, _this3, {
          volume: JSON.parse(payload).volume
        }));
      };
      window[invokeFn('r5proSubscribePlaybackTimeChange')] = function (payload) {
        var data = JSON.parse(payload);
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_TIME_UPDATE, _this3, {
          time: data.value,
          duration: data.duration
        }));
      };
      window[invokeFn('r5proSubscribePlaybackStateChange')] = function (payload) {
        var code = JSON.parse(payload).code;
        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, _this3, {
          code: code,
          state: _state.PlaybackStateReadable[code]
        }));
      };
      window[invokeFn('r5proSubscribeABRLevelChange')] = function (payload) {
        var data = JSON.parse(payload);
        var level = data.level,
            stream = data.stream;

        var settings = JSON.parse(decodeURIComponent(stream));
        _this3.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.ABR_LEVEL_CHANGE, _this3, {
          level: level,
          stream: settings
        }));
      };
    }

    /**
     * Request to initialize the HLS-based Subscriber based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */

  }, {
    key: 'init',
    value: function init(options) {
      var _this4 = this;

      var deferred = new _promise3.DeferredPromise();
      var version = options.minFlashVersion || defaultOptions.minFlashVersion;
      if (!_browser2.default.supportsFlashVersion(version)) {
        (0, _log.warn)(NAME, 'Could not resolve RTMPSubscriber instance. Requires minimum Flash Player install of ' + version + '.');
        deferred.reject('Could not resolve RTMPSubscriber instance. Requires minimum Flash Player install of ' + version + '.');
      } else {
        this._options = (0, _extends3.default)({}, defaultOptions, options);
        var establishSourceHandler = function establishSourceHandler() {
          _this4._getViewResolverPromise().then(function (view) {
            _this4._sourceHandler = new _red5proSourceHandlerRtmp2.default(_this4, view.view, _this4.getType());
            _this4._glomSourceHandlerAPI(_this4._sourceHandler);
            if (_this4._options) {
              var dfd = _this4._embedPromise;
              _this4._sourceHandler.addSource(_this4._elementId, _this4._options).then(function (subscriberId) {
                _this4._establishExtIntHandlers(subscriberId);
                dfd.resolve(_this4);
              }).catch(function (err) {
                return dfd.reject(err);
              });
            }
          });
        };

        try {
          _browser2.default.injectScript(this._options.swfobjectURL).then(function () {
            var embedDfd = _this4._embedPromise;
            (0, _log.debug)(NAME, 'SWFObject embedded.');
            if (_this4._sourceHandler) {
              _this4._sourceHandler.addSource(_this4._elementId, _this4._options).then(function (subscriberId) {
                _this4._establishExtIntHandlers(subscriberId);
                embedDfd.resolve(_this4);
              }).catch(function (err) {
                embedDfd.reject(err);
              });
              return _this4._getEmbedPromise();
            }
            establishSourceHandler();
            return true;
          }).then(function () {
            _this4._setViewIfNotExist(_this4._view, _this4._options.mediaElementId);
            deferred.resolve(_this4);
          }).catch(function (err) {
            (0, _log.error)(NAME, 'Could not embed Flash-based RTMP Player. Reason: ' + err);
            if (_this4._sourceHandler) {
              _this4._sourceHandler.disconnect();
            }
            deferred.reject(err);
            _this4.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_FAILURE, _this4));
          });
        } catch (e) {
          deferred.reject('Could not inject Flash-based Player into the page. Reason: ' + e.message);
          this.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_FAILURE, this));
        }
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */

  }, {
    key: 'setView',
    value: function setView(view, elementId) {
      this._view = view;
      this._elementId = elementId;
      this._viewResolver.resolve(this._view);
      return this;
    }

    /**
     * Request to begin subscribing to a stream.
     *
     * @return {Promise}
     *          The returned `Promise` will resolve or reject on successful start of playback.
     */

  }, {
    key: 'subscribe',
    value: function subscribe() {
      return this._getSubscriptionResolverPromise();
    }

    /**
     * Request to stop a subscription.
     * The returned `Promise` will either resolve or reject on successful stop of subscription.
     *
     * @return {Promise}
     */

  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      var _this5 = this;

      (0, _log.debug)(NAME, '[unsubscribe]');
      var cb = function cb(resolve, reject) {
        try {
          _this5._sourceHandler.disconnect();
          resolve();
        } catch (e) {
          reject(e.message);
        }
      };
      return new _promise2.default(cb);
    }

    /**
     * Request to start playing the stream.
     */

  }, {
    key: 'play',
    value: function play() {
      var _this6 = this;

      (0, _log.debug)(NAME, '[play]');
      this._getEmbedPromise().then(function () {
        _this6._sourceHandler.play();
      });
    }

    /**
     * Event handler for completion of embedding Flash element into page.
     *
     * @private
     */

  }, {
    key: 'onEmbedComplete',
    value: function onEmbedComplete() {
      (0, _log.debug)(NAME, '[embed:complete]');
      this.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_SUCCESS, this));
    }

    /**
     * Event handler for failure in embedding Flash element into page.
     *
     * @private
     */

  }, {
    key: 'onEmbedFailure',
    value: function onEmbedFailure(err) {
      (0, _log.debug)(NAME, '[embed:failure] - ' + err);
      this.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_FAILURE, this));
    }

    /**
     * Returns connection handler for playback.
     * Used in SharedObject communication.
     *
     * @return {Object}
     *
     * @private
     */

  }, {
    key: 'getConnection',
    value: function getConnection() {
      return this._sourceHandler;
    }

    /**
     * Returns reference to playback controls if available.
     *
     * @return {PlaybackControls}
     */

  }, {
    key: 'getControls',
    value: function getControls() {
      return this._sourceHandler ? this._sourceHandler.getControls() : undefined;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */

  }, {
    key: 'getOptions',
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the target view Element.
     *
     * @return {Element}
     */

  }, {
    key: 'getPlayer',
    value: function getPlayer() {
      return this._sourceHandler ? this._sourceHandler.getEmbeddedView() : undefined;
    }

    /**
     * Returns the type of implementation: `RTMP`.
     *
     * @return {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return _playback3.PlaybackTypes.RTMP.toUpperCase();
    }
  }]);
  return RTMPSubscriber;
}(_controls.PlaybackController);

exports.default = RTMPSubscriber;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _isFinite = __webpack_require__(90);

var _isFinite2 = _interopRequireDefault(_isFinite);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _translationUtil = __webpack_require__(81);

var _object = __webpack_require__(28);

var _controls = __webpack_require__(24);

var _state = __webpack_require__(35);

var _event = __webpack_require__(15);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'HLSSourceHandler';

/**
 * Source Handler for HLS-based Subscribers, which serves as a Presentation Controller between view and subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 *
 * @private
 */

var HLSSourceHandler = function (_PlaybackController) {
  (0, _inherits3.default)(HLSSourceHandler, _PlaybackController);

  function HLSSourceHandler(media, type) {
    (0, _classCallCheck3.default)(this, HLSSourceHandler);

    var _this = (0, _possibleConstructorReturn3.default)(this, (HLSSourceHandler.__proto__ || (0, _getPrototypeOf2.default)(HLSSourceHandler)).call(this));

    _this.media = media;
    _this.clone = _this.media.cloneNode(true);
    _this.parent = _this.media.parentNode;
    _this.holder = _this._determineHolder(media);
    _this.playerType = type;
    _this._isVOD = false;
    _this._controls = undefined;
    _this._playbackNotificationCenter = _this.media;
    _browser2.default.onFullScreenStateChange(_this._handleFullScreenChange.bind(_this));
    return _this;
  }

  /**
   * Established DOM Element order for playback.
   *
   * @param {Element} media
   *        The target media element: e.g., `video` or `audio`.
   *
   * @private
   */


  (0, _createClass3.default)(HLSSourceHandler, [{
    key: '_determineHolder',
    value: function _determineHolder(media) {
      if (media.parentNode.classList.contains('red5pro-media-container')) {
        return media.parentNode;
      } else {
        var parent = media.parentNode;
        var div = _browser2.default.createElement('div');
        div.classList.add('red5pro-media-container');
        parent.insertBefore(div, media);
        parent.removeChild(media);
        div.appendChild(media);
        return div;
      }
    }

    /**
     * Clean up of DOM Element order upon stop of playback.
     *
     * @private
     */

  }, {
    key: '_cleanUp',
    value: function _cleanUp() {
      // Return to prior DOM manipulation.
      var el = this.media;
      var elParent = el.parentNode;
      var mediaHolder = this.holder;
      if (elParent) {
        elParent.removeChild(el);
        // The object parent could be a wrapper child in the original parent element.
        if (elParent !== this.parent) {
          elParent.parentNode.removeChild(elParent);
          mediaHolder = this.parent;
        }
      } else {
        try {
          el.remove();
        } catch (e) {
          (0, _log.warn)(NAME, 'Issue in DOM cleanup of HLS video object: ' + e.message);
        }
      }
      this.media = this.clone.cloneNode(true);
      mediaHolder.appendChild(this.media);
      if (this._controls) {
        this._controls.detach();
      }
    }

    /**
     * Assigns and handlers event notificiations coming from the media notifier (e.g., `video` or `audio` element).
     *
     * @param {Object} notifier
     *
     * @private
     */

  }, {
    key: '_addPlaybackHandlers',
    value: function _addPlaybackHandlers(notifier) {
      var _this2 = this;

      var controls = this.getControls();
      var hasControls = typeof controls !== 'undefined';

      notifier.oncanplay = function () {
        if (controls) {
          controls.enable(true);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.AVAILABLE,
          state: _state.PlaybackStateReadable[_state.PlaybackState.AVAILABLE]
        }));
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.volume
        }));
      };
      notifier.ondurationchange = function (event) {
        // eslint-disable-line no-unused-vars
        if (!isNaN(notifier.duration) && (0, _isFinite2.default)(notifier.duration)) {
          _this2.isVOD = true;
        }
        if (hasControls) {
          controls.setPlaybackDuration(notifier.duration);
        }
      };
      notifier.onended = function () {
        (0, _log.debug)(NAME, '[videoelement:onended]');
        if (hasControls) {
          controls.setState(_state.PlaybackState.IDLE);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.IDLE,
          state: _state.PlaybackStateReadable[_state.PlaybackState.IDLE]
        }));
      };
      notifier.ontimeupdate = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls) {
          controls.setSeekTime(notifier.currentTime, self.isVOD ? notifier.duration : undefined);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: notifier.currentTime,
          duration: notifier.duration
        }));
      };
      notifier.onseeked = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeked.')
      };
      notifier.onseeking = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeking.')
      };
      notifier.onplay = function () {
        if (hasControls) {
          controls.setState(_state.PlaybackState.PLAYING);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.PLAYING,
          state: _state.PlaybackStateReadable[_state.PlaybackState.PLAYING]
        }));
      };
      notifier.onpause = function () {
        if (hasControls) {
          controls.setState(_state.PlaybackState.PAUSED);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.PAUSED,
          state: _state.PlaybackStateReadable[_state.PlaybackState.PAUSED]
        }));
      };
      notifier.onvolumechange = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls && controls.getVolume() !== _this2.media.volume) {
          controls.setVolume(_this2.media.volume);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.muted ? 0 : notifier.volume
        }));
      };
      // for debugging purposes.
      notifier.onencrypted = function () {
        (0, _log.debug)(NAME, '[videoelement:event] encrypted');
      };
      notifier.onemptied = function () {
        (0, _log.debug)(NAME, '[videoelement:event] emptied');
      };
      notifier.onloadeddata = function () {
        (0, _log.debug)(NAME, '[videoelement:event] loadeddata');
      };
      notifier.onloadedmetadata = function () {
        (0, _log.debug)(NAME, '[videoelement:event] loadedmetadata');
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_START, undefined, {}));
      };
      notifier.onloadstart = function () {
        (0, _log.debug)(NAME, '[videoelement:event] loadedstart');
      };
      notifier.onstalled = function () {
        (0, _log.debug)(NAME, '[videoelement:event] stalled');
      };
      notifier.onsuspend = function () {
        (0, _log.debug)(NAME, '[videoelement:event] suspend');
      };
      notifier.onwaiting = function () {
        (0, _log.debug)(NAME, '[videoelement:event] waiting');
      };
      //    notifier.onprogress = () => { debug(NAME, '[videoelement:event] progress. Played: ' + notifier.played.length + ', Buffered: ' + notifier.buffered.length + '.') }
    }

    /**
     * Event handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */

  }, {
    key: '_handleFullScreenChange',
    value: function _handleFullScreenChange(isFullScreen) {
      if (isFullScreen) {
        this.holder.classList.add('red5pro-media-container-full-screen');
        this.media.classList.add('red5pro-media-container-full-screen');
      } else {
        this.holder.classList.remove('red5pro-media-container-full-screen');
        this.media.classList.remove('red5pro-media-container-full-screen');
      }
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, undefined, isFullScreen));
    }

    /**
     * Define the source element on the HLS playback element.
     *
     * @param {String} url
     *        The playback endpoint URL.
     * @param {String} type
     *        The mime type of the playback stream.
     * @param {Object} options
     *        The initialization configuration map.
     *
     * @private
     */

  }, {
    key: '_embedMediaSource',
    value: function _embedMediaSource(url, type, options) {
      // eslint-disable-line no-unused-vars
      var self = this;
      var deferred = new _promise.DeferredPromise();
      try {
        var source = _browser2.default.createElement('source');
        source.type = type;
        source.src = url;
        if (this.media.firstChild) {
          this.media.insertBefore(source, this.media.firstChild);
        } else {
          this.media.appendChild(source);
        }
        self.orientation = 0;
        _browser2.default.onOrientationMetadata(this.media, function (metadata) {
          (0, _log.debug)(NAME, 'Metadata received: ' + (0, _stringify2.default)(metadata, null, 2));
          if (self.orientation !== metadata.orientation) {
            self.orientation = metadata.orientation;
            if (options.autoLayoutOrientation) {
              (0, _translationUtil.applyOrientation)(self.media, parseInt(metadata.orientation, 10), (0, _object.metadataResolutionToObject)(metadata.resolution));
              self.handleOrientationChange(parseInt(self.orientation));
            }
            self.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.ORIENTATION_CHANGE, undefined, {
              orientation: parseInt(self.orientation),
              viewElement: self.media
            }));
            self.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_METADATA, undefined, metadata));
          }
          self.orientation = metadata.orientation;
        });
        deferred.resolve();
      } catch (e) {
        deferred.reject(e.message);
      }
      return deferred.promise;
    }

    /**
     * Request to setup the presentation of a playback stream using HLS.
     *
     * @param {String} url
     *        The endpoint URL for playback.
     * @param {String} type
     *        The mime type for playback.
     * @param {Object} options
     *        The initialization configuration map.
     *
     * @returns {Promise}
     */

  }, {
    key: 'addSource',
    value: function addSource(url, type, options) {
      var _this3 = this;

      (0, _log.debug)(NAME, '[addsource]');
      this.holder = this._determineHolder(this.media);
      var deferred = new _promise.DeferredPromise();
      var hasDefinedControls = options.controls;
      var isMuted = _browser2.default.hasAttributeDefined(this.media, 'muted');
      var isAutoplay = _browser2.default.hasAttributeDefined(this.media, 'autoplay');
      // Will handle autoplay explicitly to capture issues with browser restrictions and send notifications.
      if (!isMuted) {
        this.media.setAttribute('autoplay', false);
      }
      var usePlaybackControls = _browser2.default.hasAttributeDefined(this.media, 'controls') && _browser2.default.hasClassDefined(this.media, 'red5pro-media');
      this._embedMediaSource(url, type, options).then(function () {
        if (hasDefinedControls || usePlaybackControls) {
          if (hasDefinedControls) {
            _this3._controls = options.controls;
          } else {
            _this3._controls = new _controls.PlaybackControlsImpl(_this3, _this3.holder);
          }
          _this3.media.controls = false;
          _this3._controls.setAsVOD(_this3.isVOD);
          _this3._controls.setMutedState(isMuted);
        }
        _this3._addPlaybackHandlers(_this3._playbackNotificationCenter);
        if (isAutoplay) {
          _this3.attemptAutoplay(options.muteOnAutoplayRestriction);
        }
        deferred.resolve();
      }).catch(function (e) {
        return deferred.reject(e);
      });
      return deferred.promise;
    }

    /**
     * Request to connect to stream.
     */

  }, {
    key: 'connect',
    value: function connect() {
      (0, _log.debug)(NAME, '[connect]');
    }
  }, {
    key: 'attemptAutoplay',
    value: function attemptAutoplay() {
      var _this4 = this;

      var muteOnAutoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.play().catch(function (e) {
        if (muteOnAutoplay) {
          _this4.mute();
          _this4.play().then(function () {
            _this4.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.AUTO_PLAYBACK_MUTED, undefined, { element: _this4.media }));
          }).catch(function (err) {
            _this4.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
              error: err.message ? err.message : err,
              element: _this4.media
            }));
          });
        } else {
          _this4.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
            error: e.message ? e.message : e,
            element: _this4.media
          }));
        }
      });
    }
  }, {
    key: 'play',
    value: function play() {
      (0, _log.debug)(NAME, '[videoelement:action] play');
      var deferred = new _promise.DeferredPromise();
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            (0, _log.debug)(NAME, '[videoelement:action] play (START)');
            deferred.resolve();
          }).catch(deferred.reject);
        } else {
          (0, _log.debug)(NAME, '[videoelement:action] play (START)');
          deferred.resolve();
        }
      } catch (e) {
        (0, _log.error)(NAME, '[videoelement:action] play (FAULT) - ' + e.message);
        deferred.reject(e);
      }
      return deferred.promise;
    }
  }, {
    key: 'pause',
    value: function pause() {
      (0, _log.debug)(NAME, '[videoelement:action] pause');
      try {
        this.media.pause();
      } catch (e) {
        (0, _log.debug)(NAME, '[videoelement:action] pause (FAULT) - ' + e.message);
      }
    }
  }, {
    key: 'resume',
    value: function resume() {
      (0, _log.debug)(NAME, '[videoelement:action] resume');
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            return (0, _log.debug)(NAME, '[videoelement:action] play (START)');
          }).catch(function (err) {
            return (0, _log.error)(NAME, '[videoelement:action] play (FAULT) ' + (err.message ? err.message : err));
          });
        }
      } catch (e) {
        (0, _log.error)(NAME, '[videoelement:action] resume (FAULT) - ' + e.message);
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      try {
        this.media.stop();
      } catch (e) {
        // ok.
      }
    }
  }, {
    key: 'mute',
    value: function mute() {
      this.media.muted = true;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(true);
      }
    }
  }, {
    key: 'unmute',
    value: function unmute() {
      this.media.muted = false;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(false);
      }
    }
  }, {
    key: 'setVolume',
    value: function setVolume(value) {
      this.unmute();
      this.media.volume = value;
    }
  }, {
    key: 'seekTo',
    value: function seekTo(percentage) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      this.media.currentTime = duration ? percentage * duration : percentage;
    }
  }, {
    key: 'toggleFullScreen',
    value: function toggleFullScreen() {
      try {
        _browser2.default.toggleFullScreen(this.holder);
      } catch (e) {
        throw e;
        // nada.
      }
    }

    /**
     * Notification of current stream being in an unpublished state.
     * The stream enters an unpublished state when the broadcaster stop the stream and the subscriber is still connected.
     */

  }, {
    key: 'unpublish',
    value: function unpublish() {
      try {
        this.stop();
        this.media.onended.call(this.media);
      } catch (e) {
        // nada.
      }
    }

    /**
     * Request to disconnect playback.
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      this._cleanUp();
    }

    /**
     * Responder to change in orientation received through metadata.
     *
     * @param {Number} orientation
     *        The orientation value.
     *
     * @private
     */

  }, {
    key: 'handleOrientationChange',
    value: function handleOrientationChange(orientation) {
      if (this._controls && orientation % 180 !== 0) {
        this.holder.classList.add('red5pro-media-background');
        this.media.classList.remove('red5pro-media-background');
      }
    }

    /*
     * || SHARED OBJECT INTEGRATION NOT AVAILABLE FOR HLS PLAYBACK ||
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'addSharedObjectResponseHandler',
    value: function addSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'removeSharedObjectResponseHandler',
    value: function removeSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'sendToSharedObject',
    value: function sendToSharedObject(name, callName, message) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'sendPropertyToSharedObject',
    value: function sendPropertyToSharedObject(name, key, value) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'getRemoteSharedObject',
    value: function getRemoteSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'connectToSharedObject',
    value: function connectToSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'closeSharedObject',
    value: function closeSharedObject(sharedObjectName) {}

    /**
     * Returns playback controls if available.
     *
     * @returns {PlaybackControls}
     */

  }, {
    key: 'getControls',
    value: function getControls() {
      return this._controls;
    }

    /**
     * Returns the subscriber type associated with this controller.
     *
     * @returns {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return this.playerType;
    }

    /**
     * Returns flag of video being recognized as VOD (Video On Demand).
     *
     * @returns {Boolean}
     */

  }, {
    key: 'isVOD',
    get: function get() {
      return this._isVOD;
    }

    /**
     * Sets flag of video being considered as VOD (Video On Demand).
     *
     * @param {Boolean} value
     */
    ,
    set: function set(value) {
      this._isVOD = value;
      if (this._controls) {
        this._controls.setAsVOD(value);
      }
    }
  }]);
  return HLSSourceHandler;
}(_controls.PlaybackController);

exports.default = HLSSourceHandler;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isFinite = __webpack_require__(90);

var _isFinite2 = _interopRequireDefault(_isFinite);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _controls = __webpack_require__(24);

var _state = __webpack_require__(35);

var _event = __webpack_require__(15);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'RTCSourceHandler';

/**
 * Source Handler for WebRTC-based Subscribers, which serves as a Presentation Controller between view and subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 *
 * @private
 */

var RTCSourceHandler = function (_PlaybackController) {
  (0, _inherits3.default)(RTCSourceHandler, _PlaybackController);

  function RTCSourceHandler(media, type) {
    (0, _classCallCheck3.default)(this, RTCSourceHandler);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RTCSourceHandler.__proto__ || (0, _getPrototypeOf2.default)(RTCSourceHandler)).call(this));

    _this.media = media;
    _this.clone = _this.media.cloneNode(true);
    _this.parent = _this.media.parentNode;
    _this.holder = _this._determineHolder(_this.media);
    _this.playerType = type;
    _this._isVOD = false;
    _this._controls = undefined;
    _this._playbackNotificationCenter = _this.media;
    _browser2.default.onFullScreenStateChange(_this._handleFullScreenChange.bind(_this));
    return _this;
  }

  /**
   * Established DOM Element order for playback.
   *
   * @param {Element} media
   *        The target media element: e.g., `video` or `audio`.
   *
   * @private
   */


  (0, _createClass3.default)(RTCSourceHandler, [{
    key: '_determineHolder',
    value: function _determineHolder(media) {
      if (media.parentNode.classList.contains('red5pro-media-container')) {
        return media.parentNode;
      } else {
        var parent = media.parentNode;
        var div = _browser2.default.createElement('div');
        div.classList.add('red5pro-media-container');
        parent.insertBefore(div, media);
        parent.removeChild(media);
        div.appendChild(media);
        return div;
      }
    }

    /**
     * Established DOM Element order for playback.
     *
     * @param {Element} media
     *        The target media element: e.g., `video` or `audio`.
     *
     * @private
     */

  }, {
    key: '_cleanUp',
    value: function _cleanUp() {
      // Return to prior DOM manipulation.
      var el = this.media;
      var elParent = el.parentNode;
      var mediaHolder = this.holder;
      if (elParent) {
        elParent.removeChild(el);
        // The object parent could be a wrapper child in the original parent element.
        if (elParent !== this.parent) {
          elParent.parentNode.removeChild(elParent);
          mediaHolder = this.parent;
        }
      } else {
        try {
          el.remove();
        } catch (e) {
          (0, _log.warn)(NAME, 'Issue in DOM cleanup of WebRTC video object: ' + e.message);
        }
      }
      this.media = this.clone.cloneNode(true);
      mediaHolder.appendChild(this.media);
      if (this._controls) {
        this._controls.detach();
      }
    }

    /**
     * Assigns and handlers event notificiations coming from the media notifier (e.g., `video` or `audio` element).
     *
     * @param {Object} notifier
     *
     * @private
     */

  }, {
    key: '_addPlaybackHandlers',
    value: function _addPlaybackHandlers(notifier) {
      var _this2 = this;

      var controls = this.getControls();
      var hasControls = typeof controls !== 'undefined';

      notifier.oncanplay = function () {
        (0, _log.debug)(NAME, '[videoelement:event] canplay');
        if (controls) {
          controls.enable(true);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.AVAILABLE,
          state: _state.PlaybackStateReadable[_state.PlaybackState.AVAILABLE]
        }));
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.volume
        }));
      };
      notifier.ondurationchange = function (event) {
        // eslint-disable-line no-unused-vars
        (0, _log.debug)(NAME, '[videoelement:event] durationchange');
        if (!isNaN(notifier.duration) && (0, _isFinite2.default)(notifier.duration)) {
          _this2.isVOD = true;
        }
        if (hasControls) {
          controls.setPlaybackDuration(notifier.duration);
        }
      };
      notifier.onended = function () {
        (0, _log.debug)(NAME, '[videoelement:event] ended');
        if (hasControls) {
          controls.setState(_state.PlaybackState.IDLE);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.IDLE,
          state: _state.PlaybackStateReadable[_state.PlaybackState.IDLE]
        }));
      };
      notifier.ontimeupdate = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls) {
          controls.setSeekTime(notifier.currentTime, self.isVOD ? notifier.duration : undefined);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: notifier.currentTime,
          duration: notifier.duration
        }));
      };
      notifier.onseeked = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeked.')
      };
      notifier.onseeking = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeking.')
      };
      notifier.onplay = function () {
        (0, _log.debug)(NAME, '[videoelement:event] play');
        if (hasControls) {
          controls.setState(_state.PlaybackState.PLAYING);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.PLAYING,
          state: _state.PlaybackStateReadable[_state.PlaybackState.PLAYING]
        }));
      };
      notifier.onpause = function () {
        (0, _log.debug)(NAME, '[videoelement:event] pause');
        if (hasControls) {
          controls.setState(_state.PlaybackState.PAUSED);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.PAUSED,
          state: _state.PlaybackStateReadable[_state.PlaybackState.PAUSED]
        }));
      };
      notifier.onvolumechange = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls && controls.getVolume() !== _this2.media.volume) {
          controls.setVolume(_this2.media.volume);
        }
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.muted ? 0 : notifier.volume
        }));
      };
      // for debugging purposes.
      notifier.onencrypted = function () {
        (0, _log.debug)(NAME, '[videoelement:event] encrypted');
      };
      notifier.onemptied = function () {
        (0, _log.debug)(NAME, '[videoelement:event] emptied');
      };
      notifier.onloadeddata = function () {
        (0, _log.debug)(NAME, '[videoelement:event] loadeddata');
      };
      notifier.onloadedmetadata = function () {
        (0, _log.debug)(NAME, '[videoelement:event] loadedmetadata');
      };
      notifier.onloadstart = function () {
        (0, _log.debug)(NAME, '[videoelement:event] loadedstart');
      };
      notifier.onstalled = function () {
        (0, _log.debug)(NAME, '[videoelement:event] stalled');
      };
      notifier.onsuspend = function () {
        (0, _log.debug)(NAME, '[videoelement:event] suspend');
      };
      notifier.onwaiting = function () {
        (0, _log.debug)(NAME, '[videoelement:event] waiting');
      };
      //    notifier.onprogress = () => { debug(NAME, '[videoelement:event] progress. Played: ' + notifier.played.length + ', Buffered: ' + notifier.buffered.length + '.') }
    }

    /**
     * Event handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */

  }, {
    key: '_handleFullScreenChange',
    value: function _handleFullScreenChange(isFullScreen) {
      if (isFullScreen) {
        this.holder.classList.add('red5pro-media-container-full-screen');
        this.media.classList.add('red5pro-media-container-full-screen');
      } else {
        this.holder.classList.remove('red5pro-media-container-full-screen');
        this.media.classList.remove('red5pro-media-container-full-screen');
      }
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, undefined, isFullScreen));
    }

    /**
     * Request to setup the presentation of a playback stream using WebRTC.
     *
     * @param {Object} options
     *        The initialization configuration map.
     *
     * @returns {Promise}
     */

  }, {
    key: 'addSource',
    value: function addSource(options) {
      (0, _log.debug)(NAME, '[addsource]');
      this.holder = this._determineHolder(this.media);
      var deferred = new _promise.DeferredPromise();
      var hasDefinedControls = options.controls;
      var isMuted = _browser2.default.hasAttributeDefined(this.media, 'muted');
      var usePlaybackControls = _browser2.default.hasAttributeDefined(this.media, 'controls') && _browser2.default.hasClassDefined(this.media, 'red5pro-media');
      if (hasDefinedControls || usePlaybackControls) {
        if (hasDefinedControls) {
          this._controls = options.controls;
        } else {
          this._controls = new _controls.PlaybackControlsImpl(this, this.holder);
        }
        this.media.controls = false;
        this._controls.setAsVOD(this.isVOD);
        this._controls.setMutedState(isMuted);
      }
      this._addPlaybackHandlers(this._playbackNotificationCenter);
      deferred.resolve();
      return deferred.promise;
    }

    /**
     * Request to connect to stream.
     */

  }, {
    key: 'connect',
    value: function connect() {
      (0, _log.debug)(NAME, '[connect]');
    }
  }, {
    key: 'attemptAutoplay',
    value: function attemptAutoplay() {
      var _this3 = this;

      var muteOnAutoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.play().catch(function (e) {
        if (muteOnAutoplay) {
          _this3.mute();
          _this3.play().then(function () {
            _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.AUTO_PLAYBACK_MUTED, undefined, { element: _this3.media }));
          }).catch(function (err) {
            _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
              error: err.message ? err.message : err,
              element: _this3.media
            }));
          });
        } else {
          _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
            error: e.message ? e.message : e,
            element: _this3.media
          }));
        }
      });
    }
  }, {
    key: 'play',
    value: function play() {
      (0, _log.debug)(NAME, '[videoelement:action] play');
      var deferred = new _promise.DeferredPromise();
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            (0, _log.debug)(NAME, '[videoelement:action] play (START)');
            deferred.resolve();
          }).catch(deferred.reject);
        } else {
          (0, _log.debug)(NAME, '[videoelement:action] play (START)');
          deferred.resolve();
        }
      } catch (e) {
        (0, _log.error)(NAME, '[videoelement:action] play (FAULT) - ' + e.message);
        deferred.reject(e);
      }
      return deferred.promise;
    }
  }, {
    key: 'pause',
    value: function pause() {
      (0, _log.debug)(NAME, '[videoelement:action] pause');
      try {
        this.media.pause();
      } catch (e) {
        (0, _log.warn)(NAME, '[videoelement:action] pause (CATCH::FAULT) - ' + e.message);
      }
    }
  }, {
    key: 'resume',
    value: function resume() {
      (0, _log.debug)(NAME, '[videoelement:action] resume');
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            return (0, _log.debug)(NAME, '[videoelement:action] play (START)');
          }).catch(function (err) {
            return (0, _log.warn)(NAME, '[videoelement:action] play (CATCH::FAULT) ' + (err.message ? err.message : err));
          });
        }
      } catch (e) {
        (0, _log.warn)(NAME, '[videoelement:action] resume (CATCH::FAULT) - ' + e.message);
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      (0, _log.debug)(NAME, '[videoelement:action] stop');
      try {
        this.media.stop();
      } catch (e) {
        // ok.
      }
    }
  }, {
    key: 'mute',
    value: function mute() {
      this.media.muted = true;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(true);
      }
    }
  }, {
    key: 'unmute',
    value: function unmute() {
      this.media.muted = false;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(false);
      }
    }
  }, {
    key: 'setVolume',
    value: function setVolume(value) {
      this.unmute();
      this.media.volume = value;
    }
  }, {
    key: 'seekTo',
    value: function seekTo(percentage) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      this.media.currentTime = duration ? percentage * duration : percentage;
    }
  }, {
    key: 'toggleFullScreen',
    value: function toggleFullScreen() {
      try {
        _browser2.default.toggleFullScreen(this.holder);
      } catch (e) {
        throw e;
        // nada.
      }
    }

    /**
     * Notification of current stream being in an unpublished state.
     * The stream enters an unpublished state when the broadcaster stop the stream and the subscriber is still connected.
     */

  }, {
    key: 'unpublish',
    value: function unpublish() {
      try {
        this.stop();
        this.media.onended.call(this.media);
      } catch (e) {
        // nada.
      }
    }

    /**
     * Request to disconnect playback.
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      this._cleanUp();
    }

    /**
     * Responder to change in orientation received through metadata.
     *
     * @param {Number} orientation
     *        The orientation value.
     *
     * @private
     */

  }, {
    key: 'handleOrientationChange',
    value: function handleOrientationChange(orientation) {
      if (this._controls && orientation % 180 !== 0) {
        this.holder.classList.add('red5pro-media-background');
        this.media.classList.remove('red5pro-media-background');
      }
    }

    /*
     * || SHARED OBJECT INTEGRATION NOT AVAILABLE FOR HLS PLAYBACK ||
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'addSharedObjectResponseHandler',
    value: function addSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'removeSharedObjectResponseHandler',
    value: function removeSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'sendToSharedObject',
    value: function sendToSharedObject(name, callName, message) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'sendPropertyToSharedObject',
    value: function sendPropertyToSharedObject(name, key, value) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'getRemoteSharedObject',
    value: function getRemoteSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'connectToSharedObject',
    value: function connectToSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'closeSharedObject',
    value: function closeSharedObject(sharedObjectName) {}

    /**
     * Returns playback controls if available.
     *
     * @returns {PlaybackControls}
     */

  }, {
    key: 'getControls',
    value: function getControls() {
      return this._controls;
    }

    /**
     * Returns the subscriber type associated with this controller.
     *
     * @returns {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return this.playerType;
    }

    /**
     * Returns flag of video being recognized as VOD (Video On Demand).
     *
     * @returns {Boolean}
     */

  }, {
    key: 'isVOD',
    get: function get() {
      return this._isVOD;
    }

    /**
     * Sets flag of video being considered as VOD (Video On Demand).
     *
     * @param {Boolean} value
     */
    ,
    set: function set(value) {
      this._isVOD = value;
      if (this._controls) {
        this._controls.setAsVOD(value);
      }
    }
  }]);
  return RTCSourceHandler;
}(_controls.PlaybackController);

exports.default = RTCSourceHandler;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = __webpack_require__(6);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(8);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(7);

var _inherits3 = _interopRequireDefault(_inherits2);

var _embed = __webpack_require__(80);

var embed = _interopRequireWildcard(_embed);

var _browser = __webpack_require__(4);

var _browser2 = _interopRequireDefault(_browser);

var _sharedobjectHelperRtmp = __webpack_require__(84);

var _sharedobjectHelperRtmp2 = _interopRequireDefault(_sharedobjectHelperRtmp);

var _controls = __webpack_require__(24);

var _state = __webpack_require__(35);

var _event = __webpack_require__(15);

var _promise = __webpack_require__(5);

var _log = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME = 'RTMPSourceHandler';

/**
 * Simple util to convert value to Integer.
 * @private
 */
var toInt = function toInt(value) {
  if (typeof value === 'string') {
    return parseInt(value, 10);
  } else {
    return Math.round(value);
  }
};

/**
 * Quick test if streamName has an extension which infers VOD.
 * @param {String} streamName
 * @return {Boolean}
 * @private
 */
var isVODStreamName = function isVODStreamName(streamName) {
  return (/^.*\.(flv|mp4|mp3)/.test(streamName)
  );
};

/**
 * Source Handler for Flash-based Subscribers, which serves as a Presentation Controller between view and subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 *
 * @private
 */

var RTMPSourceHandler = function (_PlaybackController) {
  (0, _inherits3.default)(RTMPSourceHandler, _PlaybackController);

  function RTMPSourceHandler(notificationCenter, media, type) {
    var soResponder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    (0, _classCallCheck3.default)(this, RTMPSourceHandler);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RTMPSourceHandler.__proto__ || (0, _getPrototypeOf2.default)(RTMPSourceHandler)).call(this));

    _this.media = media;
    _this.clone = _this.media.cloneNode(true);
    _this.parent = _this.media.parentNode;
    _this.holder = _this._determineHolder(_this.media);
    _this.playerType = type;
    _this._swfId = undefined;
    _this._controls = undefined;
    _this._soResponder = soResponder || new _sharedobjectHelperRtmp2.default();
    _this._playbackNotificationCenter = notificationCenter;
    _browser2.default.onFullScreenStateChange(_this._handleFullScreenChange.bind(_this));
    return _this;
  }

  /**
   * Established DOM Element order for playback.
   *
   * @param {Element} media
   *        The target media element: e.g., `video` or `audio`.
   *
   * @private
   */


  (0, _createClass3.default)(RTMPSourceHandler, [{
    key: '_determineHolder',
    value: function _determineHolder(media) {
      if (media.parentNode.classList.contains('red5pro-media-container')) {
        return media.parentNode;
      } else {
        var parent = media.parentNode;
        var div = _browser2.default.createElement('div');
        div.classList.add('red5pro-media-container');
        parent.insertBefore(div, media);
        parent.removeChild(media);
        div.appendChild(media);
        return div;
      }
    }

    /**
     * Clean up of DOM Element order upon stop of playback.
     *
     * @private
     */

  }, {
    key: '_cleanUp',
    value: function _cleanUp() {
      // Return to prior DOM manipulation.
      var el = this.getEmbeddedView();
      var elParent = el.parentNode;
      var mediaHolder = this.holder;
      if (elParent) {
        elParent.removeChild(el);
        // The object parent could be a wrapper child in the original parent element.
        if (elParent !== this.parent) {
          elParent.parentNode.removeChild(elParent);
          mediaHolder = this.parent;
        }
      } else {
        try {
          el.remove();
        } catch (e) {
          (0, _log.warn)(NAME, 'Issue in DOM cleanup of flash object embed: ' + e.message);
        }
      }
      this.media = this.clone.cloneNode(true);
      mediaHolder.appendChild(this.media);
      if (this._controls) {
        this._controls.detach();
      }
    }

    /**
     * Assigns and handlers event notificiations coming from the media notifier (e.g., `video` or `audio` element).
     *
     * @param {Object} notifier
     *
     * @private
     */

  }, {
    key: '_addPlaybackHandlers',
    value: function _addPlaybackHandlers(notifier) {
      var controls = this.getControls();
      if (typeof controls === 'undefined') {
        return;
      }
      notifier.on(_event.SubscriberEventTypes.SUBSCRIBE_START, function () {
        controls.setState(_state.PlaybackState.PLAYING);
      });
      notifier.on(_event.SubscriberEventTypes.SUBSCRIBE_STOP, function () {
        controls.setState(_state.PlaybackState.IDLE);
      });
      notifier.on(_event.SubscriberEventTypes.PLAY_UNPUBLISH, function () {
        controls.setState(_state.PlaybackState.IDLE);
      });
      notifier.on(_event.SubscriberEventTypes.SUBSCRIBE_METADATA, function (event) {
        if (event.data.duration) {
          controls.setPlaybackDuration(event.data.duration);
        }
      });
      notifier.on(_event.SubscriberEventTypes.VOLUME_CHANGE, function (event) {
        controls.setVolume(event.data.volume);
      });
      notifier.on(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, function (event) {
        if (event.data.code === _state.PlaybackState.AVAILABLE) {
          controls.enable(true);
        }
        controls.setState(event.data.code);
      });
      notifier.on(_event.SubscriberEventTypes.PLAYBACK_TIME_UPDATE, function (event) {
        controls.setSeekTime(event.data.time, event.data.duration);
      });
      notifier.on(_event.SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, function (event) {
        controls.onFullScreenChange(event.data);
      });
    }

    /**
     * Event handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */

  }, {
    key: '_handleFullScreenChange',
    value: function _handleFullScreenChange(isFullScreen) {
      var swfobject = this.getEmbeddedView();
      if (isFullScreen) {
        this.holder.classList.add('red5pro-media-container-full-screen');
        swfobject.classList.add('red5pro-media-container-full-screen');
      } else {
        this.holder.classList.remove('red5pro-media-container-full-screen');
        swfobject.classList.remove('red5pro-media-container-full-screen');
      }
      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, undefined, isFullScreen));
    }

    /**
     * Establishes event handler for recognizing complete on embed and initialization of Flash-based subscriber.
     *
     * @param {Promise} promise
     *        The target `Promise` object to resolve or reject upon completion.
     *
     * @private
     */

  }, {
    key: '_setUpInitCallback',
    value: function _setUpInitCallback(promise) {
      var self = this;
      _browser2.default.addSubscriptionAssignmentHandler(function (successId) {
        (0, _log.debug)(NAME, 'Embed and init() complete for subscriber swf. successId(' + successId + ').');
        promise.resolve(successId);
        self._tearDownInitCallback();
      });
    }

    /**
     * Tears down established handler for completion of Flash embed and init.
     *
     * @private
     */

  }, {
    key: '_tearDownInitCallback',
    value: function _tearDownInitCallback() {}

    /**
      * Request to setup the presentation of a playback stream using HLS.
      *
      * @param {String} url
      *        The endpoint URL for playback.
      * @param {Object} options
      *        The initialization configuration map.
      * @param {String} swfUrl
      *        The endpoint url to the SWF to embed. Defaults to relative link to red5pro-subscriber.swf of the SDK distribution.
      * @param {String} minFlashVersion
      *        The minimum Flash version for support of playback. Default: `10.0.0`.
      *
      * @returns {Promise}
      */

  }, {
    key: 'addSource',
    value: function addSource(swfId, options) {
      var _this2 = this;

      var swfUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var minFlashVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      (0, _log.debug)(NAME, '[addsource]');
      this._swfId = swfId;
      this.holder = this._determineHolder(this.media);
      var soResponder = this._soResponder;
      var deferred = new _promise.DeferredPromise();
      var hasDefinedControls = options.controls;
      var isMuted = _browser2.default.hasAttributeDefined(this.media, 'muted');
      var usePlaybackControls = _browser2.default.hasAttributeDefined(this.media, 'controls') && _browser2.default.hasClassDefined(this.media, 'red5pro-media');
      options.swf = swfUrl || options.swf;
      options.minFlashVersion = minFlashVersion || options.minFlashVersion;
      this._setUpInitCallback(deferred);
      var classList = this.media.classList;
      embed.defineEmbedElement(this.media, this.holder).then(function (elementId) {
        var flashvars = {
          stream: options.streamName,
          app: options.context ? options.app + '/' + options.context : options.app,
          host: options.host,
          muted: _browser2.default.hasAttributeDefined(_this2.media, 'muted'),
          autoplay: _browser2.default.hasAttributeDefined(_this2.media, 'autoplay'),
          useAdaptiveBitrateController: options.useAdaptiveBitrateController
        };
        if (options.backgroundColor) {
          flashvars.backgroundColor = options.backgroundColor;
        }
        if (options.buffer && !isNaN(Number(options.buffer))) {
          flashvars.buffer = options.buffer;
        }
        if (options.width && !isNaN(options.width)) {
          flashvars.width = toInt(options.width);
        }
        if (options.height && !isNaN(options.height)) {
          flashvars.height = toInt(options.height);
        }
        if (options.embedWidth === '100%' || options.embedHeight === '100%') {
          flashvars.autosize = true;
        }
        _this2._swfId = swfId;
        if (typeof options.connectionParams !== 'undefined') {
          flashvars.connectionParams = encodeURIComponent((0, _stringify2.default)(options.connectionParams));
        }
        if (typeof options.abrVariants !== 'undefined') {
          flashvars.abrVariants = encodeURIComponent((0, _stringify2.default)(options.abrVariants));
        }
        if (typeof options.abrVariantUpgradeSettings !== 'undefined') {
          flashvars.abrVariantUpgradeSettings = encodeURIComponent((0, _stringify2.default)(options.abrVariantUpgradeSettings));
        }
        return embed.embedSwfObject(swfId, options, flashvars, _browser2.default.getSwfObject(), elementId);
      }).then(function () {
        if (hasDefinedControls || usePlaybackControls) {
          if (hasDefinedControls) {
            _this2._controls = options.controls;
          } else {
            _this2._controls = new _controls.PlaybackControlsImpl(_this2, _this2.holder);
          }
          _this2.media.controls = false;
          _this2._controls.setAsVOD(isVODStreamName(options.streamName));
          _this2._controls.setMutedState(isMuted);
          var embedded = _this2.getEmbeddedView();
          var index = classList.length,
              clazz = void 0;
          while (--index > -1) {
            clazz = classList.item(index);
            embedded.classList.add(clazz);
          }
        }
        _this2._addPlaybackHandlers(_this2._playbackNotificationCenter);
        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: _state.PlaybackState.AVAILABLE,
          state: _state.PlaybackStateReadable[_state.PlaybackState.AVAILABLE]
        }));
        return true;
      }).then(function () {
        soResponder.connect(swfId);
        return true;
      }).catch(function (e) {
        return deferred.reject(e);
      });
      return deferred.promise;
    }

    /**
     * Request to connect to stream.
     */

  }, {
    key: 'connect',
    value: function connect() {
      (0, _log.debug)(NAME, '[connect]');
      try {
        this.getEmbeddedView().connect();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'play',
    value: function play() {
      try {
        this.getEmbeddedView().play();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'pause',
    value: function pause() {
      try {
        this.getEmbeddedView().pause();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'resume',
    value: function resume() {
      try {
        this.getEmbeddedView().resume();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      try {
        this.getEmbeddedView().stop();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'mute',
    value: function mute() {
      try {
        this.getEmbeddedView().mute();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'unmute',
    value: function unmute() {
      try {
        this.getEmbeddedView().unmute();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'setVolume',
    value: function setVolume(value) {
      try {
        this.getEmbeddedView().setVolume(value);
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'seekTo',
    value: function seekTo(value) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      try {
        this.getEmbeddedView().seekTo(value, duration);
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: 'toggleFullScreen',
    value: function toggleFullScreen() {
      try {
        _browser2.default.toggleFullScreen(this.holder);
      } catch (e) {
        throw e;
      }
    }

    /**
     * Request to disconnect from the playback stream.
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      try {
        this.getEmbeddedView().disconnect();
        (0, _log.debug)(NAME, '[disconnect]');
      } catch (e) {
        // nada.
      }
      this._cleanUp();
      this._soResponder.disconnect();
    }

    /**
     * Assign response handler for SharedObject communication.
     *
     * @param {Object} handler
     *
     * @private
     */

  }, {
    key: 'addSharedObjectResponseHandler',
    value: function addSharedObjectResponseHandler(handler) {
      this._soResponder.addResponseHandler(handler);
    }

    /**
     * Remove response handler from SharedObject communication.
     *
     * @param {Object} handler
     *
     * @private
     */

  }, {
    key: 'removeSharedObjectResponseHandler',
    value: function removeSharedObjectResponseHandler(handler) {
      this._soResponder.removeResponseHandler(handler);
    }

    /**
     * Send message on SharedObject.
     *
     * @param {String} name
     *        The name of the SharedObject.
     * @param {String} callName
     *        The method name to invoke on the SharedObject.
     * @param {String} message
     *        The message to send along.
     *
     * @private
     */

  }, {
    key: 'sendToSharedObject',
    value: function sendToSharedObject(name, callName, message) {
      this._soResponder.sendToSharedObject(name, callName, message);
    }

    /**
     * Send property update to SharedObject.
     *
     * @param {String} name
     *        The name of the SharedObject.
     * @param {String} key
     *        The property name to update.
     * @param {String} value
     *        The property value to set.
     *
     * @private
     */

  }, {
    key: 'sendPropertyToSharedObject',
    value: function sendPropertyToSharedObject(name, key, value) {
      this._soResponder.sendPropertyToSharedObject(name, key, value);
    }

    /**
     * Request to get the remote SharedObject on the server by name.
     *
     * @param {String} sharedObjectName
     *
     * @private
     */

  }, {
    key: 'getRemoteSharedObject',
    value: function getRemoteSharedObject(sharedObjectName) {
      this._soResponder.getRemoteSharedObject(sharedObjectName);
    }

    /**
     * Request to connect to SharedObject by name.
     *
     * @param {String} sharedObjectName
     *
     * @private
     */

  }, {
    key: 'connectToSharedObject',
    value: function connectToSharedObject(sharedObjectName) {
      this._soResponder.connectToSharedObject(sharedObjectName);
    }

    /**
     * Request to close the SharedObject by name.
     *
     * @param {String} sharedObjectName
     *
     * @private
     */

  }, {
    key: 'closeSharedObject',
    value: function closeSharedObject(sharedObjectName) {
      this._soResponder.closeSharedObject(sharedObjectName);
    }

    /*
     * Request to start the Adaptive Bitrate Controller to automatically downgrade and upgrade streams based on NetStatus and bandwidth.
     * The ABR is started automatically when providing the `useAdaptiveBitrateController` configuration property.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     */

  }, {
    key: 'startABRController',
    value: function startABRController() {
      try {
        this.getEmbeddedView().startABRController();
      } catch (e) {
        (0, _log.debug)(NAME, 'Could not start the Adaptive Bitrate Controller: ' + e.message);
      }
    }

    /*
     * Request to stop the Adaptive Bitrate Controller from automatically downgrading and upgrading streams based on NetStatus and bandwidth.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     */

  }, {
    key: 'stopABRController',
    value: function stopABRController() {
      try {
        this.getEmbeddedView().stopABRController();
      } catch (e) {
        (0, _log.debug)(NAME, 'Could not stop the Adaptive Bitrate Controller: ' + e.message);
      }
    }

    /**
     * Request to use the provide ABR Variants when performing Adaptive Bitrate Control.
     * Requires the `useAdaptiveBitrateController` intitialization configuration property to be `true`.
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     *
     * @param {Object} abrSettings
     *        TODO: Provide ABR Variant object schema expected.
     * @param {int} level
     *        The level to start out on for ABR.
     */

  }, {
    key: 'setABRVariants',
    value: function setABRVariants(abrVariants, level) {
      try {
        var value = typeof abrVariants === 'string' ? encodeURIComponent(abrVariants) : encodeURIComponent((0, _stringify2.default)(abrVariants));
        this.getEmbeddedView().setABRVariants(value, level || 1);
      } catch (e) {
        (0, _log.debug)(NAME, 'Could not set ABR Variants: ' + e.message);
      }
    }

    /**
     * Request to set ABR level explicitly. The SDK attempts to properly choose the correct level based on bandwidth, but this API allows for the level to be set explicitly.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     *
     * @param {int} level
     *        The level to set the ABR based on the variants provided in `setABRVariants`.
     * @param {boolean} firm
     *        Flag to set level firmly, disabling the automatic switching of the Adaptive Bitrate Controller.
     */

  }, {
    key: 'setABRLevel',
    value: function setABRLevel(level, firm) {
      try {
        this.getEmbeddedView().setABRLevel(level, !!firm);
      } catch (e) {
        (0, _log.debug)(NAME, 'Could not set ABR level: ' + e.message);
      }
    }

    /**
     * Provides the upgrade settings to use by the Adaptive Bitrate Control in upgrading previously downgraded streams.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     *
     * @param {Object} abrVariantUpgrades
     *        A configuration object that defines the associated retry limits based on levels of the Provision Variants.
     * @example
     * {
     *  minimumDowngradePlaybackSpan: 2000,
     *  upgrade: [
     *    {
     *      level: 1,
     *      retryTimeout: 0
     *    },
     *    {
     *      level: 2,
     *      retryTimeout: 2000
     *    },
     *    {
     *      level: 3,
     *      retryTimeout: 4000
     *    }
     *  ]
     * }
     */

  }, {
    key: 'setABRVariantUpgradeSettings',
    value: function setABRVariantUpgradeSettings(abrVariantUpgrades) {
      try {
        var value = typeof abrVariants === 'string' ? encodeURIComponent(abrVariantUpgrades) : encodeURIComponent((0, _stringify2.default)(abrVariantUpgrades));
        this.getEmbeddedView().setABRVariantUpgradeSettings(value);
      } catch (e) {
        (0, _log.debug)(NAME, 'Could not set ABR Variants: ' + e.message);
      }
    }

    /**
     * Returns the embedded Flash object if available.
     *
     * @returns {Element}
     */

  }, {
    key: 'getEmbeddedView',
    value: function getEmbeddedView() {
      return _browser2.default.getEmbedObject(this._swfId);
    }

    /**
     * Returns playback controls if available.
     *
     * @returns {PlaybackControls}
     */

  }, {
    key: 'getControls',
    value: function getControls() {
      return this._controls;
    }

    /**
     * Returns the subscriber type associated with this controller.
     *
     * @returns {String}
     */

  }, {
    key: 'getType',
    value: function getType() {
      return this.playerType;
    }
  }]);
  return RTMPSourceHandler;
}(_controls.PlaybackController);

exports.default = RTMPSourceHandler;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(145), __esModule: true };

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(146), __esModule: true };

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(147), __esModule: true };

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(151), __esModule: true };

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(152), __esModule: true };

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(153), __esModule: true };

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(156), __esModule: true };

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(159), __esModule: true };

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(162), __esModule: true };

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(163), __esModule: true };

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(164), __esModule: true };

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _isIterable2 = __webpack_require__(134);

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = __webpack_require__(133);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(206);


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26);
__webpack_require__(185);
module.exports = __webpack_require__(3).Array.from;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(27);
__webpack_require__(26);
module.exports = __webpack_require__(183);

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(27);
__webpack_require__(26);
module.exports = __webpack_require__(184);

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var core  = __webpack_require__(3)
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(40);
__webpack_require__(26);
__webpack_require__(27);
__webpack_require__(187);
__webpack_require__(202);
module.exports = __webpack_require__(3).Map;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(188);
module.exports = __webpack_require__(3).Number.isFinite;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(189);
module.exports = __webpack_require__(3).Number.isNaN;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(190);
module.exports = __webpack_require__(3).Object.assign;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(191);
var $Object = __webpack_require__(3).Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(192);
var $Object = __webpack_require__(3).Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(193);
module.exports = __webpack_require__(3).Object.freeze;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(194);
var $Object = __webpack_require__(3).Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(195);
module.exports = __webpack_require__(3).Object.getPrototypeOf;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(196);
module.exports = __webpack_require__(3).Object.keys;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(197);
module.exports = __webpack_require__(3).Object.setPrototypeOf;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(40);
__webpack_require__(26);
__webpack_require__(27);
__webpack_require__(198);
module.exports = __webpack_require__(3).Promise;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(40);
__webpack_require__(26);
__webpack_require__(27);
__webpack_require__(199);
__webpack_require__(203);
module.exports = __webpack_require__(3).Set;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(200);
__webpack_require__(40);
__webpack_require__(204);
__webpack_require__(205);
module.exports = __webpack_require__(3).Symbol;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26);
__webpack_require__(27);
module.exports = __webpack_require__(78).f('iterator');

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(40);
__webpack_require__(27);
__webpack_require__(201);
module.exports = __webpack_require__(3).WeakMap;

/***/ }),
/* 165 */
/***/ (function(module, exports) {

module.exports = function(){ /* empty */ };

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(37);

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(22)
  , toLength  = __webpack_require__(52)
  , toIndex   = __webpack_require__(182);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(13)
  , isArray  = __webpack_require__(101)
  , SPECIES  = __webpack_require__(9)('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(168);

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll       = __webpack_require__(51)
  , getWeak           = __webpack_require__(31).getWeak
  , anObject          = __webpack_require__(16)
  , isObject          = __webpack_require__(13)
  , anInstance        = __webpack_require__(44)
  , forOf             = __webpack_require__(37)
  , createArrayMethod = __webpack_require__(64)
  , $has              = __webpack_require__(20)
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(14)
  , createDesc      = __webpack_require__(38);

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(32)
  , gOPS    = __webpack_require__(71)
  , pIE     = __webpack_require__(49);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ }),
/* 173 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create         = __webpack_require__(48)
  , descriptor     = __webpack_require__(38)
  , setToStringTag = __webpack_require__(39)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(21)(IteratorPrototype, __webpack_require__(9)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(32)
  , toIObject = __webpack_require__(22);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(11)
  , macrotask = __webpack_require__(110).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(36)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(14)
  , anObject = __webpack_require__(16)
  , getKeys  = __webpack_require__(32);

module.exports = __webpack_require__(17) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(22)
  , gOPN      = __webpack_require__(106).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(13)
  , anObject = __webpack_require__(16);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(19)(Function.call, __webpack_require__(70).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(16)
  , aFunction = __webpack_require__(63)
  , SPECIES   = __webpack_require__(9)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(75)
  , defined   = __webpack_require__(46);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(75)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(16)
  , get      = __webpack_require__(79);
module.exports = __webpack_require__(3).getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(45)
  , ITERATOR  = __webpack_require__(9)('iterator')
  , Iterators = __webpack_require__(30);
module.exports = __webpack_require__(3).isIterable = function(it){
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    || Iterators.hasOwnProperty(classof(O));
};

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx            = __webpack_require__(19)
  , $export        = __webpack_require__(10)
  , toObject       = __webpack_require__(33)
  , call           = __webpack_require__(102)
  , isArrayIter    = __webpack_require__(100)
  , toLength       = __webpack_require__(52)
  , createProperty = __webpack_require__(171)
  , getIterFn      = __webpack_require__(79);

$export($export.S + $export.F * !__webpack_require__(103)(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(165)
  , step             = __webpack_require__(104)
  , Iterators        = __webpack_require__(30)
  , toIObject        = __webpack_require__(22);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(69)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(96);

// 23.1 Map Objects
module.exports = __webpack_require__(65)('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export   = __webpack_require__(10)
  , _isFinite = __webpack_require__(11).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(10);

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(10);

$export($export.S + $export.F, 'Object', {assign: __webpack_require__(105)});

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(10)
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: __webpack_require__(48)});

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(10);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(17), 'Object', {defineProperty: __webpack_require__(14).f});

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(13)
  , meta     = __webpack_require__(31).onFreeze;

__webpack_require__(50)('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = __webpack_require__(22)
  , $getOwnPropertyDescriptor = __webpack_require__(70).f;

__webpack_require__(50)('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = __webpack_require__(33)
  , $getPrototypeOf = __webpack_require__(107);

__webpack_require__(50)('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(33)
  , $keys    = __webpack_require__(32);

__webpack_require__(50)('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(10);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(179).set});

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY            = __webpack_require__(47)
  , global             = __webpack_require__(11)
  , ctx                = __webpack_require__(19)
  , classof            = __webpack_require__(45)
  , $export            = __webpack_require__(10)
  , isObject           = __webpack_require__(13)
  , aFunction          = __webpack_require__(63)
  , anInstance         = __webpack_require__(44)
  , forOf              = __webpack_require__(37)
  , speciesConstructor = __webpack_require__(180)
  , task               = __webpack_require__(110).set
  , microtask          = __webpack_require__(176)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(9)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(51)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(39)($Promise, PROMISE);
__webpack_require__(109)(PROMISE);
Wrapper = __webpack_require__(3)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(103)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(96);

// 23.2 Set Objects
module.exports = __webpack_require__(65)('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global         = __webpack_require__(11)
  , has            = __webpack_require__(20)
  , DESCRIPTORS    = __webpack_require__(17)
  , $export        = __webpack_require__(10)
  , redefine       = __webpack_require__(72)
  , META           = __webpack_require__(31).KEY
  , $fails         = __webpack_require__(25)
  , shared         = __webpack_require__(74)
  , setToStringTag = __webpack_require__(39)
  , uid            = __webpack_require__(53)
  , wks            = __webpack_require__(9)
  , wksExt         = __webpack_require__(78)
  , wksDefine      = __webpack_require__(77)
  , keyOf          = __webpack_require__(175)
  , enumKeys       = __webpack_require__(172)
  , isArray        = __webpack_require__(101)
  , anObject       = __webpack_require__(16)
  , toIObject      = __webpack_require__(22)
  , toPrimitive    = __webpack_require__(76)
  , createDesc     = __webpack_require__(38)
  , _create        = __webpack_require__(48)
  , gOPNExt        = __webpack_require__(178)
  , $GOPD          = __webpack_require__(70)
  , $DP            = __webpack_require__(14)
  , $keys          = __webpack_require__(32)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(106).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(49).f  = $propertyIsEnumerable;
  __webpack_require__(71).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(47)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(21)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each         = __webpack_require__(64)(0)
  , redefine     = __webpack_require__(72)
  , meta         = __webpack_require__(31)
  , assign       = __webpack_require__(105)
  , weak         = __webpack_require__(170)
  , isObject     = __webpack_require__(13)
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(65)('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = __webpack_require__(10);

$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(97)('Map')});

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = __webpack_require__(10);

$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(97)('Set')});

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(77)('asyncIterator');

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(77)('observable');

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(207);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 207 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(111);


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA0MDQyNjkwNTViOWRhODk1OGY4NCIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbG9nL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2Vudi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy91dGlsL3Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9ldmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2ZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29yZS9ldmVudC1lbWl0dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdWJzY3JpYmVyL2NvbnRyb2xzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWwvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9lbnVtL3BsYXliYWNrLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdWJzY3JpYmVyL2NvbnRyb2xzL3N0YXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvYWRhcHRlci93ZWJydGMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FkYXB0ZXIvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92aWV3L3BsYXliYWNrLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9lbnVtL3B1Ymxpc2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2VudW0vd2VicnRjLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9ldmVudC9zaGFyZWRvYmplY3QtZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2hlbHBlci9zb2NrZXQtaGVscGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy91dGlsL3VybC1lbmRwb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdmlldy9wdWJsaXNoLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZW52L2VtYmVkLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9lbnYvdHJhbnNsYXRpb24tdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZXZlbnQvcHVibGlzaGVyLWV2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9ldmVudC9zdWJzY3JpYmVyLWV2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9oZWxwZXIvc2hhcmVkb2JqZWN0LWhlbHBlci1ydG1wLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9wdWJsaXNoZXIvY29uc3RyYWludC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc3Vic2NyaWJlci9jb250cm9scy9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC9pbXBsLWZhY3Rvcnktb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvbWFwLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL251bWJlci9pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0LmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL34vYnJvd3Nlci1idW55YW4vbGliL2J1bnlhbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9lbnYvbWV0YWRhdGEtdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZXhjZXB0aW9uL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvaGVscGVyL3NvY2tldC1oZWxwZXItcHViLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9oZWxwZXIvc29ja2V0LWhlbHBlci1zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2hlbHBlci93ZWJydGMtaGVscGVyLXB1Yi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvaGVscGVyL3dlYnJ0Yy1oZWxwZXItc3ViLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9sb2cvYnVueWFuLXdyaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcHVibGlzaGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9wdWJsaXNoZXIvcHViLXNvdXJjZS1oYW5kbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9wdWJsaXNoZXIvcmVkNXByby1ydGMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3B1Ymxpc2hlci9yZWQ1cHJvLXJ0bXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3NoYXJlZG9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc3Vic2NyaWJlci9jb250cm9scy9zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3N1YnNjcmliZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3N1YnNjcmliZXIvcmVkNXByby1obHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3N1YnNjcmliZXIvcmVkNXByby1ydGMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3N1YnNjcmliZXIvcmVkNXByby1ydG1wLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdWJzY3JpYmVyL3JlZDVwcm8tc291cmNlLWhhbmRsZXItaGxzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdWJzY3JpYmVyL3JlZDVwcm8tc291cmNlLWhhbmRsZXItcnRjLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdWJzY3JpYmVyL3JlZDVwcm8tc291cmNlLWhhbmRsZXItcnRtcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9pcy1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9udW1iZXIvaXMtbmFuLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vbWFwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL251bWJlci9pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vbnVtYmVyL2lzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZnJlZXplLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi93ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19rZXlvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmlzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiXSwibmFtZXMiOlsibG9nZ2VyIiwiZm9ybWF0TWVzc2FnZSIsImRpc3BhdGNoZXIiLCJtZXNzYWdlIiwiZGVjb3JhdGUiLCJsZXZlbCIsInNvdXJjZSIsIkxFVkVMUyIsIlRSQUNFIiwiSU5GTyIsIkRFQlVHIiwiV0FSTiIsIkVSUk9SIiwiRkFUQUwiLCJlc3RhYmxpc2hMb2dnZXIiLCJzdHJlYW1MaXN0IiwidW5kZWZpbmVkIiwic3RyZWFtcyIsInB1c2giLCJzdHJlYW0iLCJSYXdTdHJlYW0iLCJ0eXBlIiwibGlzdCIsIm1hcCIsIml0ZW0iLCJjb25jYXQiLCJuYW1lIiwiZ2V0TG9nZ2VyIiwidHJhY2UiLCJpbmZvIiwiZGVidWciLCJ3YXJuIiwiZXJyb3IiLCJmYXRhbCIsInJ0bXBTdWJzY3JpYmVyQXNzaWdubWVudHMiLCJmdWxsc2NyZWVuSGFuZGxlcnMiLCJzY3JlZW5mdWxsSGFuZGxlckFzc2lnbmVkIiwiZW5hYmxlU2NyZWVuZnVsbEhhbmRsZXIiLCJ3aW5kb3ciLCJzY3JlZW5mdWxsIiwiZW5hYmxlZCIsIm9uY2hhbmdlIiwiaSIsImxlbmd0aCIsImlzRnVsbHNjcmVlbiIsIm9yaWVudGF0aW9uSGFuZGxlcnMiLCJvbm9yaWVudGF0aW9uY2hhbmdlIiwiZXZlbnQiLCJzY3JlZW5PcmllbnRhdGlvbiIsInNjcmVlbiIsIm9yaWVudGF0aW9uIiwiYW5nbGUiLCJvcmllbnRhdGlvblZhbHVlIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJjbG9zZUhhbmRsZXJzIiwiaGFzT25XaW5kb3dDbG9zZSIsIm9ud2luZG93Y2xvc2UiLCJlIiwiZmxhc2hWZXJzaW9uIiwidmVyc2lvbiIsIkFjdGl2ZVhPYmplY3QiLCJHZXRWYXJpYWJsZSIsInJlcGxhY2UiLCJtYXRjaCIsIm5hdmlnYXRvciIsIm1pbWVUeXBlcyIsImVuYWJsZWRQbHVnaW4iLCJwbHVnaW5zIiwiZGVzY3JpcHRpb24iLCJlcnIiLCJzcGxpdCIsInJlcXVlc3RGcmFtZSIsInRpbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsImZuIiwic2V0VGltZW91dCIsImhhc0FkYXB0ZXJTaGltIiwiYWRhcHRlciIsImlzTW96IiwibW96R2V0VXNlck1lZGlhIiwiaXNJRSIsImRvY3VtZW50IiwiZG9jdW1lbnRNb2RlIiwiaXNFZGdlIiwiYnJvd3NlckRldGFpbHMiLCJicm93c2VyIiwidG9Mb3dlckNhc2UiLCJTdHlsZU1lZGlhIiwiaXNUb3VjaEVuYWJsZWQiLCJEb2N1bWVudFRvdWNoIiwiZ2V0VXNlck1lZGlhIiwibWVkaWFEZXZpY2VzIiwid2Via2l0R2V0VXNlck1lZGlhIiwibXNHZXRVc2VyTWVkaWEiLCJnZXRJc01veiIsImdldElzRWRnZSIsInN1cHBvcnRzV2ViU29ja2V0IiwiV2ViU29ja2V0Iiwic3VwcG9ydHNITFMiLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJjYW5QbGF5VHlwZSIsInN1cHBvcnRzRmxhc2hWZXJzaW9uIiwiZGVsaW1pdGVyIiwicmVzb2x2ZUVsZW1lbnQiLCJpZCIsImdldEVsZW1lbnRCeUlkIiwiTm9FbGVtZW50Rm91bmRFcnJvciIsImNyZWF0ZVdlYlNvY2tldCIsInVybCIsInNldFZpZGVvU291cmNlIiwidmlkZW9FbGVtZW50IiwibWVkaWFTdHJlYW0iLCJhdXRvcGxheSIsIm9ubG9hZGVkbWV0YWRhdGEiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJzcmNPYmplY3QiLCJzcmMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJtYXliZVByb21pc2UiLCJwbGF5IiwidGhlbiIsImNhdGNoIiwic2V0QXR0cmlidXRlIiwicGF1c2UiLCJpbmplY3RTY3JpcHQiLCJkZmQiLCJEZWZlcnJlZFByb21pc2UiLCJzY3JpcHQiLCJvbmxvYWQiLCJyZXNvbHZlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJwcm9taXNlIiwiZ1VNIiwiY29uc3RyYWludHMiLCJzZXRHbG9iYWwiLCJwcm9wIiwidmFsdWUiLCJnZXRTd2ZPYmplY3QiLCJzd2ZvYmplY3QiLCJnZXRFbWJlZE9iamVjdCIsImdldEVsZW1lbnRJZCIsImdldEF0dHJpYnV0ZSIsImFkZE9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsImhhbmRsZXIiLCJhbmRDYWxsIiwic3VwcG9ydHNPcmllbnRhdGlvbkNoYW5nZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVPcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJzbGljZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRDbG9zZUhhbmRsZXIiLCJpbnNlcnRWYWx1ZSIsInNwbGljZSIsInJlbW92ZUNsb3NlSGFuZGxlciIsImludm9rZSIsIm1ldGhvZE5hbWUiLCJkYXRhIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidG9nZ2xlRnVsbFNjcmVlbiIsImVsZW1lbnQiLCJ0b2dnbGUiLCJvbkZ1bGxTY3JlZW5TdGF0ZUNoYW5nZSIsImNiIiwib25PcmllbnRhdGlvbk1ldGFkYXRhIiwiaGFzQXR0cmlidXRlRGVmaW5lZCIsImVsZW0iLCJhdHRyaWJ1dGUiLCJhdHQiLCJoYXNDbGFzc0RlZmluZWQiLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInRhZ05hbWUiLCJvcHRzIiwiY3JlYXRlVGV4dE5vZGUiLCJ0b1N0cmluZyIsImFkZFN1YnNjcmlwdGlvbkFzc2lnbm1lbnRIYW5kbGVyIiwic2V0U3Vic2NyaWJlcklkIiwic2hpZnQiLCJnZXRNb3VzZVhGcm9tRXZlbnQiLCJwYWdlWCIsImNsaWVudFgiLCJib2R5Iiwic2Nyb2xsTGVmdCIsImRvY3VtZW50RWxlbWVudCIsImdldFNjcm9sbFgiLCJwYWdlWE9mZnNldCIsInBhcmVudE5vZGUiLCJjcmVhdGVFdmVudCIsIkV2ZW50VHlwZSIsImdldEdsb2JhbCIsIl9EZWZlcnJlZFByb21pc2UiLCJyZWplY3QiLCJfRnV0dXJlIiwiY3JlYXRlSWZOb3RFeGlzdCIsImRlZmVycmVkSWZFeGlzdCIsImYiLCJGdXR1cmUiLCJQdWJsaXNoZXJFdmVudFR5cGVzIiwiUlRDUHVibGlzaGVyRXZlbnRUeXBlcyIsIlJUTVBQdWJsaXNoZXJFdmVudFR5cGVzIiwiRmFpbG92ZXJQdWJsaXNoZXJFdmVudFR5cGVzIiwiU3Vic2NyaWJlckV2ZW50VHlwZXMiLCJSVENTdWJzY3JpYmVyRXZlbnRUeXBlcyIsIlJUTVBTdWJzY3JpYmVyRXZlbnRUeXBlcyIsIkZhaWxvdmVyU3Vic2NyaWJlckV2ZW50VHlwZXMiLCJTaGFyZWRPYmplY3RFdmVudFR5cGVzIiwiRXZlbnQiLCJfdHlwZSIsIl9kYXRhIiwiUHVibGlzaGVyRXZlbnQiLCJwdWJsaXNoZXIiLCJfcHVibGlzaGVyIiwiU3Vic2NyaWJlckV2ZW50Iiwic3Vic2NyaWJlciIsIl9zdWJzY3JpYmVyIiwiU2hhcmVkT2JqZWN0RXZlbnQiLCJzaGFyZWRPYmplY3ROYW1lIiwiX25hbWUiLCJXSUxEQ0FSRCIsIldJTERDQVJEX0tFWSIsIkV2ZW50RW1pdHRlciIsIl9jYWxsYmFja3MiLCJjYWxsYmFja3MiLCJpbmRleE9mIiwiaW5kZXgiLCJfbm90aWZ5IiwiTkFNRSIsIlN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xsZXIiLCJkdXJhdGlvbiIsIlN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xzIiwic3RhdGUiLCJTdWJzY3JpYmVyUGxheWJhY2tDb250cm9sc0ltcGwiLCJwbGF5ZXIiLCJjb250YWluZXIiLCJfY29udHJvbGJhciIsIl9wbGF5UGF1c2VCdXR0b24iLCJfbXV0ZUJ1dHRvbiIsIl92b2x1bWVGaWVsZCIsIl9zZWVrVGltZUZpZWxkIiwiX3RpbWVGaWVsZCIsIl9mdWxsU2NyZWVuQnV0dG9uIiwiX3N0YXRlIiwiUGxheWJhY2tTdGF0ZSIsIklETEUiLCJfbXV0ZWRTdGF0ZSIsIl9yZXN1bWVBZnRlclNlZWsiLCJfcGxheWJhY2tEdXJhdGlvbiIsIl92b2x1bWVWYWx1ZSIsIl9vblBsYXlQYXVzZUNsaWNrQm91bmQiLCJfb25QbGF5UGF1c2VDbGljayIsImJpbmQiLCJjb250cm9sYmFyIiwiZW52aXJvbm1lbnQiLCJhZGQiLCJfY3JlYXRlUGxheVBhdXNlQnV0dG9uIiwiX2NyZWF0ZU11dGVCdXR0b24iLCJfY3JlYXRlVm9sdW1lQ29udHJvbCIsIl9jcmVhdGVTZWVrQ29udHJvbCIsIl9jcmVhdGVQbGF5YmFja1RpbWUiLCJfY3JlYXRlRnVsbFNjcmVlblRvZ2dsZSIsInZpZXciLCJyZW1vdmUiLCJzZXRTdGF0ZSIsIm9uRnVsbFNjcmVlbkNoYW5nZSIsInNldFNlZWtUaW1lIiwiZW5hYmxlIiwiZ2V0U3RhdGUiLCJQTEFZSU5HIiwiUEFVU0VEIiwicmVzdW1lIiwiYnV0dG9uIiwic2VsZiIsImdldE11dGVkU3RhdGUiLCJ1bm11dGUiLCJzZXRNdXRlZFN0YXRlIiwibXV0ZSIsInNsaWRlciIsIkNvbnRyb2xTbGlkZXIiLCJvbiIsIlNsaWRlckV2ZW50VHlwZXMiLCJDSEFOR0UiLCJwZXJjZW50YWdlIiwiTnVtYmVyIiwic2V0Vm9sdW1lIiwiQ0hBTkdFX1NUQVJUIiwic2Vla1RvIiwiQ0hBTkdFX0NPTVBMRVRFIiwic3BhbiIsInRleHQiLCJocnMiLCJtaW5zIiwicGFyc2VJbnQiLCJzZWNzIiwiZm9ybWF0dGVkQXJyIiwiam9pbiIsImlubmVyVGV4dCIsImZvcm1hdFRpbWUiLCJNYXRoIiwiZmxvb3IiLCJQbGF5YmFja1N0YXRlUmVhZGFibGUiLCJvblN0YXRlQ2hhbmdlIiwibXV0ZWQiLCJvbk11dGVkU3RhdGVDaGFuZ2UiLCJpc0Z1bGxTY3JlZW4iLCJpc1ZPRCIsImRpc2FibGVkIiwicmVtb3ZlQ2hpbGQiLCJQbGF5YmFja0NvbnRyb2xsZXIiLCJQbGF5YmFja0NvbnRyb2xzIiwiUGxheWJhY2tDb250cm9sc0ltcGwiLCJkZWVwRGVmaW5lIiwib2JqZWN0IiwicGF0aHMiLCJ0YWlsIiwicG9wIiwicGF0aCIsImRlZXBDb3B5Iiwib2JqIiwic3RyIiwiSlNPTiIsInBhcnNlIiwibWV0YWRhdGFSZXNvbHV0aW9uVG9PYmplY3QiLCJkaW1zIiwid2lkdGgiLCJoZWlnaHQiLCJpc09iamVjdEVtcHR5IiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJQbGF5YmFja1R5cGVzIiwiUlRDIiwiUlRNUCIsIkhMUyIsIlBsYXliYWNrQXVkaW9FbmNvZGVyIiwiT1BVUyIsIlBDTVUiLCJQQ01BIiwiU1BFRVgiLCJOT05FIiwiUGxheWJhY2tWaWRlb0VuY29kZXIiLCJWUDgiLCJIMjY0IiwiVU5BVkFJTEFCTEUiLCJBVkFJTEFCTEUiLCJmb3JtYXRzIiwiaGFzUmVzb2x1dGlvbnNEZWZpbmVkIiwidmlkZW8iLCJnZXRWYWx1ZUZyb21Db25zdHJhaW50QXR0cmlidXRlIiwiZXhhY3QiLCJpZGVhbCIsIm1heCIsIm1pbiIsImlzRXhhY3QiLCJmb3JtYXQiLCJ3IiwiaCIsImNvbmZpcm1lZCIsImlzTG93ZXIiLCJkZXNpcmVkIiwiZGltZW5zaW9ucyIsImhhc01hdGNoaW5nRm9ybWF0IiwiZm9ybWF0c0xpc3QiLCJmaW5kTG93ZXJSZXNvbHV0aW9ucyIsInJlc0lzTG93ZXIiLCJhbGxvd0Jyb3dzZXJUb0RlZmluZVJlc29sdXRpb24iLCJwIiwibWVkaWEiLCJtc2ciLCJmaW5kTmV4dFNlbGVjdGlvbiIsInNlbGVjdGlvbnMiLCJzZWxlY3Rpb24iLCJxdWlja1Jlc29sdXRpb25TdXBwb3J0IiwiZGV0ZXJtaW5lU3VwcG9ydGVkUmVzb2x1dGlvbiIsImRlZmVycmVkIiwiaXNTdXBwb3J0ZWQiLCJfUlRDUGVlckNvbm5lY3Rpb24iLCJfUlRDSWNlQ2FuZGlkYXRlIiwiX1JUQ1Nlc3Npb25EZXNjcmlwdGlvbiIsImlzQXZhaWxhYmxlSW5Gb3JtYXRzIiwiZmFpbG92ZXIiLCJyZXMiLCJhdmFpbGFibGUiLCJmb3JjZVVzZXJNZWRpYSIsInVwZGF0ZUJhbmR3aWR0aCIsIm9wdGlvbnMiLCJzZHAiLCJhX2luZGV4IiwibF9pbmRleCIsImZyb250IiwiYmFjayIsImF1ZGlvIiwiUlRDUGVlckNvbm5lY3Rpb24iLCJtb3pSVENQZWVyQ29ubmVjdGlvbiIsIndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uIiwiUlRDSWNlQ2FuZGlkYXRlIiwibW96UlRDSWNlQ2FuZGlkYXRlIiwid2Via2l0UlRDSWNlQ2FuZGlkYXRlIiwiUlRDU2Vzc2lvbkRlc2NyaXB0aW9uIiwibW96UlRDU2Vzc2lvbkRlc2NyaXB0aW9uIiwid2Via2l0UlRDU2Vzc2lvbkRlc2NyaXB0aW9uIiwiY3JlYXRlIiwicGxheWJhY2tJZCIsIlBsYXliYWNrVmlldyIsImVsZW1lbnRJZCIsIl90YXJnZXRFbGVtZW50Iiwic2V0VmlldyIsImlzQXV0b3BsYXkiLCJQdWJsaXNoVHlwZXMiLCJQdWJsaXNoTW9kZVR5cGVzIiwiTElWRSIsIlJFQ09SRCIsIkFQUEVORCIsIkljZVRyYW5zcG9ydFR5cGVzIiwiVURQIiwiVENQIiwiQ09OTkVDVF9TVUNDRVNTIiwiQ09OTkVDVF9GQUlMVVJFIiwiUFJPUEVSVFlfVVBEQVRFIiwiTUVUSE9EX1VQREFURSIsIndlYnNvY2tldCIsIlNvY2tldEhlbHBlciIsInJlc3BvbmRlciIsIl9yZXNwb25kZXIiLCJfcGVuZGluZ1Bvc3RSZXF1ZXN0cyIsIl93ZWJzb2NrZXQiLCJfY29ubmVjdGlvblByb21pc2UiLCJfcmVzcG9uc2VIYW5kbGVycyIsIl9pc1Rlcm1pbmF0ZWQiLCJfcmV0cnlDb3VudCIsIl9yZXRyeUxpbWl0IiwiX3JlYWR5Q2hlY2tDb3VudCIsIl9yZWFkeUNoZWNrTGltaXQiLCJfb25jbG9zZSIsInRlYXJEb3duIiwiX29ub3BlblRpbWVvdXQiLCJfYXN5bmNUaWNrZXRzIiwid3MiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicG9zdCIsIm9uU29ja2V0T3BlbiIsImNsZWFyUmV0cnkiLCJfcmVzZXRPbm9wZW5UaW1lb3V0Iiwib25vcGVuIiwib25tZXNzYWdlIiwib25lcnJvciIsIm9uY2xvc2UiLCJyZXNwb25kIiwiY29kZSIsIm9uU29ja2V0Q2xvc2UiLCJfcmVtb3ZlU29ja2V0SGFuZGxlcnMiLCJkZXRhaWwiLCJzZXR1cFByb21pc2UiLCJmb3JjZVJlY29ubmVjdCIsIl9hZGRTb2NrZXRIYW5kbGVycyIsInNldFVwIiwiY2xvc2UiLCJySGFuZGxlciIsInN0cmVhbU5hbWUiLCJoYW5kbGVDYW5kaWRhdGUiLCJjYW5kaWRhdGUiLCJzZW5kUmVxdWVzdCIsInNlbmQiLCJyYW5kb20iLCJhc3luYyIsImhhbmRsZWQiLCJoYW5kbGVNZXNzYWdlUmVzcG9uc2UiLCJqc29uIiwiZ2V0SnNvbkZyb21Tb2NrZXRNZXNzYWdlIiwiaXNBdmFpbGFibGUiLCJvblN0cmVhbUF2YWlsYWJsZSIsIm9uU3RyZWFtVW5hdmFpbGFibGUiLCJ0aWNrZXQiLCJmaW5kIiwib25Tb2NrZXRNZXNzYWdlRXJyb3IiLCJfb25VbmV4cGVjdGVkU29ja2V0RXJyb3IiLCJzaGFyZWRPYmplY3RHZXRSZW1vdGUiLCJzaGFyZWRPYmplY3RDb25uZWN0IiwiY2FsbE5hbWUiLCJzaGFyZWRPYmplY3RTZW5kIiwicGFyYW1zIiwia2V5Iiwic2hhcmVkT2JqZWN0U2V0UHJvcGVydHkiLCJzaGFyZWRPYmplY3RDbG9zZSIsImdldEJhY2tncm91bmRDb21wYXRXZWJTb2NrZXRQb3J0IiwicG9ydCIsImNvbnNvbGUiLCJlbmNvZGVLZXlWYWx1ZXMiLCJ2YWx1ZU9iamVjdCIsImVuY29kZWQiLCJmb3JFYWNoIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicnRjU29ja2V0RW5kcG9pbnRGcm9tT3B0aW9ucyIsInByb3RvY29sIiwid3Nwcm90b2NvbCIsIndzcG9ydCIsImFwcEVuZHBvaW50IiwiY29udGV4dCIsImFwcCIsImVuZHBvaW50IiwiaG9zdCIsImNvbm5lY3Rpb25QYXJhbXMiLCJlbmNvZGVkUGFyYW1zIiwia3YiLCJobHNTb2NrZXRFbmRwb2ludEZyb21PcHRpb25zIiwic29ja2V0UGFyYW1zIiwicHVibGlzaGVySWQiLCJQdWJsaXNoVmlldyIsImRlZmluZUVtYmVkRWxlbWVudCIsInRhcmdldEVsZW1lbnQiLCJ0YXJnZXRQYXJlbnQiLCJub2RlTmFtZSIsImRpdiIsInBhcmVudEVsZW1lbnQiLCJlbWJlZFN3Zk9iamVjdCIsImlkTmFtZSIsImZsYXNodmFycyIsInF1YWxpdHkiLCJ3bW9kZSIsImJnY29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJhbGxvd3NjcmlwdGFjY2VzcyIsImFsbG93ZnVsbHNjcmVlbiIsImFsbG93bmV0d29ya2luZyIsImF0dHJpYnV0ZXMiLCJhbGlnbiIsImhhc0ZsYXNoUGxheWVyVmVyc2lvbiIsIm1pbkZsYXNoVmVyc2lvbiIsImVtYmVkU1dGIiwic3dmIiwiZW1iZWRXaWR0aCIsImVtYmVkSGVpZ2h0IiwicHJvZHVjdEluc3RhbGxVUkwiLCJyZXN1bHQiLCJzdWNjZXNzIiwib3JpZ2luIiwic3R5bGVzIiwidHJhbnNpdGlvbiIsInJvdGF0aW9uVHJhbnNsYXRpb25zIiwidHJhbnNmb3JtIiwidHJhY2tSZXNpemUiLCJyYWYiLCJpc1JvdGF0ZWQiLCJwYXJlbnQiLCJwd2lkdGgiLCJjbGllbnRXaWR0aCIsInBoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzdHlsZSIsImV3aWR0aCIsImVoZWlnaHQiLCJtYXJnaW4iLCJwb3NpdGlvbiIsImxlZnQiLCJhcHBseU9yaWVudGF0aW9uIiwicmVzb2x1dGlvbiIsInRyYW5zbGF0aW9ucyIsImF0dGFjaEV2ZW50IiwiUFVCTElTSF9TVEFSVCIsIlBVQkxJU0hfRkFJTCIsIlBVQkxJU0hfSU5WQUxJRF9OQU1FIiwiVU5QVUJMSVNIX1NVQ0NFU1MiLCJQVUJMSVNIX01FVEFEQVRBIiwiUFVCTElTSF9TRU5EX0lOVk9LRSIsIkNPTk5FQ1RJT05fQ0xPU0VEIiwiRElNRU5TSU9OX0NIQU5HRSIsIlBVQkxJU0hFUl9SRUpFQ1QiLCJQVUJMSVNIRVJfQUNDRVBUIiwiTUVESUFfU1RSRUFNX0FWQUlMQUJMRSIsIlBFRVJfQ09OTkVDVElPTl9BVkFJTEFCTEUiLCJPRkZFUl9TVEFSVCIsIk9GRkVSX0VORCIsIlBFRVJfQ0FORElEQVRFX0VORCIsIklDRV9UUklDS0xFX0NPTVBMRVRFIiwiRU1CRURfU1VDQ0VTUyIsIkVNQkVEX0ZBSUxVUkUiLCJTVUJTQ1JJQkVfU1RBUlQiLCJTVUJTQ1JJQkVfU1RPUCIsIlNVQlNDUklCRV9GQUlMIiwiU1VCU0NSSUJFX0lOVkFMSURfTkFNRSIsIlNVQlNDUklCRV9NRVRBREFUQSIsIlNVQlNDUklCRV9TRU5EX0lOVk9LRSIsIlBMQVlfVU5QVUJMSVNIIiwiT1JJRU5UQVRJT05fQ0hBTkdFIiwiVk9MVU1FX0NIQU5HRSIsIlBMQVlCQUNLX1RJTUVfVVBEQVRFIiwiUExBWUJBQ0tfU1RBVEVfQ0hBTkdFIiwiRlVMTF9TQ1JFRU5fU1RBVEVfQ0hBTkdFIiwiQVVUT19QTEFZQkFDS19GQUlMVVJFIiwiQVVUT19QTEFZQkFDS19NVVRFRCIsIlNVQlNDUklCRVJfUkVKRUNUIiwiU1VCU0NSSUJFUl9BQ0NFUFQiLCJBTlNXRVJfU1RBUlQiLCJBTlNXRVJfRU5EIiwiQ0FORElEQVRFX1NUQVJUIiwiQ0FORElEQVRFX0VORCIsIk9OX0FERF9TVFJFQU0iLCJBQlJfTEVWRUxfQ0hBTkdFIiwiUlRNUFNoYXJlZE9iamVjdEhhbmRsZXIiLCJfZWxlbWVudCIsIl9oYW5kbGVTaGFyZWRPYmplY3RFdmVudCIsImhhbmRsZVNoYXJlZE9iamVjdEV2ZW50IiwiZWxJZCIsImhhbmRsZXJOYW1lIiwic2V0U2hhcmVkT2JqZWN0UmVzcG9uZGVyIiwic3dmSWQiLCJzaGFyZWRPYmplY3RTZW5kUHJvcGVydHkiLCJhc3NpZ25TaGFyZWRPYmplY3RSZXNwb25kZXIiLCJnZXRSZW1vdGVTaGFyZWRPYmplY3QiLCJjb25uZWN0VG9TaGFyZWRPYmplY3QiLCJkaXNjb25uZWN0RnJvbVNoYXJlZE9iamVjdCIsImluZmxhdGUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJSVENNZWRpYVZpZGVvQ29uc3RyYWludCIsIlJUTVBNZWRpYVZpZGVvQ29uc3RyYWludCIsIlJUQ01lZGlhQ29uc3RyYWludCIsIlJUTVBNZWRpYUNvbnN0cmFpbnQiLCJTbGlkZXJFdmVudCIsImNvbnRyb2wiLCJfY29udHJvbCIsInB2dCIsImN0eCIsImhhcyIsInNldCIsImdldCIsIkltcGxGYWN0b3J5T3JkZXIiLCJsaXN0b3JkZXIiLCJpdGVyYXRvciIsImluaXRGbiIsImxhc3RFcnJvciIsIm5leHQiLCJJbXBsIiwiY29uY3JldGUiLCJvcmRlciIsImRvbmUiLCJjdXJyeSIsImZ4IiwiYXJpdHkiLCJmMSIsImFyZ3MiLCJBcnJheSIsInByb3RvdHlwZSIsImFyZ3VtZW50cyIsImFwcGx5IiwiZjIiLCJhcmdzMiIsImZpbHRlciIsImlkeCIsImxlbiIsInRvSW50Iiwicm91bmQiLCJnZXRPckVsc2UiLCJkZWZhdWx0VmFsdWUiLCJnZXRJbnRPckVsc2UiLCJpc05hTiIsInN1YnNjcmliZXJMaWIiLCJwdWJsaXNoZXJMaWIiLCJzaGFyZWRPYmplY3RMaWIiLCJwbGF5YmFja0VudW0iLCJ3ZWJydGNFbnVtIiwicHVibGlzaGVyRXZlbnQiLCJzdWJzY3JpYmVyRXZlbnQiLCJzaGFyZWRvYmplY3RFdmVudCIsIlJlZDVQcm9TdWJzY3JpYmVyIiwiUlRDU3Vic2NyaWJlciIsIlJUTVBTdWJzY3JpYmVyIiwiSExTU3Vic2NyaWJlciIsIlJlZDVQcm9QdWJsaXNoZXIiLCJSVENQdWJsaXNoZXIiLCJSVE1QUHVibGlzaGVyIiwiUHVibGlzaGVyVmlldyIsIlJlZDVQcm9TaGFyZWRPYmplY3QiLCJzZXRMb2dMZXZlbCIsInRvVXBwZXJDYXNlIiwibG9nIiwiTE9HX0xFVkVMUyIsIl9nZXRMb2dnZXIiLCJqc29uQXR0ciIsImpzb25WYWwiLCJyZWFkVVRGIiwic3RhcnQiLCJvZmZzZXQiLCJlbmQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJwYXJzZUpTT05Gb3JPcmllbnRhdGlvbiIsImV4ZWMiLCJtYXRjaDIiLCJjYWxsYmFjayIsInRleHRUcmFja3MiLCJhZGRUZXh0VHJhY2siLCJ0cmFjayIsImFkZFRyYWNrRXZlbnQiLCJtb2RlIiwiY3VlcyIsImN1ZUNoYW5nZUV2ZW50IiwiY3VycmVudFRhcmdldCIsImFjdGl2ZUN1ZXMiLCJzaXplIiwiTm9TdXBwb3J0ZWRDYW1lcmFSZXNvbHV0aW9uc0Vycm9yIiwiUHVibGlzaGVyU29ja2V0SGVscGVyIiwib25TRFBBbnN3ZXIiLCJvbkVtcHR5Q2FuZGlkYXRlIiwib25BZGRJY2VDYW5kaWRhdGUiLCJvblNvY2tldEljZUNhbmRpZGF0ZUVuZCIsIm9uUHVibGlzaGVyU3RhdHVzIiwibWV0aG9kIiwib25TZW5kUmVjZWl2ZWQiLCJvbk1ldGFEYXRhIiwiU3Vic2NyaXB0aW9uU29ja2V0SGVscGVyIiwib25TRFBPZmZlciIsIm9uVW5wdWJsaXNoIiwib25Db25uZWN0aW9uQ2xvc2VkIiwib25TdWJzY3JpYmVyU3RhdHVzIiwic3RhdHVzIiwibWV0YWRhdGEiLCJ3ZWJydGMiLCJQdWJsaXNoZXJQZWVySGVscGVyIiwiX3BlZXJDb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsIm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlIiwib25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UiLCJvbmljZWNhbmRpZGF0ZSIsInJlY29ubmVjdFRpbWVvdXQiLCJ0aW1lb3V0TGltaXQiLCJjb25uZWN0aW9uU3RhdGUiLCJvbkljZUNhbmRpZGF0ZSIsImljZUNvbm5lY3Rpb25TdGF0ZSIsIm9uUGVlckdhdGhlcmluZ0NvbXBsZXRlIiwib25QZWVyQ29ubmVjdGlvbkNsb3NlIiwib25zaWduYWxpbmdzdGF0ZWNoYW5nZSIsInNpZ25hbGluZ1N0YXRlIiwib25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSIsImljZUdhdGhlcmluZ1N0YXRlIiwib25yZW1vdmVzdHJlYW0iLCJiYW5kd2lkdGgiLCJvZmZlclByb21pc2UiLCJjcmVhdGVPZmZlciIsInNlc3Npb25EZXNjcmlwdGlvbiIsInNldExvY2FsRGVzY3JpcHRpb24iLCJvblNEUFN1Y2Nlc3MiLCJvblNEUEVycm9yIiwic2V0UmVtb3RlRGVzY3JpcHRpb24iLCJhZGRJY2VDYW5kaWRhdGUiLCJpY2VTZXJ2ZXJzIiwic2V0VXBQcm9taXNlIiwicnRjcE11eFBvbGljeSIsInBlZXJDb25maWciLCJpY2VDYW5kaWRhdGVQb29sU2l6ZSIsImJ1bmRsZVBvbGljeSIsInBlZXIiLCJvcHRpb25hbCIsIlJ0cERhdGFDaGFubmVscyIsImdvb2dDcHVPdmVydXNlRGV0ZWN0aW9uIiwiX2FkZENvbm5lY3Rpb25IYW5kbGVycyIsImNvbmZpZ3VyYXRpb24iLCJfcmVtb3ZlQ29ubmVjdGlvbkhhbmRsZXJzIiwiaXNFbXB0eUNhbmRpZGF0ZSIsIlN1YnNjcmlwdGlvblBlZXJIZWxwZXIiLCJfcGVuZGluZ01lZGlhU3RyZWFtIiwib250cmFjayIsIm9uSWNlQ2FuZGlkYXRlVHJpY2tsZUVuZCIsIm9uQW5zd2VyTWVkaWFTdHJlYW0iLCJjcmVhdGVBbnN3ZXIiLCJpY2VDYW5kaWRhdGUiLCJzZHBNTGluZUluZGV4IiwicmVjIiwidG9JU09TdHJpbmciLCJuYW1lRnJvbUxldmVsIiwicHVibGlzaEZhY3RvcnkiLCJwdWJsaXNoZXJJbXBsIiwiX29wdGlvbnMiLCJfb3JkZXIiLCJ0IiwiZW50cnkiLCJfZ2V0UHVibGlzaGVyRnJvbU9yZGVyIiwiZW1iZWQiLCJjb252ZXJ0RGltZW5zaW9uT3B0aW9ucyIsInZvIiwibWVkaWFDb25zdHJhaW50c1RvRmxhc2h2YXJzIiwiZnYiLCJQdWJsaXNoZXJTb3VyY2VIYW5kbGVyIiwic29SZXNwb25kZXIiLCJjbG9uZSIsImNsb25lTm9kZSIsImhvbGRlciIsIl9wdWJsaXNoZXJUeXBlIiwiX3N3ZklkIiwiX2VtYmVkRnV0dXJlIiwiX3NvUmVzcG9uZGVyIiwic3dmVXJsIiwiYnVmZmVyIiwic3RyZWFtTW9kZSIsImFwcE5hbWUiLCJyb29tTmFtZSIsImF1dG9zaXplIiwibWVkaWFDb25zdHJhaW50cyIsInB1Ymxpc2hPcHRpb25zIiwiY29ubmVjdCIsImRpc2Nvbm5lY3QiLCJjbGVhblVwIiwiYWRkUmVzcG9uc2VIYW5kbGVyIiwicmVtb3ZlUmVzcG9uc2VIYW5kbGVyIiwic2VuZFRvU2hhcmVkT2JqZWN0Iiwic2VuZFByb3BlcnR5VG9TaGFyZWRPYmplY3QiLCJjbG9zZVNoYXJlZE9iamVjdCIsInVwZGF0ZVJlc29sdXRpb24iLCJwdWJTdGFydFJlZ2V4IiwicHViU3RvcFJlZ2V4IiwiZGVmYXVsdE9wdGlvbnMiLCJrZXlGcmFtZXJhdGUiLCJtZWRpYUVsZW1lbnRJZCIsInJ0Y0NvbmZpZ3VyYXRpb24iLCJ1cmxzIiwiaWNlVHJhbnNwb3J0Iiwib25HZXRVc2VyTWVkaWEiLCJfdmlldyIsIl9wZWVySGVscGVyIiwiX3NvY2tldEhlbHBlciIsIl9tZWRpYVN0cmVhbSIsIl9zdHJlYW1GdXR1cmUiLCJfYXZhaWxhYmxlRnV0dXJlIiwiX3BlZXJGdXR1cmUiLCJfb2ZmZXJGdXR1cmUiLCJfc2VuZE9mZmVyRnV0dXJlIiwiX3RyaWNrbGVFbmRGdXR1cmUiLCJfcHVibGlzaEZ1dHVyZSIsIl91bnB1Ymxpc2hGdXR1cmUiLCJfb25PcmllbnRhdGlvbkNoYW5nZSIsInRyaWdnZXIiLCJyZWoiLCJfZ3VtIiwiZGV2aWNlT3JpZW50YXRpb24iLCJwcmV2aWV3IiwiY3VycmVudFZpZXciLCJhdHRhY2hQdWJsaXNoZXIiLCJidW5kbGUiLCJzZXRVcFdpdGhQZWVyQ29uZmlndXJhdGlvbiIsInRyYW5zcG9ydCIsIl9zZW5kT2ZmRnV0dXJlIiwiaGFuZGxlT2ZmZXIiLCJmcmFtZXJhdGUiLCJwdWJsaXNoIiwidW5wdWJsaXNoIiwiX2dldE1lZGlhU3RyZWFtIiwiX29uTWVkaWFTdHJlYW1SZWNlaXZlZCIsIl9zZXRWaWV3SWZOb3RFeGlzdCIsInNvY2tldFByb21pc2UiLCJzb2NrZXR1cmwiLCJfZ2V0VHJpY2tsZUVuZCIsIl9yZXF1ZXN0QXZhaWxhYmlsaXR5Iiwic3RyZWFtVHlwZSIsIl9jcmVhdGVQZWVyQ29ubmVjdGlvbiIsImFkZFN0cmVhbSIsIl9jcmVhdGVPZmZlciIsIl9zZW5kT2ZmZXIiLCJfc2V0UmVtb3RlRGVzY3JpcHRpb24iLCJfcmVxdWVzdFB1Ymxpc2giLCJjbGVhckhlbHBlcnMiLCJfcmVxdWVzdFVucHVibGlzaCIsIm11dGVBdWRpbyIsInVubXV0ZUF1ZGlvIiwibXV0ZVZpZGVvIiwicG9zdEFzeW5jIiwiY2FsbEFkYXB0ZXIiLCJyZWNlaXB0IiwiY2xvc2VFdmVudCIsIl9zZW5kQ2FuZGlkYXRlIiwicG9zdEVuZE9mQ2FuZGlkYXRlcyIsInN0b3BSZXN1bHQiLCJzdGFydFJlc3VsdCIsIm5ld09wdGlvbnMiLCJzd2ZvYmplY3RVUkwiLCJfc291cmNlSGFuZGxlciIsIl9lbGVtZW50SWQiLCJfY29ubmVjdEZ1dHVyZSIsImdldFR5cGUiLCJhZGRTb3VyY2UiLCJzZXRBY3RpdmVJZCIsInN1Y2Nlc3NJZCIsIl90ZWFyRG93bkNvbm5lY3RDYWxsYmFjayIsImludm9rZUZuIiwibGFiZWwiLCJfc2V0VXBDb25uZWN0Q2FsbGJhY2siLCJzcmNIYW5kbGVyIiwiZ2V0RW1iZWRPcGVyYXRpb24iLCJfZXN0YWJsaXNoRXh0SW50SGFuZGxlcnMiLCJjb3VudCIsImxpbWl0IiwidHJ5Q29ubmVjdCIsInNldE1lZGlhUXVhbGl0eSIsIlNPX1NVQlRZUEVfUFJPUEVSVFkiLCJTT19TVUJUWVBFX01FVEhPRCIsInNvTmFtZSIsImRlY29kZU1lc3NhZ2VJZkpTT05TdHJpbmciLCJQcm9wZXJ0eURhdGEiLCJNZXRob2REYXRhIiwibWVzc2FnZUxpc3QiLCJfc29ja2V0IiwiZ2V0Q29ubmVjdGlvbiIsImFkZFNoYXJlZE9iamVjdFJlc3BvbnNlSGFuZGxlciIsInRvT2JqZWN0IiwiZXZlbnRzIiwic3VidHlwZSIsIl9nZXRKc29uRnJvbVNvY2tldE1lc3NhZ2UiLCJfbm90aWZ5T2ZFdmVudHMiLCJfbm90aWZ5T2ZQcm9wZXJ0eVZhbHVlcyIsIm1lc3NhZ2VOYW1lIiwicmVtb3ZlU2hhcmVkT2JqZWN0UmVzcG9uc2VIYW5kbGVyIiwiX2NvbnRhaW5lciIsIl9idXR0b24iLCJjcmVhdGVCdXR0b24iLCJfdHJhY2siLCJjcmVhdGVUcmFjayIsIl9wcm9ncmVzc0JhciIsImNyZWF0ZVByb2dyZXNzQmFyIiwiX3ZhbHVlIiwiX2Rpc2FibGVkIiwiX2V2ZW50U3RhcnRQb3NpdGlvbiIsIl9sYXlvdXQiLCJfbW91c2V1cEhhbmRsZXIiLCJfbW91c2V1cCIsIl9tb3VzZWRvd25IYW5kbGVyIiwiX21vdXNlZG93biIsIl9tb3VzZW1vdmVIYW5kbGVyIiwiX21vdXNlbW92ZSIsIl90b3VjaHVwSGFuZGxlciIsIl90b3VjaHByb3h5IiwiX3RvdWNoZG93bkhhbmRsZXIiLCJfdG91Y2htb3ZlSGFuZGxlciIsIl91cGRhdGVIYW5kbGVycyIsInByZXZlbnREZWZhdWx0IiwidG91Y2hlcyIsImV2dCIsInRvdWNoIiwib3JpZ2luYWxUYXJnZXQiLCJ0YXJnZXQiLCJjaGFuZ2VkVG91Y2hlcyIsImluaXRNb3VzZUV2ZW50Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRZIiwiY3RybEtleSIsImFsdEtleSIsInNoaWZ0S2V5IiwibWV0YUtleSIsImRpc3BhdGNoRXZlbnQiLCJwb3NpdGlvbk9mZnNldCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc0Rpc2FibGVkIiwicGVyY2VudFZhbHVlIiwiYm9vbCIsInBsYXliYWNrRmFjdG9yeSIsInBsYXliYWNrSW1wbCIsIl9nZXRQbGF5YmFja0Zyb21PcmRlciIsImdlbmVyYXRlU3Vic2NyaXB0aW9uSWQiLCJtaW1lVHlwZSIsImF1dG9MYXlvdXRPcmllbnRhdGlvbiIsIm11dGVPbkF1dG9wbGF5UmVzdHJpY3Rpb24iLCJzdWJzY3JpcHRpb25JZCIsIm9wdGlvbnNUb0hsc1VSTCIsImhsc3Byb3RvY29sIiwiaGxzcG9ydCIsIl92aWV3UmVzb2x2ZXIiLCJfc3Vic2NyaXB0aW9uUmVzb2x2ZXIiLCJfYm91bmRCdWJibGVTdWJzY3JpYmVyRXZlbnRzIiwiYnViYmxlU3Vic2NyaWJlckV2ZW50cyIsInN0b3AiLCJhdHRhY2hTdWJzY3JpYmVyIiwidXJsUmVnZXgiLCJfZ2V0Vmlld1Jlc29sdmVyUHJvbWlzZSIsIkhMU1NvdXJjZUhhbmRsZXIiLCJfZ2xvbVNvdXJjZUhhbmRsZXJBUEkiLCJfaW5pdEhhbmRsZXIiLCJfZ2V0U3Vic2NyaXB0aW9uUmVzb2x2ZXJQcm9taXNlIiwiZ2V0Q29udHJvbHMiLCJzdWJTdGFydFJlZ2V4IiwibWFpbnRhaW5Db25uZWN0aW9uT25TdWJzY3JpYmVFcnJvcnMiLCJfY29ubmVjdGlvbkNsb3NlZCIsIl9hdmFpbGFiaWxpdHlSZXNvbHZlciIsIl9vcmllbnRhdGlvbiIsInZFbmNvZGluZyIsImFFbmNvZGluZyIsIm9mZmVyIiwicmVxdWVzdE9mZmVyIiwicmVxdWVzdElkIiwidmlkZW9FbmNvZGluZyIsImF1ZGlvRW5jb2RpbmciLCJfc2VuZEFuc3dlciIsImhhbmRsZUFuc3dlciIsIl9yZXF1ZXN0T2ZmZXIiLCJhdHRlbXB0QXV0b3BsYXkiLCJzdWJzY3JpYmUiLCJfZGlzY29ubmVjdCIsIlJUQ1NvdXJjZUhhbmRsZXIiLCJfZ2V0QXZhaWxhYmlsaXR5UmVzb2x2ZXJQcm9taXNlIiwiX2Nvbm5lY3QiLCJfcmVxdWVzdEFuc3dlciIsImF0dGFjaFN0cmVhbSIsIl9zZW5kU3Vic2NyaWJlIiwiX3BsYXlJZkF1dG9wbGF5U2V0IiwiaGFuZGxlT3JpZW50YXRpb25DaGFuZ2UiLCJ2aWV3RWxlbWVudCIsInN0YW5kYnkiLCJwcm9kdWN0SW5zdGFsbFVybCIsInVzZUFkYXB0aXZlQml0cmF0ZUNvbnRyb2xsZXIiLCJhYnJWYXJpYW50cyIsImFiclZhcmlhbnRVcGdyYWRlU2V0dGluZ3MiLCJtaW5pbXVtRG93bmdyYWRlUGxheWJhY2tTcGFuIiwidXBncmFkZSIsInJldHJ5VGltZW91dCIsIl9lbWJlZFByb21pc2UiLCJfZ2V0RW1iZWRQcm9taXNlIiwib25FbWJlZENvbXBsZXRlIiwib25FbWJlZEZhaWx1cmUiLCJzZXRBQlJMZXZlbCIsInNldEFCUlZhcmlhbnRzIiwic3RvcEFCUkNvbnRyb2xsZXIiLCJzdGFydEFCUkNvbnRyb2xsZXIiLCJzZXRBQlJWYXJpYW50VXBncmFkZVNldHRpbmdzIiwicGF5bG9hZCIsInZvbHVtZSIsInNldHRpbmdzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXN0YWJsaXNoU291cmNlSGFuZGxlciIsIlJUTVBTb3VyY2VIYW5kbGVyIiwic3Vic2NyaWJlcklkIiwiZW1iZWREZmQiLCJnZXRFbWJlZGRlZFZpZXciLCJfZGV0ZXJtaW5lSG9sZGVyIiwicGxheWVyVHlwZSIsIl9pc1ZPRCIsIl9jb250cm9scyIsIl9wbGF5YmFja05vdGlmaWNhdGlvbkNlbnRlciIsIl9oYW5kbGVGdWxsU2NyZWVuQ2hhbmdlIiwiaW5zZXJ0QmVmb3JlIiwiZWxQYXJlbnQiLCJtZWRpYUhvbGRlciIsImRldGFjaCIsIm5vdGlmaWVyIiwiY29udHJvbHMiLCJoYXNDb250cm9scyIsIm9uY2FucGxheSIsIm9uZHVyYXRpb25jaGFuZ2UiLCJzZXRQbGF5YmFja0R1cmF0aW9uIiwib25lbmRlZCIsIm9udGltZXVwZGF0ZSIsImN1cnJlbnRUaW1lIiwib25zZWVrZWQiLCJvbnNlZWtpbmciLCJvbnBsYXkiLCJvbnBhdXNlIiwib252b2x1bWVjaGFuZ2UiLCJnZXRWb2x1bWUiLCJvbmVuY3J5cHRlZCIsIm9uZW1wdGllZCIsIm9ubG9hZGVkZGF0YSIsIm9ubG9hZHN0YXJ0Iiwib25zdGFsbGVkIiwib25zdXNwZW5kIiwib253YWl0aW5nIiwiZmlyc3RDaGlsZCIsImhhc0RlZmluZWRDb250cm9scyIsImlzTXV0ZWQiLCJ1c2VQbGF5YmFja0NvbnRyb2xzIiwiX2VtYmVkTWVkaWFTb3VyY2UiLCJzZXRBc1ZPRCIsIl9hZGRQbGF5YmFja0hhbmRsZXJzIiwibXV0ZU9uQXV0b3BsYXkiLCJfY2xlYW5VcCIsImlzVk9EU3RyZWFtTmFtZSIsInRlc3QiLCJub3RpZmljYXRpb25DZW50ZXIiLCJfdGVhckRvd25Jbml0Q2FsbGJhY2siLCJfc2V0VXBJbml0Q2FsbGJhY2siLCJlbWJlZGRlZCIsImNsYXp6IiwiZmlybSIsImFiclZhcmlhbnRVcGdyYWRlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTztBQ1ZBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBMkMsY0FBYzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFF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QixvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDNUM7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1EOzs7Ozs7O0FDejVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsT0FBTztBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQixxQkFBcUI7QUFDckI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsT0FBTztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCIiwiZmlsZSI6InJlZDVwcm8tc2RrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicmVkNXByb3Nka1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJyZWQ1cHJvc2RrXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjA4KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA0MDQyNjkwNTViOWRhODk1OGY4NCIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJ2Jyb3dzZXItYnVueWFuJ1xuaW1wb3J0IHsgUmF3U3RyZWFtIH0gZnJvbSAnLi9idW55YW4td3JpdGVyJ1xuXG5sZXQgbG9nZ2VyXG5cbmNvbnN0IGZvcm1hdE1lc3NhZ2UgPSAoZGlzcGF0Y2hlcikgPT4ge1xuICByZXR1cm4gbWVzc2FnZSA9PiB7XG4gICAgcmV0dXJuIGAoJHtkaXNwYXRjaGVyfSkgJHttZXNzYWdlfWBcbiAgfVxufVxuXG5jb25zdCBkZWNvcmF0ZSA9IChsZXZlbCkgPT4ge1xuICByZXR1cm4gKHNvdXJjZSwgbWVzc2FnZSkgPT4ge1xuICAgIGxvZ2dlcltsZXZlbF0oZm9ybWF0TWVzc2FnZShzb3VyY2UpKG1lc3NhZ2UpKVxuICB9XG59XG5cbi8qXG4gKiBUaGUgbG9nIGxldmVscyBzdXBwb3J0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBMRVZFTFMgPSB7XG4gIFRSQUNFOiAndHJhY2UnLFxuICBJTkZPOiAnaW5mbycsXG4gIERFQlVHOiAnZGVidWcnLFxuICBXQVJOOiAnd2FybicsXG4gIEVSUk9SOiAnZXJyb3InLFxuICBGQVRBTDogJ2ZhdGFsJ1xufVxuXG4vKipcbiAqIEVzdGFibGlzaCBsb2dnZXIgdG8gdXNlIGF0IGxldmVsLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBsZXZlbFxuICogICAgICAgIFRoZSBsZXZlbCB0eXBlIGZyb20gYExFVkVMU2AuXG4gKiBAcGFyYW0ge0FycmF5fSBzdHJlYW1MaXN0XG4gKiAgICAgICAgVGhlIHN0cmVhbUxpc3QgdG8gdXNlIGluIGNyZWF0aW5nIGJ1bnlvbi1iYXNlZCBsb2dnZXIuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGVzdGFibGlzaExvZ2dlciA9IChsZXZlbCwgc3RyZWFtTGlzdCA9IHVuZGVmaW5lZCkgPT4ge1xuICBsZXQgc3RyZWFtcyA9IFtdXG4gIHN0cmVhbXMucHVzaCh7XG4gICAgbGV2ZWw6IGxldmVsLFxuICAgIHN0cmVhbTogbmV3IFJhd1N0cmVhbSgpLFxuICAgIHR5cGU6ICdyYXcnXG4gIH0pXG4gIGlmIChzdHJlYW1MaXN0KSB7XG4gICAgY29uc3QgbGlzdCA9IHN0cmVhbUxpc3QubWFwKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5sZXZlbCA9IGxldmVsXG4gICAgfSlcbiAgICBzdHJlYW1zID0gc3RyZWFtcy5jb25jYXQobGlzdClcbiAgfVxuICBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xuICAgIGxldmVsOiBsZXZlbCxcbiAgICBuYW1lOiAncmVkNXByby1zZGsnLFxuICAgIHN0cmVhbXM6IHN0cmVhbXNcbiAgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGRldGVybWluZWQgbG9nZ2VyIGluc3RhbmNlLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0TG9nZ2VyID0gKCkgPT4ge1xuICByZXR1cm4gbG9nZ2VyXG59XG5cbi8qIFF1aWNrIGFjY2VzcyB0byBsb2dnZXIgbGV2ZWwgdHlwZXMuICovXG5leHBvcnQgY29uc3QgdHJhY2UgPSBkZWNvcmF0ZShMRVZFTFMuVFJBQ0UpXG5leHBvcnQgY29uc3QgaW5mbyA9IGRlY29yYXRlKExFVkVMUy5JTkZPKVxuZXhwb3J0IGNvbnN0IGRlYnVnID0gZGVjb3JhdGUoTEVWRUxTLkRFQlVHKVxuZXhwb3J0IGNvbnN0IHdhcm4gPSBkZWNvcmF0ZShMRVZFTFMuV0FSTilcbmV4cG9ydCBjb25zdCBlcnJvciA9IGRlY29yYXRlKExFVkVMUy5FUlJPUilcbmV4cG9ydCBjb25zdCBmYXRhbCA9IGRlY29yYXRlKExFVkVMUy5GQVRBTClcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2xvZy9pbmRleC5qcyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgRGVmZXJyZWRQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9wcm9taXNlJ1xuaW1wb3J0IHsgTm9FbGVtZW50Rm91bmRFcnJvciB9IGZyb20gJy4uL2V4Y2VwdGlvbi9lcnJvcnMnXG5pbXBvcnQgeyBvbk9yaWVudGF0aW9uTWV0YWRhdGEgfSBmcm9tICcuL21ldGFkYXRhLXV0aWwnXG5pbXBvcnQgeyBkZWJ1Zywgd2FybiB9IGZyb20gJy4uL2xvZydcblxubGV0IHJ0bXBTdWJzY3JpYmVyQXNzaWdubWVudHMgPSBbXVxuXG4vKiBQcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHJlbGF0ZWQgdG8gaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2NyZWVuZnVsbC5qcyBsaWJyYXJ5LiAqL1xubGV0IGZ1bGxzY3JlZW5IYW5kbGVycyA9IFtdXG5sZXQgc2NyZWVuZnVsbEhhbmRsZXJBc3NpZ25lZCA9IGZhbHNlXG5mdW5jdGlvbiBlbmFibGVTY3JlZW5mdWxsSGFuZGxlciAoKSB7XG4gIGlmICghc2NyZWVuZnVsbEhhbmRsZXJBc3NpZ25lZCAmJiB3aW5kb3cuc2NyZWVuZnVsbCAmJiB3aW5kb3cuc2NyZWVuZnVsbC5lbmFibGVkKSB7XG4gICAgICBzY3JlZW5mdWxsSGFuZGxlckFzc2lnbmVkID0gdHJ1ZVxuICAgICAgd2luZG93LnNjcmVlbmZ1bGwub25jaGFuZ2UoKCkgPT4ge1xuICAgICAgICBsZXQgaSwgbGVuZ3RoID0gZnVsbHNjcmVlbkhhbmRsZXJzLmxlbmd0aFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmdWxsc2NyZWVuSGFuZGxlcnNbaV0od2luZG93LnNjcmVlbmZ1bGwuaXNGdWxsc2NyZWVuKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG59XG5cbi8qIFByb3BlcnRpZXMgYW5kIG1ldGhvZHMgcmVsYXRlZCB0byBkZXZpY2UgYnJvd3NlciBvcmllbnRhdGlvbiBjaGFuZ2UuICovXG5sZXQgb3JpZW50YXRpb25IYW5kbGVycyA9IFtdXG5mdW5jdGlvbiBvbm9yaWVudGF0aW9uY2hhbmdlIChldmVudCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIGNvbnN0IHNjcmVlbk9yaWVudGF0aW9uID0gc2NyZWVuLm9yaWVudGF0aW9uID8gc2NyZWVuLm9yaWVudGF0aW9uLmFuZ2xlIDogdW5kZWZpbmVkO1xuICBjb25zdCBvcmllbnRhdGlvblZhbHVlID0gKHR5cGVvZiBzY3JlZW5PcmllbnRhdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIFxuICAgID8gKHdpbmRvdy5tYXRjaE1lZGlhKFwiKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcIikubWF0Y2hlcyA/IDAgOiA5MCkgXG4gICAgOiBzY3JlZW5PcmllbnRhdGlvbjtcbiAgbGV0IGksIGxlbmd0aCA9IG9yaWVudGF0aW9uSGFuZGxlcnMubGVuZ3RoXG4gIGRlYnVnKGBbd2luZG93Om9ub3JpZW50YXRpb25jaGFuZ2VdYCwgIGBvcmllbnRhdGlvbigke29yaWVudGF0aW9uVmFsdWV9KS5gKVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBvcmllbnRhdGlvbkhhbmRsZXJzW2ldKChvcmllbnRhdGlvblZhbHVlICsgOTApICUgMzYwKVxuICB9XG59XG5cbi8qIFByb3BlcmllcyBhbmQgbWV0aG9kcyByZWxhdGVkIHRvIHdpbmRvdyBjbG9zZSBvcGVyYXRpb24uICovXG5sZXQgY2xvc2VIYW5kbGVycyA9IFtdXG5sZXQgaGFzT25XaW5kb3dDbG9zZSA9IGZhbHNlXG5mdW5jdGlvbiBvbndpbmRvd2Nsb3NlIChlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgLy8gIGNsb3NlSGFuZGxlcnMuZm9yRWFjaChoID0+IGgoKSlcbiAgbGV0IGksIGxlbmd0aCA9IGNsb3NlSGFuZGxlcnMubGVuZ3RoXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGNsb3NlSGFuZGxlcnNbaV0oKVxuICB9XG4gIGhhc09uV2luZG93Q2xvc2UgPSB0cnVlXG4gIC8vIFJldHVybmluZyBhIHN0cmluZyB2YWx1ZSBmb3JjZXMgYSBsZWF2aW5nIGNvbmZpcm1hdGlvbiBwb3B1cCBvbiB0aGUgYnJvd3Nlci5cbiAgLy8gIGUucmV0dXJuVmFsdWUgPSAnZ29vZGJ5ZSdcbiAgLy8gIHJldHVybiAnZ29vZGJ5ZSdcbn1cblxuLyogQ2hlY2sgdG8gc2VlIHdoYXQgdGhlIGN1cnJlbnQgZmxhc2ggdmVyc2lvbiBpcywgaWYgcGx1Z2luIGlzIGVuYWJsZWQuICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9ibG9iL21hc3Rlci9zcmMvanMvdGVjaC9mbGFzaC5qcyNMNDc2XG5jb25zdCBmbGFzaFZlcnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGxldCB2ZXJzaW9uID0gJzAsMCwwJ1xuICAvLyBJRVxuICB0cnkge1xuICAgIHZlcnNpb24gPSBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoJ1Nob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoJykuR2V0VmFyaWFibGUoJyR2ZXJzaW9uJykucmVwbGFjZSgvXFxEKy9nLCAnLCcpLm1hdGNoKC9eLD8oLispLD8kLylbMV1cblxuICAvLyBvdGhlciBicm93c2Vyc1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChuYXZpZ2F0b3IubWltZVR5cGVzWydhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCddLmVuYWJsZWRQbHVnaW4pIHtcbiAgICAgICAgdmVyc2lvbiA9IChuYXZpZ2F0b3IucGx1Z2luc1snU2hvY2t3YXZlIEZsYXNoIDIuMCddIHx8IG5hdmlnYXRvci5wbHVnaW5zWydTaG9ja3dhdmUgRmxhc2gnXSkuZGVzY3JpcHRpb24ucmVwbGFjZSgvXFxEKy9nLCAnLCcpLm1hdGNoKC9eLD8oLispLD8kLylbMV1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIG5hZGFcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZlcnNpb24uc3BsaXQoJywnKVxufVxuXG4vKiBTaGltIGZvciBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBvZiBicm93c2VyLiAqL1xuY29uc3QgcmVxdWVzdEZyYW1lID0gKCh0aW1lKSA9PiB7XG4gIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgIGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZm4sIHRpbWUpXG4gICAgICAgICB9XG59KSgxMDAwKTtcblxuY29uc3QgaGFzQWRhcHRlclNoaW0gPSB3aW5kb3cuYWRhcHRlclxuXG4vKiBCcm93c2VyIHRlc3QgdG8gc2VlIGlmIE1vemlsbGEtYmFzZWQuICovXG5jb25zdCBpc01veiA9ICEhbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYVxuXG4vKiBCcm93c2VyIHRlc3QgdG8gc2VlIGlmIEVkZ2UtYmFzZWQuICovXG5jb25zdCBpc0lFID0gZmFsc2UgfHwgISFkb2N1bWVudC5kb2N1bWVudE1vZGVcbmNvbnN0IGlzRWRnZSA9IGhhc0FkYXB0ZXJTaGltID8gd2luZG93LmFkYXB0ZXIuYnJvd3NlckRldGFpbHMuYnJvd3Nlci50b0xvd2VyQ2FzZSgpID09PSAnZWRnZScgOiAhaXNJRSAmJiAhIXdpbmRvdy5TdHlsZU1lZGlhXG5cbi8qIERldGVybWluZSBpZiBjdXJyZW50IGJyb3dzZXIgaGFzIHRvdWNoIGNhcGFiaWxpdGllcy4gKi9cbmNvbnN0IGlzVG91Y2hFbmFibGVkID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8XG4gIHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmXG4gIHdpbmRvdy5kb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoXG5cbi8vIElmIGRldmVsb3BlciBoYXMgbm90IHVzZWQgYWRhcHRlci5qcy5cbmlmICghaGFzQWRhcHRlclNoaW0pIHtcbiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB8fCBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhIHx8IG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEgfHwgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fCBuYXZpZ2F0b3IubXNHZXRVc2VyTWVkaWFcbn1cblxuLyogUHJveHkgdG8gYnJvd3Nlci1iYXNlZCwgc3BlY2lmaWMgZnVuY3Rpb25zLiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuXG4gIHJlcXVlc3RGcmFtZTogcmVxdWVzdEZyYW1lLFxuXG4gIGdldElzTW96OiAoKSA9PiB7XG4gICAgcmV0dXJuIGlzTW96XG4gIH0sXG5cbiAgZ2V0SXNFZGdlOiAoKSA9PiB7XG4gICAgcmV0dXJuIGlzRWRnZVxuICB9LFxuXG4gIGlzVG91Y2hFbmFibGVkOiAoKSA9PiB7XG4gICAgcmV0dXJuIGlzVG91Y2hFbmFibGVkXG4gIH0sXG5cbiAgc3VwcG9ydHNXZWJTb2NrZXQ6ICgpID0+IHtcbiAgICByZXR1cm4gISF3aW5kb3cuV2ViU29ja2V0XG4gIH0sXG5cbiAgc3VwcG9ydHNITFM6ICgpID0+IHtcbiAgICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpXG4gICAgcmV0dXJuIGVsLmNhblBsYXlUeXBlKCdhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ1VSTCcpLmxlbmd0aCA+IDAgfHxcbiAgICAgIGVsLmNhblBsYXlUeXBlKCdhcHBsaWNhdGlvbi94LW1wZWdVUkwnKS5sZW5ndGggPiAwIHx8XG4gICAgICBlbC5jYW5QbGF5VHlwZSgnYXVkaW8vbXBlZ3VybCcpLmxlbmd0aCA+IDAgfHxcbiAgICAgIGVsLmNhblBsYXlUeXBlKCdhdWRpby94LW1wZWd1cmwnKS5sZW5ndGggPiAwXG4gIH0sXG5cbiAgc3VwcG9ydHNGbGFzaFZlcnNpb246ICh2ZXJzaW9uLCBkZWxpbWl0ZXIgPSAnLicpID0+IHtcbiAgICByZXR1cm4gZmxhc2hWZXJzaW9uKClbMF0gPj0gdmVyc2lvbi5zcGxpdChkZWxpbWl0ZXIpWzBdXG4gIH0sXG5cbiAgcmVzb2x2ZUVsZW1lbnQ6IChpZCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxuICAgICAgaWYgKCFlbCkge1xuICAgICAgICB0aHJvdyBuZXcgTm9FbGVtZW50Rm91bmRFcnJvcihgRWxlbWVudCB3aXRoIGlkKCR7aWR9KSBjb3VsZCBub3QgYmUgZm91bmQuYClcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBOb0VsZW1lbnRGb3VuZEVycm9yKGBFcnJvciBpbiBhY2Nlc3NpbmcgZWxlbWVudCB3aXRoIGlkKCR7aWR9KS4gJHtlLm1lc3NhZ2V9YClcbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlV2ViU29ja2V0OiAodXJsKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBXZWJTb2NrZXQodXJsKVxuICB9LFxuXG4gIHNldFZpZGVvU291cmNlOiAodmlkZW9FbGVtZW50LCBtZWRpYVN0cmVhbSwgYXV0b3BsYXkgPSBmYWxzZSkgPT4ge1xuICAgIHZpZGVvRWxlbWVudC5vbmxvYWRlZG1ldGFkYXRhID0gKCkgPT4ge1xuICAgICAgZGVidWcoJ1t2aWRlb2VsZW1lbnQ6ZXZlbnRdJywgJ2xvYWRlZG1ldGFkYXRhJylcbiAgICAgIGRlYnVnKCdbdmlkZW86Y29uc3RyYWludHNdJywgYFZpZGVvIGFjdHVhbCBkaW1lbnNpb25zIGFyZTogJHt2aWRlb0VsZW1lbnQudmlkZW9XaWR0aH0sICR7dmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0fWApXG4gICAgfVxuICAgIGlmICgnc3JjT2JqZWN0JyBpbiB2aWRlb0VsZW1lbnQpIHtcbiAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBtZWRpYVN0cmVhbTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNNb3opIHtcbiAgICAgIHZpZGVvRWxlbWVudFsnbW96U3JjT2JqZWN0J10gPSBtZWRpYVN0cmVhbVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZpZGVvRWxlbWVudC5zcmMgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChtZWRpYVN0cmVhbSlcbiAgICB9XG4gICAgaWYgKGF1dG9wbGF5KSB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgbWF5YmVQcm9taXNlID0gdmlkZW9FbGVtZW50LnBsYXkoKVxuICAgICAgICBpZiAobWF5YmVQcm9taXNlKSB7XG4gICAgICAgICAgbWF5YmVQcm9taXNlLnRoZW4oKCkgPT4gZGVidWcoJ1tzZXRWaWRlb1NvdXJjZTphY3Rpb25dJywgJ3BsYXkgKFNUQVJUKScpKVxuICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHdhcm4oJ1tzZXRWaWRlb1NvdXJjZTphY3Rpb25dJywgJ3BsYXkgKEZBVUxUKSAnICsgKGVyci5tZXNzYWdlID8gZXJyLm1lc3NhZ2UgOiBlcnIpKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gTW9iaWxlIEJyb3dzZXJzOiBVbmNhdWdodCAoaW4gcHJvbWlzZSkgRE9NRXhjZXB0aW9uOiBwbGF5KCkgY2FuIG9ubHkgYmUgaW5pdGlhdGVkIGJ5IGEgdXNlciBnZXN0dXJlLlxuICAgICAgICB3YXJuKCdbc2V0VmlkZW9Tb3VyY2U6YWN0aW9uXScsICdwbGF5IChDQVRDSDo6RkFVTFQpICcgKyBlLm1lc3NhZ2UpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmlkZW9FbGVtZW50LnNldEF0dHJpYnV0ZSgnYXV0b3BsYXknLCBmYWxzZSlcbiAgICAgICAgICB2aWRlb0VsZW1lbnQucGF1c2UoKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB3YXJuKCdbc2V0VmlkZW9Tb3VyY2U6YWN0aW9uXScsICdwYXVzZSAoQ0FUQ0g6OkZBVUxUKSAnICsgZXJyLm1lc3NhZ2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB2aWRlb0VsZW1lbnQuc2V0QXR0cmlidXRlKCdhdXRvcGxheScsIGZhbHNlKVxuICAgICAgICB2aWRlb0VsZW1lbnQucGF1c2UoKVxuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbmFkYS5cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgaW5qZWN0U2NyaXB0OiAodXJsKSA9PiB7XG4gICAgbGV0IGRmZCA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIGxldCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICBzY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgZGZkLnJlc29sdmUoKVxuICAgIH1cbiAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNjcmlwdC5yZWFkeVN0YXRlID09PSAnbG9hZGVkJyB8fCBzY3JpcHQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbFxuICAgICAgICBkZmQucmVzb2x2ZSgpXG4gICAgICB9XG4gICAgfVxuICAgIHNjcmlwdC5zcmMgPSB1cmxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcmlwdClcbiAgICByZXR1cm4gZGZkLnByb21pc2VcbiAgfSxcblxuICBnVU06IChjb25zdHJhaW50cykgPT4ge1xuICAgIHJldHVybiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyB8fCBuYXZpZ2F0b3IpLmdldFVzZXJNZWRpYShjb25zdHJhaW50cylcbiAgfSxcblxuICBzZXRHbG9iYWw6IChwcm9wLCB2YWx1ZSkgPT4ge1xuICAgIHdpbmRvd1twcm9wXSA9IHZhbHVlXG4gIH0sXG5cbiAgZ2V0U3dmT2JqZWN0OiAoKSA9PiB7XG4gICAgcmV0dXJuIHdpbmRvdy5zd2ZvYmplY3RcbiAgfSxcblxuICBnZXRFbWJlZE9iamVjdDogKGlkKSA9PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxuICB9LFxuXG4gIGdldEVsZW1lbnRJZDogKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgfSxcblxuICBhZGRPcmllbnRhdGlvbkNoYW5nZUhhbmRsZXI6IChoYW5kbGVyLCBhbmRDYWxsID0gdHJ1ZSkgPT4ge1xuICAgIGNvbnN0IHN1cHBvcnRzT3JpZW50YXRpb25DaGFuZ2UgPSAnb25vcmllbnRhdGlvbmNoYW5nZScgaW4gd2luZG93XG4gICAgaWYgKHN1cHBvcnRzT3JpZW50YXRpb25DaGFuZ2UpIHtcbiAgICAgIGRlYnVnKCdbd2luZG93Om9yaWVudGF0aW9uXScsICdbYWRkT3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyXScsICdhZGRpbmcgcmVzcG9uZGVyLicpXG4gICAgICBvcmllbnRhdGlvbkhhbmRsZXJzLnB1c2goaGFuZGxlcilcbiAgICAgIGlmIChhbmRDYWxsKSB7XG4gICAgICAgIG9ub3JpZW50YXRpb25jaGFuZ2UoKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3JpZW50YXRpb25IYW5kbGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRlYnVnKCdbd2luZG93Om9yaWVudGF0aW9uXScsICdbYWRkT3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyXScsICdvbm9yaWVudGF0aW9uY2hhbmdlIGFkZGVkLicpXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvbm9yaWVudGF0aW9uY2hhbmdlKVxuICAgIH1cbiAgfSxcblxuICByZW1vdmVPcmllbnRhdGlvbkNoYW5nZUhhbmRsZXI6IChoYW5kbGVyKSA9PiB7XG4gICAgbGV0IGkgPSBvcmllbnRhdGlvbkhhbmRsZXJzLmxlbmd0aFxuICAgIHdoaWxlKCAtLWkgPiAtMSkge1xuICAgICAgaWYgKG9yaWVudGF0aW9uSGFuZGxlcnNbaV0gPT09IGhhbmRsZXIpIHtcbiAgICAgICAgb3JpZW50YXRpb25IYW5kbGVycy5zbGljZShpLCAxKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH0gXG4gICAgaWYgKG9yaWVudGF0aW9uSGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZWJ1ZygnW3dpbmRvdzpvcmllbnRhdGlvbl0nLCAnW3JlbW92ZU9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcl06OiBvbm9yaWVudGF0aW9uY2hhbmdlIHJlbW92ZWQuJylcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvbm9yaWVudGF0aW9uY2hhbmdlJywgb25vcmllbnRhdGlvbmNoYW5nZSlcbiAgICB9XG4gIH0sXG5cbiAgYWRkQ2xvc2VIYW5kbGVyOiAoaGFuZGxlciwgaW5zZXJ0VmFsdWUgPSAtMSkgPT4ge1xuICAgIGNsb3NlSGFuZGxlcnMuc3BsaWNlKGluc2VydFZhbHVlID09PSAtMSA/IGNsb3NlSGFuZGxlcnMubGVuZ3RoIDogaW5zZXJ0VmFsdWUsIDAsIGhhbmRsZXIpXG4gICAgLy8gTk9URTogUmVtb3ZlZCBvbmJlZm9yZXVubG9hZCBpbiBmYXZvciBvZiBkZXZlbG9wZXJzIHByb3Blcmx5IGhhbmRsaW5nIHNodXRkb3duLlxuICAgIC8vICAgIGlmICh3aW5kb3cub25iZWZvcmV1bmxvYWQgIT09IG9ud2luZG93Y2xvc2UpIHtcbiAgICAvLyB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSBvbndpbmRvd2Nsb3NlXG4gICAgaWYgKCFoYXNPbldpbmRvd0Nsb3NlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgb253aW5kb3djbG9zZSlcbiAgICB9XG4gICAgLy8gfVxuICB9LFxuXG4gIHJlbW92ZUNsb3NlSGFuZGxlcjogKGhhbmRsZXIpID0+IHtcbiAgICBsZXQgaSA9IGNsb3NlSGFuZGxlcnMubGVuZ3RoXG4gICAgd2hpbGUoIC0taSA+IC0xKSB7XG4gICAgICBpZiAoY2xvc2VIYW5kbGVyc1tpXSA9PT0gaGFuZGxlcikge1xuICAgICAgICBjbG9zZUhhbmRsZXJzLnNsaWNlKGksIDEpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGludm9rZTogKG1ldGhvZE5hbWUsIGRhdGEpID0+IHtcbiAgICBpZiAod2luZG93Lmhhc093blByb3BlcnR5KG1ldGhvZE5hbWUpKSB7XG4gICAgICB3aW5kb3dbbWV0aG9kTmFtZV0uY2FsbCh3aW5kb3csIGRhdGEpXG4gICAgfVxuICB9LFxuXG4gIC8vIHJlcXVpcmVzIDxzY3JpcHQgc3JjPVwibGliL3NjcmVlbmZ1bGwvc2NyZWVuZnVsbC5taW4uanNcIj48L3NjcmlwdD5cbiAgdG9nZ2xlRnVsbFNjcmVlbjogKGVsZW1lbnQpID0+IHtcbiAgICBpZiAod2luZG93LnNjcmVlbmZ1bGwgJiYgd2luZG93LnNjcmVlbmZ1bGwuZW5hYmxlZCkge1xuICAgICAgd2luZG93LnNjcmVlbmZ1bGwudG9nZ2xlKGVsZW1lbnQpXG4gICAgfVxuICB9LFxuXG4gIG9uRnVsbFNjcmVlblN0YXRlQ2hhbmdlOiAoY2IpID0+IHtcbiAgICBmdWxsc2NyZWVuSGFuZGxlcnMucHVzaChjYilcbiAgICBlbmFibGVTY3JlZW5mdWxsSGFuZGxlcih3aW5kb3cuc2NyZWVuZnVsbClcbiAgfSxcblxuICBvbk9yaWVudGF0aW9uTWV0YWRhdGE6IG9uT3JpZW50YXRpb25NZXRhZGF0YSxcblxuICBoYXNBdHRyaWJ1dGVEZWZpbmVkOiAoZWxlbSwgYXR0cmlidXRlKSA9PiB7XG4gICAgY29uc3QgYXR0ID0gZWxlbS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKVxuICAgIHJldHVybiAoYXR0ICE9PSBudWxsICYmIHR5cGVvZiBhdHQgIT09IHVuZGVmaW5lZCkgJiZcbiAgICAgICAgICAodHlwZW9mIGF0dCA9PT0gJ3N0cmluZycgJiYgKGF0dCA9PT0gJycgfHwgYXR0ID09PSAndHJ1ZScgfHwgYXR0ID09PSBhdHRyaWJ1dGUpKVxuICB9LFxuXG4gIGhhc0NsYXNzRGVmaW5lZDogKGVsZW0sIGNsYXNzTmFtZSkgPT4ge1xuICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpXG4gIH0sXG5cbiAgY3JlYXRlRWxlbWVudDogKHRhZ05hbWUsIG9wdHMpID0+IHtcbiAgICBpZiAodGFnTmFtZSA9PT0gJ3RleHQnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUob3B0cy50b1N0cmluZygpKVxuICAgIH1cbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBvcHRzKVxuICB9LFxuXG4gIGFkZFN1YnNjcmlwdGlvbkFzc2lnbm1lbnRIYW5kbGVyOiAoZm4pID0+IHtcbiAgICBydG1wU3Vic2NyaWJlckFzc2lnbm1lbnRzLnB1c2goZm4pXG4gICAgaWYgKHdpbmRvdy5zZXRTdWJzY3JpYmVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgd2luZG93LnNldFN1YnNjcmliZXJJZCA9IChpZCkgPT4ge1xuICAgICAgICBydG1wU3Vic2NyaWJlckFzc2lnbm1lbnRzLnNoaWZ0KCkoaWQpXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGdldE1vdXNlWEZyb21FdmVudDogKGV2ZW50KSA9PiB7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgZXZlbnQgPSB3aW5kb3cuZXZlbnRcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQucGFnZVgpIHtcbiAgICAgIHJldHVybiBldmVudC5wYWdlWFxuICAgIH1cbiAgICBlbHNlIGlmIChldmVudC5jbGllbnRYKSB7XG4gICAgICByZXR1cm4gZXZlbnQuY2xpZW50WCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0XG4gICAgfVxuXG4gICAgcmV0dXJuIDBcbiAgfSxcblxuICBnZXRTY3JvbGxYOiAoKSA9PiB7XG4gICAgcmV0dXJuICh3aW5kb3cucGFnZVhPZmZzZXQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VYT2Zmc2V0XG4gICAgICAgICAgICA6IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlIHx8IGRvY3VtZW50LmJvZHkpLnNjcm9sbExlZnRcbiAgfSxcblxuICBjcmVhdGVFdmVudDogKEV2ZW50VHlwZSkgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFdmVudChFdmVudFR5cGUpXG4gIH0sXG5cbiAgZ2V0R2xvYmFsOiAoKSA9PiB3aW5kb3dcblxufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvZW52L2Jyb3dzZXIuanMiLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBBIERlZmVycmVkUHJvbWlzZSBhbGxvd3MgZm9yIGNvbnN0cnVjdGlvbiBhbmQgYXNzaWdubWVudCBvZiBhIGZ1dHVyZSBmdWxsZmlsbWVudCBvZiBhIGBQcm9taXNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBfRGVmZXJyZWRQcm9taXNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMucmVzb2x2ZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMucmVqZWN0ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZVxuICAgICAgdGhpcy5yZWplY3QgPSByZWplY3RcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogQSBGdXR1cmUgZGV0ZXJtaW5lcyBpZiBleGlzdGFudCBEZWZlcnJlZFByb21pc2UgaXMgYXZhaWxhYmxlIG9yIGNyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgb25lLlxuICpcbiAqIEBwYXJhbSB7RGVmZXJyZWRQcm9taXNlfSBkZWZlcnJlZElmRXhpc3RcbiAqICAgICAgICBBbiBvYmplY3QgdGVzdGVkIGZvciB0cnV0aHktbmVzcy5cbiAqIEByZXR1cm4ge0RlZmVycmVkUHJvbWlzZX1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBfRnV0dXJlID0ge1xuICBjcmVhdGVJZk5vdEV4aXN0OiAoZGVmZXJyZWRJZkV4aXN0KSA9PiB7XG4gICAgbGV0IGYgPSBkZWZlcnJlZElmRXhpc3RcbiAgICBpZiAoIWYpIHtcbiAgICAgIGYgPSBuZXcgX0RlZmVycmVkUHJvbWlzZSgpXG4gICAgfVxuICAgIHJldHVybiBmXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IERlZmVycmVkUHJvbWlzZSA9IF9EZWZlcnJlZFByb21pc2VcbmV4cG9ydCBjb25zdCBGdXR1cmUgPSBfRnV0dXJlXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy91dGlsL3Byb21pc2UuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sXG4gICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZihJU19QUk9UTyl7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGV2ZW50cy5cbiAqL1xuY2xhc3MgRXZlbnQge1xuXG4gIGNvbnN0cnVjdG9yICh0eXBlLCBkYXRhID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fdHlwZSA9IHR5cGVcbiAgICB0aGlzLl9kYXRhID0gZGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIFR5cGUgYWNjZXNzb3IuXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBEYXRhIHJlbGF0ZWQgdG8gZXZlbnQuXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXQgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFcbiAgfVxuXG59XG5cbi8qKlxuICogQmFzZSBQdWJsaXNoZXItcmVsYXRlZCBFdmVudC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudFxuICovXG5jbGFzcyBQdWJsaXNoZXJFdmVudCBleHRlbmRzIEV2ZW50IHtcblxuICBjb25zdHJ1Y3RvciAodHlwZSwgcHVibGlzaGVyLCBkYXRhKSB7XG4gICAgc3VwZXIodHlwZSwgZGF0YSlcbiAgICB0aGlzLl9wdWJsaXNoZXIgPSBwdWJsaXNoZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgUHVibGlzaGVyIGluc3RhbmNlIHRoYXQgZGlzcGF0Y2hlZCB0aGUgZXZlbnQuXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqXG4gICAqIEBzZWUgUmVkNVByb1B1Ymxpc2hlclxuICAgKiBAc2VlIFJUQ1B1Ymxpc2hlclxuICAgKiBAc2VlIFJUTVBQdWJsaXNoZXJcbiAgICovXG4gIGdldCBwdWJsaXNoZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9wdWJsaXNoZXJcbiAgfVxuXG59XG5cbi8qKlxuICogQmFzZSBTdWJzY3JpYmVyLXJlbGF0ZWQgRXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqL1xuY2xhc3MgU3Vic2NyaWJlckV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXG4gIGNvbnN0cnVjdG9yICh0eXBlLCBzdWJzY3JpYmVyLCBkYXRhKSB7XG4gICAgc3VwZXIodHlwZSwgZGF0YSlcbiAgICB0aGlzLl9zdWJzY3JpYmVyID0gc3Vic2NyaWJlclxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBTdWJzY3JpYmVyIGluc3RhbmNlIHRoYXQgZGlzcGF0Y2hlZCB0aGUgZXZlbnQuXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqXG4gICAqIEBzZWUgUmVkNVByb1N1YnNjcmliZXJcbiAgICogQHNlZSBSVENTdWJzY3JpYmVyXG4gICAqIEBzZWUgUlRNUFN1YnNjcmliZXJcbiAgICogQHNlZSBITFN1YnNjcmliZXJcbiAgICovXG4gIGdldCBzdWJzY3JpYmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlclxuICB9XG5cbn1cblxuLyoqXG4gKiBCYXNlIFNoYXJlZE9iamVjdC1yZWxhdGVkIEV2ZW50LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50XG4gKi9cbmNsYXNzIFNoYXJlZE9iamVjdEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXG4gIGNvbnN0cnVjdG9yICh0eXBlLCBzaGFyZWRPYmplY3ROYW1lLCBkYXRhKSB7XG4gICAgc3VwZXIodHlwZSwgZGF0YSlcbiAgICB0aGlzLl9uYW1lID0gc2hhcmVkT2JqZWN0TmFtZVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBTaGFyZWQgT2JqZWN0LlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKlxuICAgKiBAc2VlIHtSZWQ1UHJvU2hhcmVkT2JqZWN0fVxuICAgKi9cbiAgZ2V0IG5hbWUgKCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lXG4gIH1cblxufVxuXG5leHBvcnQgeyBFdmVudCBhcyBFdmVudCB9XG5leHBvcnQgeyBQdWJsaXNoZXJFdmVudCBhcyBQdWJsaXNoZXJFdmVudCB9XG5leHBvcnQgeyBTdWJzY3JpYmVyRXZlbnQgYXMgU3Vic2NyaWJlckV2ZW50IH1cbmV4cG9ydCB7IFNoYXJlZE9iamVjdEV2ZW50IGFzIFNoYXJlZE9iamVjdEV2ZW50IH1cbmV4cG9ydCB7IFB1Ymxpc2hlckV2ZW50VHlwZXMgYXMgUHVibGlzaGVyRXZlbnRUeXBlcyB9IGZyb20gJy4vcHVibGlzaGVyLWV2ZW50J1xuZXhwb3J0IHsgUlRDUHVibGlzaGVyRXZlbnRUeXBlcyBhcyBSVENQdWJsaXNoZXJFdmVudFR5cGVzIH0gZnJvbSAnLi9wdWJsaXNoZXItZXZlbnQnXG5leHBvcnQgeyBSVE1QUHVibGlzaGVyRXZlbnRUeXBlcyBhcyBSVE1QUHVibGlzaGVyRXZlbnRUeXBlcyB9IGZyb20gJy4vcHVibGlzaGVyLWV2ZW50J1xuZXhwb3J0IHsgRmFpbG92ZXJQdWJsaXNoZXJFdmVudFR5cGVzIGFzIEZhaWxvdmVyUHVibGlzaGVyRXZlbnRUeXBlcyB9IGZyb20gJy4vcHVibGlzaGVyLWV2ZW50J1xuZXhwb3J0IHsgU3Vic2NyaWJlckV2ZW50VHlwZXMgYXMgU3Vic2NyaWJlckV2ZW50VHlwZXMgfSBmcm9tICcuL3N1YnNjcmliZXItZXZlbnQnXG5leHBvcnQgeyBSVENTdWJzY3JpYmVyRXZlbnRUeXBlcyBhcyBSVENTdWJzY3JpYmVyRXZlbnRUeXBlcyB9IGZyb20gJy4vc3Vic2NyaWJlci1ldmVudCdcbmV4cG9ydCB7IFJUTVBTdWJzY3JpYmVyRXZlbnRUeXBlcyBhcyBSVE1QU3Vic2NyaWJlckV2ZW50VHlwZXMgfSBmcm9tICcuL3N1YnNjcmliZXItZXZlbnQnXG5leHBvcnQgeyBGYWlsb3ZlclN1YnNjcmliZXJFdmVudFR5cGVzIGFzIEZhaWxvdmVyU3Vic2NyaWJlckV2ZW50VHlwZXMgfSBmcm9tICcuL3N1YnNjcmliZXItZXZlbnQnXG5leHBvcnQgeyBTaGFyZWRPYmplY3RFdmVudFR5cGVzIGFzIFNoYXJlZE9iamVjdEV2ZW50VHlwZXMgfSBmcm9tICcuL3NoYXJlZG9iamVjdC1ldmVudCdcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2V2ZW50L2luZGV4LmpzIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZnJlZXplXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImNvbnN0IFdJTERDQVJEID0gJyonXG5jb25zdCBXSUxEQ0FSRF9LRVkgPSAnUkVENVBSTydcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbiBFdmVudCBFbWl0dGVyLlxuICovXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fVxuICAgIHRoaXMuX2NhbGxiYWNrc1tXSUxEQ0FSRF9LRVldID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGV2ZW50IGhhbmRsZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBjYWxsYmFja3NcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ub3RpZnkgKGNhbGxiYWNrcywgZXZlbnQpIHtcbiAgICAgIGxldCBpLCBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoXG4gICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsYmFja3NbaV0oZXZlbnQpXG4gICAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzaWduIGEgY2FsbGJhY2sgaGFuZGxlciB0byBhbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKi9cbiAgb24gKHR5cGUsIGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09IFdJTERDQVJEKSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3NbV0lMRENBUkRfS0VZXS5wdXNoKGZuKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NhbGxiYWNrc1t0eXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3NbdHlwZV0gPSBbXVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jYWxsYmFja3NbdHlwZV0uaW5kZXhPZihmbikgPT09IC0xKSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3NbdHlwZV0ucHVzaChmbilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgY2FsbGJhY2sgaGFuZGxlciBmb3IgYW4gZXZlbnQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICovXG4gIG9mZiAodHlwZSwgZm4pIHtcbiAgICBsZXQgbWFwID0gdGhpcy5fY2FsbGJhY2tzW3R5cGVdXG4gICAgaWYgKHR5cGUgPT09IFdJTERDQVJEKSB7XG4gICAgICBtYXAgPSB0aGlzLl9jYWxsYmFja3NbV0lMRENBUkRfS0VZXVxuICAgIH1cbiAgICBpZiAobWFwKSB7XG4gICAgICBjb25zdCBpbmRleCA9IG1hcC5pbmRleE9mKGZuKVxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBtYXAuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhbiBldmVudCB0byBiZSBoYW5kbGVkIGJ5IGFueSBhc3NpZ25lZCBjYWxsYmFja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuICB0cmlnZ2VyIChldmVudCkge1xuICAgIGNvbnN0IHR5cGUgPSBldmVudC50eXBlXG4gICAgaWYgKHRoaXMuX2NhbGxiYWNrc1t0eXBlXSkge1xuICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2NhbGxiYWNrc1t0eXBlXSwgZXZlbnQpXG4gICAgfVxuICAgIHRoaXMuX25vdGlmeSh0aGlzLl9jYWxsYmFja3NbV0lMRENBUkRfS0VZXSwgZXZlbnQpXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXJcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2NvcmUvZXZlbnQtZW1pdHRlci5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4uLy4uL2NvcmUvZXZlbnQtZW1pdHRlcidcbmltcG9ydCBlbnZpcm9ubWVudCBmcm9tICcuLi8uLi9lbnYvYnJvd3NlcidcbmltcG9ydCBDb250cm9sU2xpZGVyIGZyb20gJy4vc2xpZGVyJ1xuaW1wb3J0IHsgU2xpZGVyRXZlbnRUeXBlcyB9IGZyb20gJy4vZXZlbnQnXG5pbXBvcnQgeyBQbGF5YmFja1N0YXRlLCBQbGF5YmFja1N0YXRlUmVhZGFibGUgfSBmcm9tICcuL3N0YXRlJ1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuLi8uLi9sb2cnXG5cbmNvbnN0IE5BTUUgPSAnUGxheWJhY2tDb250cm9scydcblxuLyoqXG4gKiBJbnRlcmZhY2UgY29udHJhY3QgZm9yIHBsYXliYWNrIGNvbnRyb2xsZXIgYWN0aW9ucy5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqL1xuY2xhc3MgU3Vic2NyaWJlclBsYXliYWNrQ29udHJvbGxlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHN0YXJ0IHBsYXlpbmcgdGhlIHN0cmVhbS5cbiAgICovXG4gIHBsYXkgKCkge31cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IHRvIHBhdXNlIHBsYXliYWNrIG9mIHN0cmVhbS5cbiAgICAgKi9cbiAgcGF1c2UgKCkge31cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IHRvIHJlc3VtZSBwbGF5YmFjayBvZCBzdHJlYW0uXG4gICAgICovXG4gIHJlc3VtZSAoKSB7fVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgdG8gc3RvcCBwbGF5YmFjayBvZiBzdHJlYW0uXG4gICAgICovXG4gIHN0b3AgKCkge31cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gbXV0ZSB0aGUgYXVkaW8gb2YgdGhlIHN0cmVhbS5cbiAgICovXG4gIG11dGUgKCkge31cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gdW5tdXRlIHRoZSBhdWRpbyBvZiB0aGUgc3RyZWFtLlxuICAgKi9cbiAgdW5tdXRlICgpIHt9XG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNldCB2b2x1bWUgb2YgYXVkaW8gb2Ygc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICogICAgICAgIEZyb20gMC4uMS5cbiAgICovXG4gIHNldFZvbHVtZSAodmFsdWUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gc2V0IHBsYXliYWNrIHBvaW50IGluIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgKiAgICAgICAgRWl0aGVyIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBkdXJhdGlvbiAoaWYgcHJvdmlkZWQpIG9yIHRoZSB0aW1lIGluIHNlY29uZHMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKiAgICAgICAgT3B0aW9uYWwgZHVyYXRpb24gb2YgdmlkZW8gKHdoZW4ga25vd24gdGhyb3VnaCBWT0QpIHRvIHVzZSB0byBkZXRlcm1pbmUgdGltZSBiYXNlZCBvbiBmaXJzdCBwYXJhbSBwYXNzZWQgYXMgcGVyY2VudGFnZS5cbiAgICovXG4gIHNlZWtUbyAodmFsdWUsIGR1cmF0aW9uID0gdW5kZWZpbmVkKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHRvZ2dsZSBmdWxsc2NyZWVuIHN0YXRlLlxuICAgKi9cbiAgdG9nZ2xlRnVsbFNjcmVlbiAoKSB7fVxuXG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBQbGF5YmFja0NvbnRyb2xzIHVzZWQgYnkgU3Vic2NyaWJlcnMgd2l0aCBgY29udHJvbHNgIGFuZCBgY2xhc3M9XCJyZWQ1cHJvLW1lZGlhYCBkZWZpbmVkIG9uIHRhcmdldCBlbGVtZW50cy4gVGhpcyBpbnRlcmZhY2Ugc2VydmVzIGFzIGEgcHJlc2VudGF0aW9uIGNvbnRyb2xsZXIgYW5kIHBsYXliYWNrIEFQSSBmb3IgdGFyZ2V0IERPTSBlbGVtZW50cy5cbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGlzIGFzIGEgcHJvdG90eXBlIGZvciBjcmVhdGluZyBhbmQgcHJvdmlkaW5nIHlvdXIgb3duIGN1c3RvbSBQbGF5YmFjayBDb250cm9scy4gVG8gZG8gc286IHByb3ZpZGUgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhpcyBDbGFzcyBhcyB0aGUgYGNvbnRyb2xzYCBwcm9wZXJ0eSBvbiB0aGUgaW5pdGlhbGl6YXRpb24gY29uZmlndXJhdGlvbiBtYXAgcHJvdmlkZWQgaW4gdGhlIGBpbml0KClgIGNhbGwgb2YgYSBTdWJzY3JpYmVyLlxuICpcbiAqIFRPRE86IEZ1bGx5IHZldCB0aGUgdmlhYmlsaXR5IG9mIGRldmVsb3BlcnMgYmVpbmcgYWRoZXJlIHRvIHRoaXMgY29udHJhY3QgZm9yIGN1c3RvbSBjb250cm9scy5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xzIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2b2x1bWUgbGV2ZWwuXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gMC4uMVxuICAgKi9cbiAgZ2V0Vm9sdW1lICgpIHt9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZvbHVtZSBsZXZlbCBvZiBwbGF5YmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAqICAgICAgICAwLi4xXG4gICAqL1xuICBzZXRWb2x1bWUgKHZhbHVlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gc2V0IHBsYXliYWNrIHBvaW50IGluIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgKiAgICAgICAgRWl0aGVyIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBkdXJhdGlvbiAoaWYgcHJvdmlkZWQpIG9yIHRoZSB0aW1lIGluIHNlY29uZHMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKiAgICAgICAgT3B0aW9uYWwgZHVyYXRpb24gb2YgdmlkZW8gKHdoZW4ga25vd24gdGhyb3VnaCBWT0QpIHRvIHVzZSB0byBkZXRlcm1pbmUgdGltZSBiYXNlZCBvbiBmaXJzdCBwYXJhbSBwYXNzZWQgYXMgcGVyY2VudGFnZS5cbiAgICovXG4gIHNldFNlZWtUaW1lICh2YWx1ZSwgZHVyYXRpb24gPSAwKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBsYXliYWNrIGR1cmF0aW9uIG9mIHRoZSBzdHJlYW0sIGlmIGF2YWlsYWJsZSBmcm9tIFZPRCAoVmlkZW8gT24gRGVtYW5kKS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAqICAgICAgICBJbiBzZWNvbmRzLlxuICAgKi9cbiAgc2V0UGxheWJhY2tEdXJhdGlvbiAodmFsdWUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBwbGF5YmFjayBzdGF0ZS5cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKiBAc2VlIHtQbGF5YmFja1N0YXRlfVxuICAgKi9cbiAgZ2V0U3RhdGUgKCkge31cblxuICAvKipcbiAgICogU2V0IHRoZSBjdXJyZW50IHBsYXliYWNrIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdGVcbiAgICogQHNlZSB7UGxheWJhY2tTdGF0ZX1cbiAgICovXG4gIHNldFN0YXRlIChzdGF0ZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gIC8qKlxuICAgKiBTZXRzIHBsYXliYWNrIGFzIFZPRCAoVmlkZW8gT24gRGVtYW5kKSB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBzZXRBc1ZPRCAodmFsdWUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIC8qKlxuICAgKiBFbmFibGVzIGNvbnRyb2xzIGFuZCBldmVudCBoYW5kbGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGVuYWJsZSAodmFsdWUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxufVxuXG4vKipcbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYFN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xzYCB1c2VkIGludGVybmFsbHkgaW4gdGhlIFNESy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBTdWJzY3JpYmVyUGxheWJhY2tDb250cm9sc0ltcGwgZXh0ZW5kcyBTdWJzY3JpYmVyUGxheWJhY2tDb250cm9scyB7XG5cbiAgY29uc3RydWN0b3IgKHBsYXllciwgY29udGFpbmVyKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMucGxheWVyID0gcGxheWVyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICB0aGlzLl9jb250cm9sYmFyID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fcGxheVBhdXNlQnV0dG9uID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fbXV0ZUJ1dHRvbiA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3ZvbHVtZUZpZWxkID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fc2Vla1RpbWVGaWVsZCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3RpbWVGaWVsZCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2Z1bGxTY3JlZW5CdXR0b24gPSB1bmRlZmluZWRcbiAgICB0aGlzLl9zdGF0ZSA9IFBsYXliYWNrU3RhdGUuSURMRVxuICAgIHRoaXMuX211dGVkU3RhdGUgPSBmYWxzZVxuICAgIHRoaXMuX3Jlc3VtZUFmdGVyU2VlayA9IGZhbHNlXG4gICAgdGhpcy5fcGxheWJhY2tEdXJhdGlvbiA9IDBcbiAgICB0aGlzLl92b2x1bWVWYWx1ZSA9IDFcbiAgICB0aGlzLl9vblBsYXlQYXVzZUNsaWNrQm91bmQgPSB0aGlzLl9vblBsYXlQYXVzZUNsaWNrLmJpbmQodGhpcylcbiAgICB0aGlzLmRlY29yYXRlKHRoaXMuY29udGFpbmVyKVxuICB9XG5cbiAgLyoqXG4gICAqIERlY29yYXRlcyB0YXJnZXQgY29udGFpbmVyIHdpdGggcGxheWJhY2sgY29udHJvbCBlbGVtZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBjb250YWluZXJcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRlY29yYXRlIChjb250YWluZXIpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2RlY29yYXRlXScpXG4gICAgbGV0IGNvbnRyb2xiYXIgPSBlbnZpcm9ubWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNvbnRyb2xiYXIuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250cm9sLWJhcicpXG4gICAgdGhpcy5fcGxheVBhdXNlQnV0dG9uID0gdGhpcy5fY3JlYXRlUGxheVBhdXNlQnV0dG9uKClcbiAgICB0aGlzLl9tdXRlQnV0dG9uID0gdGhpcy5fY3JlYXRlTXV0ZUJ1dHRvbigpXG4gICAgdGhpcy5fdm9sdW1lRmllbGQgPSB0aGlzLl9jcmVhdGVWb2x1bWVDb250cm9sKClcbiAgICB0aGlzLl9zZWVrVGltZUZpZWxkID0gdGhpcy5fY3JlYXRlU2Vla0NvbnRyb2woKVxuICAgIHRoaXMuX3RpbWVGaWVsZCA9IHRoaXMuX2NyZWF0ZVBsYXliYWNrVGltZSgpXG4gICAgdGhpcy5fZnVsbFNjcmVlbkJ1dHRvbiA9IHRoaXMuX2NyZWF0ZUZ1bGxTY3JlZW5Ub2dnbGUoKVxuICAgIGNvbnRyb2xiYXIuYXBwZW5kQ2hpbGQodGhpcy5fcGxheVBhdXNlQnV0dG9uKVxuICAgIGNvbnRyb2xiYXIuYXBwZW5kQ2hpbGQodGhpcy5fdGltZUZpZWxkKVxuICAgIGNvbnRyb2xiYXIuYXBwZW5kQ2hpbGQodGhpcy5fc2Vla1RpbWVGaWVsZC52aWV3KVxuICAgIGNvbnRyb2xiYXIuYXBwZW5kQ2hpbGQodGhpcy5fbXV0ZUJ1dHRvbilcbiAgICBjb250cm9sYmFyLmFwcGVuZENoaWxkKHRoaXMuX3ZvbHVtZUZpZWxkLnZpZXcpXG4gICAgY29udHJvbGJhci5hcHBlbmRDaGlsZCh0aGlzLl9mdWxsU2NyZWVuQnV0dG9uKVxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250cm9sYmFyKVxuICAgIHRoaXMuX2NvbnRyb2xiYXIgPSBjb250cm9sYmFyXG5cbiAgICBpZiAoZW52aXJvbm1lbnQuaXNUb3VjaEVuYWJsZWQoKSkge1xuICAgICAgICBjb250cm9sYmFyLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtY29udHJvbC1iYXItc2hvdycpXG4gICAgLy8gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgLy8gICAgICBjb250cm9sYmFyLmNsYXNzTGlzdC50b2dnbGUoJ3JlZDVwcm8tbWVkaWEtY29udHJvbC1iYXItc2hvdycpXG4gICAgLy8gICAgfSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xiYXIuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250cm9sLWJhci1zaG93JylcbiAgICAgIH0pXG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgY29udHJvbGJhci5jbGFzc0xpc3QucmVtb3ZlKCdyZWQ1cHJvLW1lZGlhLWNvbnRyb2wtYmFyLXNob3cnKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKFBsYXliYWNrU3RhdGUuSURMRSlcbiAgICAgIC5vbkZ1bGxTY3JlZW5DaGFuZ2UoZmFsc2UpXG4gICAgICAuc2V0U2Vla1RpbWUoMClcbiAgICAgIC5lbmFibGUoZmFsc2UpXG4gIH1cblxuICAvKipcbiAgICogQ2xpY2sgaGFuZGxlciBmb3IgcGxheS9wYXVzZSBjb250cm9sLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUGxheVBhdXNlQ2xpY2sgKCkge1xuICAgIGlmICh0aGlzLmdldFN0YXRlKCkgPT09IFBsYXliYWNrU3RhdGUuUExBWUlORykge1xuICAgICAgdGhpcy5wbGF5ZXIucGF1c2UoKVxuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmdldFN0YXRlKCkgPT09IFBsYXliYWNrU3RhdGUuUEFVU0VEKSB7XG4gICAgICB0aGlzLnBsYXllci5yZXN1bWUoKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMucGxheWVyLnBsYXkoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHBsYXkvcGF1c2UgY29udHJvbC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jcmVhdGVQbGF5UGF1c2VCdXR0b24gKCkge1xuICAgIGxldCBidXR0b24gPSBlbnZpcm9ubWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnVG9nZ2xlIFBsYXliYWNrJylcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250cm9sLWVsZW1lbnQnKVxuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLWVsZW1lbnQtYnV0dG9uJylcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1wbGF5cGF1c2UtYnV0dG9uJylcbiAgICByZXR1cm4gYnV0dG9uXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBtdXRlL3VubXV0ZSBjb250cm9sLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZU11dGVCdXR0b24gKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgbGV0IGJ1dHRvbiA9IGVudmlyb25tZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdUb2dnbGUgTXV0ZSBBdWRpbycpXG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtY29udHJvbC1lbGVtZW50JylcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1lbGVtZW50LWJ1dHRvbicpXG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtbXV0ZXVubXV0ZS1idXR0b24nKVxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGlmIChzZWxmLmdldE11dGVkU3RhdGUoKSkge1xuICAgICAgICBzZWxmLnBsYXllci51bm11dGUoKVxuICAgICAgICBzZWxmLnNldE11dGVkU3RhdGUoZmFsc2UpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VsZi5wbGF5ZXIubXV0ZSgpXG4gICAgICAgIHNlbGYuc2V0TXV0ZWRTdGF0ZSh0cnVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGJ1dHRvblxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdm9sdW1lIGNvbnRyb2wuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY3JlYXRlVm9sdW1lQ29udHJvbCAoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBsZXQgc2xpZGVyID0gbmV3IENvbnRyb2xTbGlkZXIoJ3ZvbHVtZScpXG4gICAgc2xpZGVyLnZpZXcuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250cm9sLWVsZW1lbnQnKVxuICAgIHNsaWRlci52aWV3LmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtdm9sdW1lLXNsaWRlcicpXG4gICAgc2xpZGVyLnZpZXcuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1zbGlkZXInKVxuICAgIHNsaWRlci5vbihTbGlkZXJFdmVudFR5cGVzLkNIQU5HRSwgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBwZXJjZW50YWdlID0gTnVtYmVyKGV2ZW50LmRhdGEpXG4gICAgICBzZWxmLnBsYXllci5zZXRWb2x1bWUocGVyY2VudGFnZSlcbiAgICB9KVxuICAgIHJldHVybiBzbGlkZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHNlZWsgY29udHJvbC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jcmVhdGVTZWVrQ29udHJvbCAoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBsZXQgc2xpZGVyID0gbmV3IENvbnRyb2xTbGlkZXIoJ3NlZWsnKVxuICAgIHNsaWRlci52aWV3LmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtY29udHJvbC1lbGVtZW50JylcbiAgICBzbGlkZXIudmlldy5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLXNlZWt0aW1lLXNsaWRlcicpXG4gICAgc2xpZGVyLnZpZXcuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1zbGlkZXInKVxuICAgIHNsaWRlci5vbihTbGlkZXJFdmVudFR5cGVzLkNIQU5HRV9TVEFSVCwgKCkgPT4ge1xuICAgICAgaWYgKHNlbGYuZ2V0U3RhdGUoKSA9PT0gUGxheWJhY2tTdGF0ZS5QTEFZSU5HKSB7XG4gICAgICAgIHNlbGYuX3Jlc3VtZUFmdGVyU2VlayA9IHRydWVcbiAgICAgICAgc2VsZi5wbGF5ZXIucGF1c2UoKVxuICAgICAgfVxuICAgIH0pXG4gICAgc2xpZGVyLm9uKFNsaWRlckV2ZW50VHlwZXMuQ0hBTkdFLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBOdW1iZXIoZXZlbnQuZGF0YSlcbiAgICAgIHNlbGYucGxheWVyLnNlZWtUbyhwZXJjZW50YWdlLCBzZWxmLl9wbGF5YmFja0R1cmF0aW9uID09PSAwID8gdW5kZWZpbmVkOiBzZWxmLl9wbGF5YmFja0R1cmF0aW9uKVxuICAgICAgc2VsZi5zZXRTZWVrVGltZShwZXJjZW50YWdlICogc2VsZi5fcGxheWJhY2tEdXJhdGlvbiwgc2VsZi5fcGxheWJhY2tEdXJhdGlvbilcbiAgICB9KVxuICAgIHNsaWRlci5vbihTbGlkZXJFdmVudFR5cGVzLkNIQU5HRV9DT01QTEVURSwgKCkgPT4ge1xuICAgICAgaWYgKHNlbGYuX3Jlc3VtZUFmdGVyU2VlayAmJiBzZWxmLmdldFN0YXRlKCkgPT09IFBsYXliYWNrU3RhdGUuUEFVU0VEKSB7XG4gICAgICAgIHNlbGYuX3Jlc3VtZUFmdGVyU2VlayA9IGZhbHNlXG4gICAgICAgIHNlbGYucGxheWVyLnJlc3VtZSgpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gc2xpZGVyXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBwbGF5YmFjayB0aW1lIGZpZWxkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZVBsYXliYWNrVGltZSAoKSB7XG4gICAgbGV0IHNwYW4gPSBlbnZpcm9ubWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICBsZXQgdGV4dCA9IGVudmlyb25tZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHQnLCAnaGVsbG8hJylcbiAgICBzcGFuLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtY29udHJvbC1lbGVtZW50JylcbiAgICBzcGFuLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtdGltZS1maWVsZCcpXG4gICAgc3Bhbi5hcHBlbmRDaGlsZCh0ZXh0KVxuICAgIHJldHVybiBzcGFuXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGZ1bGxzY3JlZW4gdG9nZ2xlIGNvbnRyb2wuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY3JlYXRlRnVsbFNjcmVlblRvZ2dsZSAoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBsZXQgYnV0dG9uID0gZW52aXJvbm1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ1RvZ2dsZSBGdWxsc2NyZWVuJylcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250cm9sLWVsZW1lbnQnKVxuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLWVsZW1lbnQtYnV0dG9uJylcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1mdWxsc2NyZWVuLWJ1dHRvbicpXG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgc2VsZi5wbGF5ZXIudG9nZ2xlRnVsbFNjcmVlbigpXG4gICAgfSlcbiAgICByZXR1cm4gYnV0dG9uXG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlcyBjb250cm9scyBhbmQgZXZlbnQgaGFuZGxlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlbmFibGUgKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLl9wbGF5UGF1c2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgncmVkNXByby1tZWRpYS1lbGVtZW50LWJ1dHRvbi1kaXNhYmxlZCcpXG4gICAgICB0aGlzLl9wbGF5UGF1c2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vblBsYXlQYXVzZUNsaWNrQm91bmQpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fcGxheVBhdXNlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtZWxlbWVudC1idXR0b24tZGlzYWJsZWQnKVxuICAgICAgdGhpcy5fcGxheVBhdXNlQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25QbGF5UGF1c2VDbGlja0JvdW5kKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXRzIHRoZSB0aW1lIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZhbHVlfSBOdW1iZXJcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgZm9ybWF0VGltZSAodmFsdWUpIHtcbiAgICBsZXQgaHJzID0gMFxuICAgIGxldCBtaW5zID0gdmFsdWUgPT09IDAgPyAwIDogcGFyc2VJbnQodmFsdWUgLyA2MClcbiAgICBsZXQgc2VjcyA9IDBcbiAgICBpZiAobWlucyA+PSA2MCkge1xuICAgICAgaHJzID0gcGFyc2VJbnQobWlucyAvIDYwKVxuICAgICAgbWlucyA9IG1pbnMgJSA2MFxuICAgIH1cbiAgICBzZWNzID0gdmFsdWUgPT09IDAgPyAwIDogcGFyc2VJbnQodmFsdWUgJSA2MClcblxuICAgIGxldCBmb3JtYXR0ZWRBcnIgPSAoaHJzIDwgMTApID8gWycwJyArIGhyc10gOiBbaHJzXVxuICAgIGZvcm1hdHRlZEFyci5wdXNoKChtaW5zIDwgMTApID8gWycwJyArIG1pbnNdIDogW21pbnNdKVxuICAgIGZvcm1hdHRlZEFyci5wdXNoKChzZWNzIDwgMTApID8gWycwJyArIHNlY3NdIDogW3NlY3NdKVxuICAgIHJldHVybiBmb3JtYXR0ZWRBcnIuam9pbignOicpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdm9sdW1lIGxldmVsLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IDAuLjFcbiAgICovXG4gIGdldFZvbHVtZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZvbHVtZVZhbHVlXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdm9sdW1lIGxldmVsIG9mIHBsYXliYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICogICAgICAgIDAuLjFcbiAgICovXG4gIHNldFZvbHVtZSAodmFsdWUpIHtcbiAgICB0aGlzLl92b2x1bWVGaWVsZC52YWx1ZSA9IHZhbHVlXG4gICAgdGhpcy5fdm9sdW1lVmFsdWUgPSB2YWx1ZVxuICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5zZXRNdXRlZFN0YXRlKHRydWUpXG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuZ2V0TXV0ZWRTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnNldE11dGVkU3RhdGUoZmFsc2UpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzZXQgcGxheWJhY2sgcG9pbnQgaW4gdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAqICAgICAgICBFaXRoZXIgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGR1cmF0aW9uIChpZiBwcm92aWRlZCkgb3IgdGhlIHRpbWUgaW4gc2Vjb25kcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqICAgICAgICBPcHRpb25hbCBkdXJhdGlvbiBvZiB2aWRlbyAod2hlbiBrbm93biB0aHJvdWdoIFZPRCkgdG8gdXNlIHRvIGRldGVybWluZSB0aW1lIGJhc2VkIG9uIGZpcnN0IHBhcmFtIHBhc3NlZCBhcyBwZXJjZW50YWdlLlxuICAgKi9cbiAgc2V0U2Vla1RpbWUgKHZhbHVlLCBsZW5ndGggPSAwKSB7XG4gICAgdGhpcy5fc2Vla1RpbWVGaWVsZC52YWx1ZSA9IGxlbmd0aCA9PT0gMCA/IDAgOiAodmFsdWUvbGVuZ3RoKVxuICAgIGlmICh0aGlzLl9wbGF5YmFja0R1cmF0aW9uICE9PSAwICYmIHBhcnNlSW50KHRoaXMuX3BsYXliYWNrRHVyYXRpb24pIDw9IHBhcnNlSW50KHZhbHVlKSkge1xuICAgICAgdGhpcy5fc2Vla1RpbWVGaWVsZC52YWx1ZSA9IDFcbiAgICB9XG4gICAgdGhpcy5fdGltZUZpZWxkLmlubmVyVGV4dCA9IHRoaXMuZm9ybWF0VGltZShNYXRoLmZsb29yKHZhbHVlKSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBsYXliYWNrIGR1cmF0aW9uIG9mIHRoZSBzdHJlYW0sIGlmIGF2YWlsYWJsZSBmcm9tIFZPRCAoVmlkZW8gT24gRGVtYW5kKS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAqICAgICAgICBJbiBzZWNvbmRzLlxuICAgKi9cbiAgc2V0UGxheWJhY2tEdXJhdGlvbiAodmFsdWUpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3NldHBsYXliYWNrZHVyYXRpb25dOiAnICsgdmFsdWUpXG4gICAgdGhpcy5fcGxheWJhY2tEdXJhdGlvbiA9IHZhbHVlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBwbGF5YmFjayBzdGF0ZS5cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKiBAc2VlIHtQbGF5YmFja1N0YXRlfVxuICAgKi9cbiAgZ2V0U3RhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudCBwbGF5YmFjayBzdGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXRlXG4gICAqIEBzZWUge1BsYXliYWNrU3RhdGV9XG4gICAqL1xuICBzZXRTdGF0ZSAoc3RhdGUpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3NldFN0YXRlXTogJyArIFBsYXliYWNrU3RhdGVSZWFkYWJsZVtzdGF0ZV0pXG4gICAgdGhpcy5fc3RhdGUgPSBzdGF0ZVxuICAgIHRoaXMub25TdGF0ZUNoYW5nZSh0aGlzLl9zdGF0ZSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHBsYXliYWNrIGJlaW5nIG11dGVkLlxuICAgKiBUaGlzIGRpZmZlcnMgZnJvbSBqdXN0IHRoZSB2b2x1bWUgbGV2ZWwgYmVpbmcgMC4gVGhlIGNvbnRyb2xzIGNhbiBiZSBtdXRlZCwgYnV0IGhhdmUgYSB2b2x1bWUgbGV2ZWwgZ3JlYXRlciB0aGFuIDAgLSBtZWFuaW5nLCB1bm11dGUgd2lsbCByZXR1cm4gYmFjayB0byB0aGUgdm9sdW1lIGxldmVsIHByZXZpb3VzbHkgc2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZ2V0TXV0ZWRTdGF0ZSAoKSB7XG4gICAgcmV0dXJuICgnbXV0ZWQnIGluIHRoaXMucGxheWVyKSA/IHRoaXMucGxheWVyLm11dGVkIDogdGhpcy5fbXV0ZWRTdGF0ZVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG11dGVkIHN0YXRlIG9mIHRoZSBwbGF5YmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSBzdGF0ZVxuICAgKi9cbiAgc2V0TXV0ZWRTdGF0ZSAoc3RhdGUpIHtcbiAgICB0aGlzLl9tdXRlZFN0YXRlID0gc3RhdGVcbiAgICB0aGlzLm9uTXV0ZWRTdGF0ZUNoYW5nZSh0aGlzLl9tdXRlZFN0YXRlKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciBmb3IgY2hhbmdlIGluIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdGVcbiAgICogICAgICAgIFRoZSBQbGF5YmFja1N0YXRlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblN0YXRlQ2hhbmdlIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gUGxheWJhY2tTdGF0ZS5QTEFZSU5HKSB7XG4gICAgICB0aGlzLl9wbGF5UGF1c2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgncmVkNXByby1tZWRpYS1wbGF5LWJ1dHRvbicpXG4gICAgICB0aGlzLl9wbGF5UGF1c2VCdXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1wYXVzZS1idXR0b24nKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX3BsYXlQYXVzZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLXBsYXktYnV0dG9uJylcbiAgICAgIHRoaXMuX3BsYXlQYXVzZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdyZWQ1cHJvLW1lZGlhLXBhdXNlLWJ1dHRvbicpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciBmb3IgY2hhbmdlIGluIG11dGUgc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RhdGVcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uTXV0ZWRTdGF0ZUNoYW5nZSAoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIHRoaXMuX211dGVCdXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1tdXRlLWJ1dHRvbicpXG4gICAgICB0aGlzLl9tdXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3JlZDVwcm8tbWVkaWEtdW5tdXRlLWJ1dHRvbicpXG4gICAgICB0aGlzLl92b2x1bWVGaWVsZC52YWx1ZSA9IDBcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9tdXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3JlZDVwcm8tbWVkaWEtbXV0ZS1idXR0b24nKVxuICAgICAgdGhpcy5fbXV0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLXVubXV0ZS1idXR0b24nKVxuICAgICAgdGhpcy5fdm9sdW1lRmllbGQudmFsdWUgPSB0aGlzLl92b2x1bWVWYWx1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVyIGZvciBjaGFuZ2UgaW4gZnVsbHNjcmVlbiBzdGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSBpc0Z1bGxTY3JlZW5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uRnVsbFNjcmVlbkNoYW5nZSAoaXNGdWxsU2NyZWVuKSB7XG4gICAgaWYgKGlzRnVsbFNjcmVlbikge1xuICAgICAgdGhpcy5fZnVsbFNjcmVlbkJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLWV4aXQtZnVsbHNjcmVlbi1idXR0b24nKVxuICAgICAgdGhpcy5fZnVsbFNjcmVlbkJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdyZWQ1cHJvLW1lZGlhLWZ1bGxzY3JlZW4tYnV0dG9uJylcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9mdWxsU2NyZWVuQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3JlZDVwcm8tbWVkaWEtZXhpdC1mdWxsc2NyZWVuLWJ1dHRvbicpXG4gICAgICB0aGlzLl9mdWxsU2NyZWVuQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtZnVsbHNjcmVlbi1idXR0b24nKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgcGxheWJhY2sgYXMgVk9EIChWaWRlbyBPbiBEZW1hbmQpIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHNldEFzVk9EIChpc1ZPRCkge1xuICAgIGRlYnVnKE5BTUUsICdbc2V0QXNWT0RdOiAnICsgaXNWT0QpXG4gICAgaWYgKCFpc1ZPRCkge1xuICAgICAgdGhpcy5fc2Vla1RpbWVGaWVsZC52YWx1ZT0gMFxuICAgICAgdGhpcy5fc2Vla1RpbWVGaWVsZC5kaXNhYmxlZCA9IHRydWVcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9zZWVrVGltZUZpZWxkLmRpc2FibGVkID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBkZXRhY2ggdGhlIGNvbnRyb2wgYmFyIHRvIHByb3ZpZGVkIGNvbnRhaW5lci5cbiAgICovXG4gIGRldGFjaCAoKSB7XG4gICAgdGhpcy5lbmFibGUoZmFsc2UpXG4gICAgaWYgKHRoaXMuX2NvbnRyb2xiYXIgJiYgdGhpcy5fY29udHJvbGJhci5wYXJlbnROb2RlID09PSB0aGlzLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fY29udHJvbGJhcilcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgUGxheWJhY2tDb250cm9sbGVyID0gU3Vic2NyaWJlclBsYXliYWNrQ29udHJvbGxlclxuZXhwb3J0IGNvbnN0IFBsYXliYWNrQ29udHJvbHMgPSBTdWJzY3JpYmVyUGxheWJhY2tDb250cm9sc1xuZXhwb3J0IGNvbnN0IFBsYXliYWNrQ29udHJvbHNJbXBsID0gU3Vic2NyaWJlclBsYXliYWNrQ29udHJvbHNJbXBsXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9zdWJzY3JpYmVyL2NvbnRyb2xzL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5mb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXtcbiAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXVxuICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXVxuICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBEZWVwLWRlZmluZXMgYW4gYE9iamVjdGAgaW4gcGxhY2Ugd2l0aCBuYW1lc3BhY2VkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgZGVlcERlZmluZSA9IChvYmplY3QsIHBhdGhzLCB2YWx1ZSkgPT4ge1xuICBsZXQgaSA9IDBcbiAgbGV0IHRhaWwgPSBvYmplY3RcbiAgY29uc3QgcHJvcCA9IHBhdGhzLnBvcCgpXG4gIGNvbnN0IGxlbmd0aCA9IHBhdGhzLmxlbmd0aFxuICBmb3IgKGk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGxldCBwYXRoID0gcGF0aHNbaV1cbiAgICB0YWlsW3BhdGhdID0gdGFpbFtwYXRoXSB8fCB7fVxuICAgIHRhaWwgPSB0YWlsW3BhdGhdXG4gIH1cbiAgdGFpbFtwcm9wXSA9IHZhbHVlXG59XG5cbi8qKlxuICogRGVlcC1jb3B5IHV0aWxpemluZyBKU09OIEFQSS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgZGVlcENvcHkgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iailcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKVxufVxuXG4vKipcbiAqIFNpbXBsZSB1dGlsIHRvIHBhcnNlIHJlc29sdXRpb24gZnJvbSBtZXRhZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqICAgICAgICBUaGUgcmVzb2x1dGlvbiB2YWx1ZSBmcm9tIG1ldGFkYXRhOiBlLmcsIGA2NDAsNDgwYC5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICBUaGUgc3RydWN0dXJlZCBkaW1lbnNpb25zIE9iamVjdCB3aXRoIGB3aWR0aGAgYW5kIGBoZWlnaHRgIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1ldGFkYXRhUmVzb2x1dGlvblRvT2JqZWN0ID0gKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IGRpbXMgPSB2YWx1ZS5zcGxpdCgnLCcpXG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBwYXJzZUludChkaW1zWzBdKSxcbiAgICAgIGhlaWdodDogcGFyc2VJbnQoZGltc1sxXSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogVXRpbGl0eSBjaGVjayBpZiBwcm92aWRpbmcgT2JqZWN0IGlzIGVtcHR5ICh3aXRob3V0IGFueSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBpc09iamVjdEVtcHR5ID0gKG9iaikgPT4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDAgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Rcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy91dGlsL29iamVjdC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9hc3NpZ24yLmRlZmF1bHQgfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKVxuICAsIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogRW51bWVyYXRpb24gb2YgUGxheWJhY2sgVHlwZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBQbGF5YmFja1R5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFJUQzogJ3J0YycsXG4gIFJUTVA6ICdydG1wJyxcbiAgSExTOiAnaGxzJ1xufSlcblxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBBdWRpbyBFbmNvZGVyIHR5cGVzIHRvIHJlcXVlc3QgZm9yIFBsYXliYWNrXG4gKi9cbmV4cG9ydCBjb25zdCBQbGF5YmFja0F1ZGlvRW5jb2RlciA9IE9iamVjdC5mcmVlemUoe1xuICBPUFVTOiAnT3B1cycsXG4gIFBDTVU6ICdQQ01VJyxcbiAgUENNQTogJ1BDTUEnLFxuICBTUEVFWDogJ1NwZWV4JyxcbiAgTk9ORTogJ05PTkUnXG59KVxuXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIFZpZGVvIEVuY29kZXIgdHlwZXMgdG8gcmVxdWVzdCBmb3IgUGxheWJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCBQbGF5YmFja1ZpZGVvRW5jb2RlciA9IE9iamVjdC5mcmVlemUoe1xuICBWUDg6ICdWUDgnLFxuICBIMjY0OiAnSDI2NCcsXG4gIE5PTkU6ICdOT05FJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9lbnVtL3BsYXliYWNrLmpzIiwiLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBQbGF5YmFjayBTdGF0ZS5cbiAqXG4gKiBAc2VlIHtTdWJzY3JpYmVyUGxheWJhY2tDb250cm9sc31cbiAqL1xuZXhwb3J0IGNvbnN0IFBsYXliYWNrU3RhdGUgPSBPYmplY3QuZnJlZXplKHtcbiAgVU5BVkFJTEFCTEU6IDEwMDAsXG4gIEFWQUlMQUJMRTogMCxcbiAgSURMRTogMSxcbiAgUExBWUlORzogMixcbiAgUEFVU0VEOiAzXG59KVxuXG4vKipcbiAqIEh1bWFuIHJlYWRhYmxlIHBsYXliYWNrIHN0YXRlLlxuICpcbiAqIEBzZWUge1N1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xzfVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IFBsYXliYWNrU3RhdGVSZWFkYWJsZSA9IE9iamVjdC5mcmVlemUoe1xuICAxMDAwOiAnUGxheWJhY2suVU5BVkFJTEFCTEUnLFxuICAwOiAnUGxheWJhY2suQVZBSUxBQkxFJyxcbiAgMTogJ1BsYXliYWNrLklETEUnLFxuICAyOiAnUGxheWJhY2suUExBWUlORycsXG4gIDM6ICdQbGF5YmFjay5QQVVTRUQnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N1YnNjcmliZXIvY29udHJvbHMvc3RhdGUuanMiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Zvci1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi4vZW52L2Jyb3dzZXInXG5pbXBvcnQgeyBEZWZlcnJlZFByb21pc2UgfSBmcm9tICcuLi91dGlsL3Byb21pc2UnXG5pbXBvcnQgeyBjdXJyeSwgZmlsdGVyIH0gZnJvbSAnLi4vdXRpbCdcbmltcG9ydCB7IGRlZXBDb3B5IH0gZnJvbSAnLi4vdXRpbC9vYmplY3QnXG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uL2xvZydcbi8vIGltcG9ydCB7IE5vU3VwcG9ydGVkQ2FtZXJhUmVzb2x1dGlvbnNFcnJvciB9IGZyb20gJy4uL2V4Y2VwdGlvbi9lcnJvcnMnXG5cbi8vIFJlc29sdXRpb25zIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3dlYnJ0Y0hhY2tzL1dlYlJUQy1DYW1lcmEtUmVzb2x1dGlvbi9ibG9iL21hc3Rlci9qcy9yZXNvbHV0aW9uU2Nhbi5qc1xuY29uc3QgZm9ybWF0cyA9IFtcbiAge1xuICAgIFwibGFiZWxcIjogXCI0SyhVSEQpXCIsXG4gICAgXCJ3aWR0aFwiIDogMzg0MCxcbiAgICBcImhlaWdodFwiOiAyMTYwXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwiMTA4MHAoRkhEKVwiLFxuICAgIFwid2lkdGhcIjogMTkyMCxcbiAgICBcImhlaWdodFwiOiAxMDgwXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwiVVhHQVwiLFxuICAgIFwid2lkdGhcIjogMTYwMCxcbiAgICBcImhlaWdodFwiOiAxMjAwXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwiNzIwcChIRClcIixcbiAgICBcIndpZHRoXCI6IDEyODAsXG4gICAgXCJoZWlnaHRcIjogNzIwXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwiU1ZHQVwiLFxuICAgIFwid2lkdGhcIjogODAwLFxuICAgIFwiaGVpZ2h0XCI6IDYwMFxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIlZHQVwiLFxuICAgIFwid2lkdGhcIjogNjQwLFxuICAgIFwiaGVpZ2h0XCI6IDQ4MFxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIjM2MHAobkhEKVwiLFxuICAgIFwid2lkdGhcIjogNjQwLFxuICAgIFwiaGVpZ2h0XCI6IDM2MFxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIkNJRlwiLFxuICAgIFwid2lkdGhcIjogMzUyLFxuICAgIFwiaGVpZ2h0XCI6IDI4OFxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIlFWR0FcIixcbiAgICBcIndpZHRoXCI6IDMyMCxcbiAgICBcImhlaWdodFwiOiAyNDBcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCJRQ0lGXCIsXG4gICAgXCJ3aWR0aFwiOiAxNzYsXG4gICAgXCJoZWlnaHRcIjogMTQ0XG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwiUVFWR0FcIixcbiAgICBcIndpZHRoXCI6IDE2MCxcbiAgICBcImhlaWdodFwiOiAxMjBcbiAgfVxuXG5dO1xuXG4vKipcbiAqIERldGVjdHMgaWYgcmVzb2x1dGlvbnMgYXJlIGRlZmluZWQgb24gdGhlIHByb3ZpZWQgY29uc3RyYWludHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbnN0cmFpbnRzXG4gKiAgICAgICAgVGhlIE1lZGlhIENvbnN0cmFpbnRzIHRvIHRlc3QgYWdhaW5zdC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgaGFzUmVzb2x1dGlvbnNEZWZpbmVkID0gKGNvbnN0cmFpbnRzKSA9PiB7XG4gIHJldHVybiBjb25zdHJhaW50cy5oYXNPd25Qcm9wZXJ0eSgndmlkZW8nKSAmJlxuICAgICAgICAgIChjb25zdHJhaW50cy52aWRlby5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSB8fCBjb25zdHJhaW50cy52aWRlby5oYXNPd25Qcm9wZXJ0eSgnaGVpZ2h0JykpXG59XG5cbi8qKlxuICogUmV0dXJuIHZhbHVlIG9uIGF0dHJpYnV0ZSBiYXNlZCBvbiBmYWlsb3ZlciB0ZXN0IG9mIGF0dHJpYnV0ZSBhdmFpbGFiaWxpdHkgb24gcHJvdmlkZWQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBnZXRWYWx1ZUZyb21Db25zdHJhaW50QXR0cmlidXRlID0gKGF0dHJpYnV0ZSkgPT4ge1xuICByZXR1cm4gYXR0cmlidXRlLmV4YWN0IHx8IGF0dHJpYnV0ZS5pZGVhbCB8fCBhdHRyaWJ1dGUubWF4IHx8IGF0dHJpYnV0ZS5taW4gfHwgYXR0cmlidXRlXG59XG5cbi8qKlxuICogVGVzdCBpZiB2aWRlbyBvbiBNZWRpYSBDb25zdHJhaW50IGlzIGVpdGhlciBzZXQgdG8gYHRydWVgIG9yIGlmIHRoZSBjb25zdHJhaW50cyBhbmQgZm9ybWF0IG9iamVjdHMgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb24gdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25zdHJhaW50c1xuICogQHBhcmFtIHtPYmplY3R9IGZvcm1hdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBpc0V4YWN0ID0gY3VycnkoKGNvbnN0cmFpbnRzLCBmb3JtYXQpID0+IHtcbiAgaWYgKHR5cGVvZiBjb25zdHJhaW50cy52aWRlbyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBjb25zdCB3ID0gY29uc3RyYWludHMudmlkZW8uaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgPyBnZXRWYWx1ZUZyb21Db25zdHJhaW50QXR0cmlidXRlKGNvbnN0cmFpbnRzLnZpZGVvLndpZHRoKSA6IDBcbiAgY29uc3QgaCA9IGNvbnN0cmFpbnRzLnZpZGVvLmhhc093blByb3BlcnR5KCdoZWlnaHQnKSA/IGdldFZhbHVlRnJvbUNvbnN0cmFpbnRBdHRyaWJ1dGUoY29uc3RyYWludHMudmlkZW8uaGVpZ2h0KSA6IDBcbiAgY29uc3QgY29uZmlybWVkID0gKHcgPT09IGZvcm1hdC53aWR0aCkgJiYgKGggPT09IGZvcm1hdC5oZWlnaHQpXG4gIGlmIChjb25maXJtZWQpIHtcbiAgICBkZWJ1ZygnW2d1bTppc0V4YWN0XScsIGBGb3VuZCBtYXRjaGluZyByZXNvbHV0aW9uIGZvciAke2Zvcm1hdC53aWR0aH0sICR7Zm9ybWF0LmhlaWdodH0uYClcbiAgfVxuICByZXR1cm4gY29uZmlybWVkXG59KVxuXG4vKipcbiAqIFRlc3QgaWYgdGhlIGFyZWEgb24gdGhlIHByb3ZpZGUgZm9ybWF0IGlzIGxvd2VyIHRoYW4gdGhlIGFyZWEgb24gdGhlIE1lZGlhIENvbnN0cmFpbnRzLlxuICogVGhpcyBpcyB1c2VkIGluIHRyeWluZyB0byBmaW5kIHRoZSBuZXh0IG5lYXJlc3QgbmVpZ2hib3Igb2YgZGltZW5zaW9ucyB0aGF0IHRoZSBicm93c2VyIHN1cHBvcnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25zdHJhaW50c1xuICogQHBhcmFtIHtPYmplY3R9IGZvcm1hdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBpc0xvd2VyID0gY3VycnkoKGNvbnN0cmFpbnRzLCBmb3JtYXQpID0+IHtcbiAgY29uc3QgdyA9IGNvbnN0cmFpbnRzLnZpZGVvLmhhc093blByb3BlcnR5KCd3aWR0aCcpID8gZ2V0VmFsdWVGcm9tQ29uc3RyYWludEF0dHJpYnV0ZShjb25zdHJhaW50cy52aWRlby53aWR0aCkgOiAwXG4gIGNvbnN0IGggPSBjb25zdHJhaW50cy52aWRlby5oYXNPd25Qcm9wZXJ0eSgnaGVpZ2h0JykgPyBnZXRWYWx1ZUZyb21Db25zdHJhaW50QXR0cmlidXRlKGNvbnN0cmFpbnRzLnZpZGVvLmhlaWdodCkgOiAwXG4gIGNvbnN0IGRlc2lyZWQgPSB3ICogaFxuICBjb25zdCBkaW1lbnNpb25zID0gZm9ybWF0LndpZHRoICogZm9ybWF0LmhlaWdodFxuICByZXR1cm4gZGltZW5zaW9ucyA8IGRlc2lyZWRcbn0pXG5cbi8qKlxuICogUmV0dXJucyBmaWx0ZXJlZCBvZiBNZWRpYSBDb25zdHJhaW50IGZvcm1hdCBpZiBtYXRjaGluZyB0aGUgY2FubmVkIGxpc3Qgb2Ygc3VwcG9ydCBmb3JtIGBmb3JtYXRzYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBmb3JtYXRMaXN0XG4gKiBAcGFyYW0ge09iamVjdH0gY29uc3RyYWludHNcbiAqIEByZXR1cm4ge0FycmF5fVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGhhc01hdGNoaW5nRm9ybWF0ID0gY3VycnkoKGZvcm1hdHNMaXN0LCBjb25zdHJhaW50cykgPT4ge1xuICBkZWJ1ZygnW2d1bTpoYXNNYXRjaGluZ0Zvcm1hdF0nLCAnRmlsdGVyZWQgbGlzdDogJyArIEpTT04uc3RyaW5naWZ5KGZpbHRlcihpc0V4YWN0KGNvbnN0cmFpbnRzKSkoZm9ybWF0c0xpc3QpLCBudWxsLCAyKSlcbiAgcmV0dXJuIGZpbHRlcihpc0V4YWN0KGNvbnN0cmFpbnRzKSkoZm9ybWF0c0xpc3QpLmxlbmd0aCA+IDBcbn0pXG5cbi8qKlxuICogUmV0dXJucyBsaXN0IG9mIGZpbHRlciBsb3dlciByZXNvbHV0aW9uIGNvbnN0cmFpbnRzIGZyb20gdGhlIHByb3ZpZGVkIE1lZGlhIGNvbnN0cmFpbnRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGZvcm1heUxpc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25zdHJhaW50c1xuICogQHJldHVybiB7QXJyYXl9XG4gKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgZmluZExvd2VyUmVzb2x1dGlvbnMgPSBjdXJyeSgoZm9ybWF0c0xpc3QsIGNvbnN0cmFpbnRzKSA9PiB7XG4gIGxldCByZXNJc0xvd2VyID0gaXNMb3dlcihjb25zdHJhaW50cylcbiAgcmV0dXJuIGZpbHRlcihyZXNJc0xvd2VyKShmb3JtYXRzTGlzdClcbn0pXG5cbi8qKlxuICogQWxsb3dzIHRoZSBicm93c2VyIHRvIHRyeSBhbmQgZGV0ZXJtaW5lIHRoZSByZXNvbHV0aW9uIHRvIHVzZSBiYXNlZCBvbiBgdmlkZW86IHRydWVgIGF0dHJpYnV0ZSBpbiBgZ2V0VXNlck1lZGlhYCBjYWxsLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiAgICAgICAgVGhlIE1lZGlhIENvbnN0YWludHMgb2JqZWN0LlxuICogQHBhcmFtIHtQcm9taXNlfSBwXG4gKiAgICAgICAgVGhlIGBQcm9taXNlYCB0byByZXNvbHZlIG9yIHJlamVjdCBvbiBkZXRlbWluYXRpb24gb2YgYWxsb3dlZCBNZWRpYSBDb25zdHJhaW50cyBvbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBhbGxvd0Jyb3dzZXJUb0RlZmluZVJlc29sdXRpb24gPSAoZGF0YSwgcCkgPT4ge1xuICAvLyBkZWZhdWx0IHRvIGB2aWRlbzogdHJ1ZWAgaW4gaG9wZXMgdGhlIGJyb3dzZXIgY2FuIGRlY2lkZSBvbiBpdHMgb3duLlxuICBkYXRhLnZpZGVvID0gdHJ1ZVxuICBlbnZpcm9ubWVudC5nVU0oZGF0YSlcbiAgICAudGhlbihtZWRpYSA9PiB7XG4gICAgICBwLnJlc29sdmUoe1xuICAgICAgICBtZWRpYTogbWVkaWEsXG4gICAgICAgIGNvbnN0cmFpbnRzOiBkYXRhXG4gICAgICB9KVxuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogW2Vyci5uYW1lLCBlcnIubWVzc2FnZV0uam9pbignOiAnKVxuICAgICAgZGVidWcoJ1tndW06Z2V0VXNlck1lZGlhXScsIGBGYWlsdXJlIGluIGdldFVzZXJNZWRpYTogJHttc2d9LiBBdHRlbXB0aW5nIG90aGVyIHJlc29sdXRpb24gdGVzdHMuLi5gKVxuICAgICAgZGVidWcoJ1tnVU06ZmluZGZvcm1hdF0nLCBgQ29uc3RyYWludHMgZGVjbGluZWQgYnkgYnJvd3NlcjogJHtKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKX1gKVxuICAgICAgcC5yZWplY3QoJ0NvdWxkIG5vdCBmaW5kIHByb3BlciBjYW1lcmEgZm9yIHByb3ZpZGVkIGNvbnN0cmFpbnRzLicpXG4gICAgfSlcbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBzZWxlY3QgdGhlIGJlc3QgcmVzb2x1dGlvbiBiYXNlZCBvbiB3aGV0aGVyIHRoZSBicm93c2VyIHRocm93cyBhbiBleGNlcHRpb24gd2hlbiByZXF1ZXN0aW5nIGBNZWRpYVN0cmVhbWAgb24gYGdldFVzZXJNZWRpYWAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqICAgICAgICBUaGUgTWVkaWEgQ29uc3RhaW50cyBvYmplY3QuXG4gKiBAcGFyYW0ge0FycmF5fSBzZWxlY3Rpb25zXG4gKiAgICAgICAgVGhlIGxpc3Rpbmcgb2YgZm9ybWF0cyB0byB0ZXN0IG9uLlxuICogQHBhcmFtIHtQcm9taXNlfSBwXG4gKiAgICAgICAgVGhlIGBQcm9taXNlYCB0byByZXNvbHZlIG9yIHJlamVjdCBvbiBkZXRlbWluYXRpb24gb2YgYWxsb3dlZCBNZWRpYSBDb25zdHJhaW50cyBvbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBmaW5kTmV4dFNlbGVjdGlvbiA9IChkYXRhLCBzZWxlY3Rpb25zLCBwKSA9PiB7XG4gIGlmIChzZWxlY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgLy8gaWYgd2UgZ290IGhlcmUsIHRoZXJlIGlzIG5vIHN1cHBvcnQuXG4gICAgYWxsb3dCcm93c2VyVG9EZWZpbmVSZXNvbHV0aW9uKGRhdGEsIHApXG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3Qgc2VsZWN0aW9uID0gc2VsZWN0aW9ucy5zaGlmdCgpXG4gIGRhdGEudmlkZW8ud2lkdGggPSB7ZXhhY3Q6IHNlbGVjdGlvbi53aWR0aH1cbiAgZGF0YS52aWRlby5oZWlnaHQgPSB7ZXhhY3Q6IHNlbGVjdGlvbi5oZWlnaHR9XG4gIGVudmlyb25tZW50LmdVTShkYXRhKVxuICAgIC50aGVuKG1lZGlhID0+IHtcbiAgICAgIHAucmVzb2x2ZSh7XG4gICAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgICAgY29uc3RyYWludHM6IGRhdGFcbiAgICAgIH0pXG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgY29uc3QgbXNnID0gdHlwZW9mIGVyciA9PT0gJ3N0cmluZycgPyBlcnIgOiBbZXJyLm5hbWUsIGVyci5tZXNzYWdlXS5qb2luKCc6ICcpXG4gICAgICBkZWJ1ZygnW2d1bTpnZXRVc2VyTWVkaWFdJywgYEZhaWx1cmUgaW4gZ2V0VXNlck1lZGlhOiAke21zZ30uIEF0dGVtcHRpbmcgb3RoZXIgcmVzb2x1dGlvbiB0ZXN0cy4uLmApXG4gICAgICBkZWJ1ZygnW2dVTTpmaW5kZm9ybWF0XScsIGBDb25zdHJhaW50cyBkZWNsaW5lZCBieSBicm93c2VyOiAke0pTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpfWApXG4gICAgICBmaW5kTmV4dFNlbGVjdGlvbihkYXRhLCBzZWxlY3Rpb25zLCBwKVxuICAgIH0pXG59XG5cbi8qKlxuICogUXVpY2sgdGVzdCBpZiByZXNvbHV0aW9uIGlzIHN1cHBvcnRlZCBvbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uc3RyYWludHNcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgcXVpY2tSZXNvbHV0aW9uU3VwcG9ydCA9IChjb25zdHJhaW50cykgPT4ge1xuICBsZXQgZGF0YSA9IGRlZXBDb3B5KGNvbnN0cmFpbnRzKVxuICAvLyBpZiB2aWRlbzogYHRydWVgLCByZXR1cm5lZCB1bnNjYXRoZWQuXG4gIGlmICh0eXBlb2YgY29uc3RyYWludHMudmlkZW8gPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBkYXRhXG4gIH1cbiAgLy8gZWxzZSwgZGVmaW5lIGV4YWN0LlxuICBpZiAoY29uc3RyYWludHMudmlkZW8ud2lkdGgpIHtcbiAgICBkYXRhLnZpZGVvLndpZHRoID0ge2V4YWN0OiBnZXRWYWx1ZUZyb21Db25zdHJhaW50QXR0cmlidXRlKGNvbnN0cmFpbnRzLnZpZGVvLndpZHRoKX1cbiAgfVxuICBpZiAoY29uc3RyYWludHMudmlkZW8uaGVpZ2h0KSB7XG4gICAgZGF0YS52aWRlby5oZWlnaHQgPSB7ZXhhY3Q6IGdldFZhbHVlRnJvbUNvbnN0cmFpbnRBdHRyaWJ1dGUoY29uc3RyYWludHMudmlkZW8uaGVpZ2h0KX1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKipcbiAqIERldGVtaW5lIHRoZSBzdXBwb3J0ZWQgcmVzb2x1dGlvbiBvbiB0aGUgYnJvd3NlciBiYXNlZCBvbiB0aGUgTWVkaWEgQ29uc3RyYWludHMgcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25zdHJhaW50c1xuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBkZXRlcm1pbmVTdXBwb3J0ZWRSZXNvbHV0aW9uID0gKGNvbnN0cmFpbnRzKSA9PiB7XG4gIGRlYnVnKCdbZ3VtOmRldGVybWluZVN1cHBvcnRlZFJlc29sdXRpb25dJywgJ0RldGVybWluZSBuZXh0IG5laWdoYm9yIGJhc2VkIG9uIGNvbnN0cmFpbnRzOiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMsIG51bGwsIDIpKVxuICBsZXQgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgbGV0IHNlbGVjdGlvbnMgPSBmaW5kTG93ZXJSZXNvbHV0aW9ucyhmb3JtYXRzKShjb25zdHJhaW50cylcbiAgbGV0IGRhdGEgPSBkZWVwQ29weShjb25zdHJhaW50cylcbiAgZmluZE5leHRTZWxlY3Rpb24oZGF0YSwgc2VsZWN0aW9ucywgZGVmZXJyZWQpXG4gIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG59XG5cbi8qKlxuICogUXVpY2sgdGVzdCB0byBzZWUgaWYgV2ViUlRDIGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBpc1N1cHBvcnRlZCA9ICgpID0+IHtcbiAgcmV0dXJuIF9SVENQZWVyQ29ubmVjdGlvbiAmJiBfUlRDSWNlQ2FuZGlkYXRlICYmIF9SVENTZXNzaW9uRGVzY3JpcHRpb25cbn1cblxuLyoqXG4gKiBQcm94eSBvbiBgZ2V0VXNlck1lZGlhYCB0byB0cnkgYW5kIHJlc29sdmUgdG8gdGhlIGJlc3QgcG9zc2libGUgcmVzb2x1dGlvbiBmb3IgYnJvYWRjYXN0IGJhc2VkIG9uIE1lZGlhIENvbnN0cmFpbnRzIG9iamVjdCBwcm92aWRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uc3RyYWludHNcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKiAgICAgICAgVGhlIGBQcm9taXNlYCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IG9uIHByb3Blcmx5IGFjY2Vzc2luZyBhIGBNZWRpYVN0cmVhbWAgZnJvbSBgZ2V0VXNlck1lZGlhYCBvbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0VXNlck1lZGlhID0gKGNvbnN0cmFpbnRzKSA9PiB7XG4gIC8vIFdyYXBwaW5nIGBnZXRVc2VyTWVkaWFgIHJlcXVlc3RzIGluIGFub3RoZXIgZGVmZXJyZWQgcHJvbWlzZSBzbyB3ZSBjYW4gcmV0dXJuIHRoZSBzZWxlY3RlZCByZXNvbHV0aW9ucyBpZiBzdWNjZXNzZnVsLlxuICBsZXQgZGZkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gIGxldCBpc0F2YWlsYWJsZUluRm9ybWF0cyA9IGhhc01hdGNoaW5nRm9ybWF0KGZvcm1hdHMpXG4gIGRlYnVnKCdbZ3VtOmdldFVzZXJNZWRpYV0nLCAnSXMgQXZhaWxhYmxlIGluIGZvcm1hdCBsaXN0aW5nOiAnICsgaXNBdmFpbGFibGVJbkZvcm1hdHMoY29uc3RyYWludHMpKVxuICBjb25zdCBmYWlsb3ZlciA9IChlcnIpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjb25zdCBtc2cgPSB0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IFtlcnIubmFtZSwgZXJyLm1lc3NhZ2VdLmpvaW4oJzogJylcbiAgICAgIGRlYnVnKCdbZ3VtOmdldFVzZXJNZWRpYV0nLCBgRmFpbHVyZSBpbiBnZXRVc2VyTWVkaWE6ICR7bXNnfS4gQXR0ZW1wdGluZyBvdGhlciByZXNvbHV0aW9uIHRlc3RzLi4uYClcbiAgICB9XG4gICAgZGV0ZXJtaW5lU3VwcG9ydGVkUmVzb2x1dGlvbihjb25zdHJhaW50cylcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIGRmZC5yZXNvbHZlKHtcbiAgICAgICAgICBtZWRpYTogcmVzLm1lZGlhLFxuICAgICAgICAgIGNvbnN0cmFpbnRzOiByZXMuY29uc3RyYWludHNcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBkZmQucmVqZWN0KHtcbiAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgY29uc3RyYWludHM6IGNvbnN0cmFpbnRzXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9XG4gIGlmICghaGFzUmVzb2x1dGlvbnNEZWZpbmVkKGNvbnN0cmFpbnRzKSkge1xuICAgIGRlYnVnKCdbZ3VtOmdldFVzZXJNZWRpYV0nLCAnQ29uc3RyYWludHMgd2VyZSBub3QgZGVmaW5lZCBwcm9wZXJseS4gQXR0ZW1wdGluZyBmYWlsb3Zlci4uLicpXG4gICAgZW52aXJvbm1lbnQuZ1VNKGNvbnN0cmFpbnRzKVxuICAgICAgLnRoZW4obWVkaWEgPT4ge1xuICAgICAgICBkZmQucmVzb2x2ZSh7XG4gICAgICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgICAgIGNvbnN0cmFpbnRzOiBjb25zdHJhaW50c1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmYWlsb3ZlcilcbiAgfVxuICBlbHNlIGlmIChpc0F2YWlsYWJsZUluRm9ybWF0cyhjb25zdHJhaW50cykpIHtcbiAgICBkZWJ1ZygnW2d1bTpnZXRVc2VyTWVkaWFdJywgJ0ZvdW5kIGNvbnN0cmFpbnRzIGluIGxpc3QuIENoZWNraW5nIHF1aWNrIHN1cHBvcnQgZm9yIGZhc3RlciBzZXR1cCB3aXRoOiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMsIG51bGwsIDIpKVxuICAgIC8vIFRyeSBxdWljayBzZXR0aW5nIG9mIGBleGFjdGAgcmVzb2x1dGlvbi4uLlxuICAgIGxldCBhdmFpbGFibGUgPSBxdWlja1Jlc29sdXRpb25TdXBwb3J0KGNvbnN0cmFpbnRzKVxuICAgIGVudmlyb25tZW50LmdVTShhdmFpbGFibGUpXG4gICAgICAudGhlbihtZWRpYSA9PiB7XG4gICAgICAgIGRmZC5yZXNvbHZlKHtcbiAgICAgICAgICBtZWRpYTogbWVkaWEsXG4gICAgICAgICAgY29uc3RyYWludHM6IGF2YWlsYWJsZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmYWlsb3ZlcilcbiAgfVxuICBlbHNlIHtcbiAgICBkZWJ1ZygnW2d1bTpnZXRVc2VyTWVkaWFdJywgJ0NvdWxkIG5vdCBmaW5kIGNvbnRyYWludHMgaW4gbGlzdC4gQXR0ZW1wdGluZyBmYWlsb3Zlci4uLicpXG4gICAgZmFpbG92ZXIoKVxuICB9XG4gIHJldHVybiBkZmQucHJvbWlzZVxufVxuXG4vKipcbiAqIEZvcmNlIHRvIGNhbGwgYGdldFVzZXJNZWRpYWAgZGlyZWN0bHkgb24gdGhlIGJyb3dzZXIgYW5kIGJ5cGFzcyB0aGUgcmVzb2x1dGlvbiBkZXRlY3Rpb24gbWVjaGFuaXNtIHByb3ZpZGVkIGJ5IG90aGVyIG1ldGhvZHMgb24gdGhpcyBtb2R1bGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGZvcmNlVXNlck1lZGlhID0gKGNvbnN0cmFpbnRzKSA9PiB7XG4gIHJldHVybiBlbnZpcm9ubWVudC5nVU0oY29uc3RyYWludHMpXG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWF6LWtoYW4vV2ViUlRDLUV4cGVyaW1lbnQvYmxvYi9tYXN0ZXIvUlRDUGVlckNvbm5lY3Rpb24vUlRDUGVlckNvbm5lY3Rpb24tdjEuNi5qcyNMMTU4XG4vLyBNdWF6IEtoYW4gICAgIC0gZ2l0aHViLmNvbS9tdWF6LWtoYW5cbi8vIE1JVCBMaWNlbnNlICAgLSB3d3cuV2ViUlRDLUV4cGVyaW1lbnQuY29tL2xpY2VuY2Vcbi8vIERvY3VtZW50YXRpb24gLSBnaXRodWIuY29tL211YXota2hhbi9XZWJSVEMtRXhwZXJpbWVudC90cmVlL21hc3Rlci9SVENQZWVyQ29ubmVjdGlvblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUJhbmR3aWR0aCA9IChvcHRpb25zLCBzZHApID0+IHtcbiAgaWYgKGVudmlyb25tZW50LmdldElzTW96KCkpIHtcbiAgICBsZXQgYV9pbmRleCwgbF9pbmRleCwgZnJvbnQsIGJhY2tcbiAgICBpZiAob3B0aW9ucy5hdWRpbykge1xuICAgICAgYV9pbmRleCA9IHNkcC5pbmRleE9mKCdtPWF1ZGlvJylcbiAgICAgIGxfaW5kZXggPSBzZHAuaW5kZXhPZignXFxyXFxuJywgYV9pbmRleClcbiAgICAgIGZyb250ID0gc2RwLnNsaWNlKDAsIGxfaW5kZXgpXG4gICAgICBiYWNrID0gc2RwLnNsaWNlKGxfaW5kZXggKyAnXFxyXFxuJy5sZW5ndGgsIHNkcC5sZW5ndGgpXG4gICAgICBzZHAgPSBbZnJvbnQsICdiPUFTOicgKyBvcHRpb25zLmF1ZGlvLCBiYWNrXS5qb2luKCdcXHJcXG4nKVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy52aWRlbykge1xuICAgICAgYV9pbmRleCA9IHNkcC5pbmRleE9mKCdtPXZpZGVvJylcbiAgICAgIGxfaW5kZXggPSBzZHAuaW5kZXhPZignXFxyXFxuJywgYV9pbmRleClcbiAgICAgIGZyb250ID0gc2RwLnNsaWNlKDAsIGxfaW5kZXgpXG4gICAgICBiYWNrID0gc2RwLnNsaWNlKGxfaW5kZXggKyAnXFxyXFxuJy5sZW5ndGgsIHNkcC5sZW5ndGgpXG4gICAgICBzZHAgPSBbZnJvbnQsICdiPUFTOicgKyBvcHRpb25zLnZpZGVvLCBiYWNrXS5qb2luKCdcXHJcXG4nKVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBzZHAgPSBzZHAucmVwbGFjZSgvYj1BUyhbXlxcclxcbl0rXFxyXFxuKS9nLCAnJylcbiAgICBpZiAob3B0aW9ucy5hdWRpbykge1xuICAgICAgc2RwID0gc2RwLnJlcGxhY2UoL2E9bWlkOmF1ZGlvXFxyXFxuL2csICdhPW1pZDphdWRpb1xcclxcbmI9QVM6JyArIG9wdGlvbnMuYXVkaW8gKyAnXFxyXFxuJylcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMudmlkZW8pIHtcbiAgICAgIHNkcCA9IHNkcC5yZXBsYWNlKC9hPW1pZDp2aWRlb1xcclxcbi9nLCAnYT1taWQ6dmlkZW9cXHJcXG5iPUFTOicgKyBvcHRpb25zLnZpZGVvICsgJ1xcclxcbicpXG4gICAgfVxuICB9XG4gIHJldHVybiBzZHBcbn1cblxuLyogLS0gaGFuZGxlZCBieSBhZGFwdGVyLmpzIC0tICovXG5jb25zdCBfUlRDUGVlckNvbm5lY3Rpb24gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gfHwgKHdpbmRvdy5tb3pSVENQZWVyQ29ubmVjdGlvbiB8fCB3aW5kb3cud2Via2l0UlRDUGVlckNvbm5lY3Rpb24pXG5jb25zdCBfUlRDSWNlQ2FuZGlkYXRlID0gd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSB8fCAod2luZG93Lm1velJUQ0ljZUNhbmRpZGF0ZSB8fCB3aW5kb3cud2Via2l0UlRDSWNlQ2FuZGlkYXRlKVxuY29uc3QgX1JUQ1Nlc3Npb25EZXNjcmlwdGlvbiA9IHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gfHwgKHdpbmRvdy5tb3pSVENTZXNzaW9uRGVzY3JpcHRpb24gfHwgd2luZG93LndlYmtpdFJUQ1Nlc3Npb25EZXNjcmlwdGlvbilcblxuZXhwb3J0IGNvbnN0IFJUQ1BlZXJDb25uZWN0aW9uID0gX1JUQ1BlZXJDb25uZWN0aW9uXG5leHBvcnQgY29uc3QgUlRDSWNlQ2FuZGlkYXRlID0gX1JUQ0ljZUNhbmRpZGF0ZVxuZXhwb3J0IGNvbnN0IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiA9IF9SVENTZXNzaW9uRGVzY3JpcHRpb25cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2FkYXB0ZXIvd2VicnRjLmpzIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBlbnZpcm9ubWVudCBmcm9tICcuLi9lbnYvYnJvd3NlcidcblxuLyoqXG4gKiBUZXN0IGZvciBXZWJTb2NrZXQgc3VwcG9ydCBpbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBpc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGVudmlyb25tZW50LnN1cHBvcnRzV2ViU29ja2V0KClcbn1cblxuLyoqXG4gKiBBdHRlbXB0IGF0IGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBhIGBXZWJTb2NrZXRgIGF0IGVuZHBvaW50IFVSTC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtXZWJTb2NrZXR9XG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuIGVudmlyb25tZW50LmNyZWF0ZVdlYlNvY2tldCh1cmwpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvYWRhcHRlci93ZWJzb2NrZXQuanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4uL2Vudi9icm93c2VyJ1xuaW1wb3J0IHsgZGVidWcsIGVycm9yIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBOQU1FID0gJ1I1UHJvUGxheWJhY2tWaWV3J1xuY29uc3QgcGxheWJhY2tJZCA9ICdyZWQ1cHJvLXN1YnNjcmliZXInXG5cbi8qKlxuICogQnJpZGdlIGJldHdlZW4gRE9NIEVsZW1lbnQgdmlldyBhbmQgU3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbi5cbiAqIFN0aWxsIHVzZWQsIGJ1dCBpbnRlcm5hbGl6ZWQgYXMgb2YgNC4wLjAuIFVwIGZvciBkZXByZWNhdGlvbiwgdXAgZm9yIGRpc2N1c3Npb24uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXliYWNrVmlldyB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBlbGVtZW50SWRcbiAgICogICAgICAgIFRoZSBlbGVtZW50IGBpZGAgdG8gdXNlIGZvciBwbGF5YmFjayBkaXNwbGF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGVsZW1lbnRJZCA9IHBsYXliYWNrSWQpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVGFyZ2V0IHZpZGVvL2F1ZGlvIGVsZW1lbnQuXG4gICAgICB0aGlzLl90YXJnZXRFbGVtZW50ID0gZW52aXJvbm1lbnQucmVzb2x2ZUVsZW1lbnQoZWxlbWVudElkKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yKE5BTUUsIGBDb3VsZCBub3QgaW5zdGFudGlhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgUmVkNVByb1N1YnNjcmliZXIuIFJlYXNvbjogJHtlLm1lc3NhZ2V9YClcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzb2NpYXRlcyBTdWJzY3JpYmVyIGluc3RhbmNlIHdpdGggdGhpcyB2aWV3IG1hbmFnZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdWJzY3JpYmVyXG4gICAqICAgICAgICBUaGUgU3Vic2NyaWJlciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF0dGFjaFN1YnNjcmliZXIgKHN1YnNjcmliZXIpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2F0dGFjaHN1YnNjcmliZXJdJylcbiAgICBzdWJzY3JpYmVyLnNldFZpZXcodGhpcywgZW52aXJvbm1lbnQuZ2V0RWxlbWVudElkKHRoaXMuX3RhcmdldEVsZW1lbnQpKVxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2lnbiB0aGUgYE1lZGlhU3RyZWFtYCBvYmplY3QgdG8gdGhlIHZpZXcuXG4gICAqXG4gICAqIEBwYXJhbSB7TWVkaWFTdHJlYW19IG1lZGlhU3RyZWFtXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhdHRhY2hTdHJlYW0gKG1lZGlhU3RyZWFtKSB7XG4gICAgbGV0IGF1dG9wbGF5ID0gdGhpcy5pc0F1dG9wbGF5XG4gICAgZGVidWcoTkFNRSwgJ1thdHRhY2hzdHJlYW1dJylcbiAgICBlbnZpcm9ubWVudC5zZXRWaWRlb1NvdXJjZSh0aGlzLl90YXJnZXRFbGVtZW50LCBtZWRpYVN0cmVhbSwgYXV0b3BsYXkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyByZWNvZ25pemVkIGBhdXRvcGxheWAgYXR0cmlidXRlIG9uIHRoZSBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldCBpc0F1dG9wbGF5ICgpIHtcbiAgICByZXR1cm4gZW52aXJvbm1lbnQuaGFzQXR0cmlidXRlRGVmaW5lZCh0aGlzLl90YXJnZXRFbGVtZW50LCAnYXV0b3BsYXknKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0IHZpZXcgKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRFbGVtZW50XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5YmFja1ZpZXdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy92aWV3L3BsYXliYWNrLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKXtcbiAgaWYoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpe1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qc1xuLy8gbW9kdWxlIGlkID0gNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJylcbiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aFxuICAgICwgbHQgICAgID0gJzwnXG4gICAgLCBndCAgICAgPSAnPidcbiAgICAsIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7XG4gIHZhciByZXN1bHQ7XG4gIGlmKE8gIT09IG51bGwpe1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpe1xuICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qc1xuLy8gbW9kdWxlIGlkID0gNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGNvbnN0IFB1Ymxpc2hUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBSVE1QOiAncnRtcCcsXG4gIFJUQzogJ3J0Yydcbn0pXG5cbmV4cG9ydCBjb25zdCBQdWJsaXNoTW9kZVR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIExJVkU6ICdsaXZlJyxcbiAgUkVDT1JEOiAncmVjb3JkJyxcbiAgQVBQRU5EOiAnYXBwZW5kJ1xufSlcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2VudW0vcHVibGlzaC5qcyIsIi8qKlxuICogRW51bWVyYXRpb24gb2YgU3VwcG9ydCBJQ0UgVHJhbnNwb3J0IHR5cGVzLlxuICovXG5leHBvcnQgY29uc3QgSWNlVHJhbnNwb3J0VHlwZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgVURQOiAndWRwJyxcbiAgVENQOid0Y3AnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2VudW0vd2VicnRjLmpzIiwiLyoqXG4gKiBDb21tb24gZXZlbnQgdHlwZXMgb24gU2hhcmVkT2JqZWN0LlxuICpcbiAqIEBzZWUge1JlZDVQcm9TaGFyZWRPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBTaGFyZWRPYmplY3RFdmVudFR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIENPTk5FQ1RfU1VDQ0VTUzogJ0Nvbm5lY3QuU3VjY2VzcycsXG4gIENPTk5FQ1RfRkFJTFVSRTogJ0Nvbm5lY3QuRmFpbHVyZScsXG4gIFBST1BFUlRZX1VQREFURTogJ1NoYXJlZE9iamVjdC5Qcm9wZXJ0eVVwZGF0ZScsXG4gIE1FVEhPRF9VUERBVEU6ICdTaGFyZWRPYmplY3QuTWV0aG9kVXBkYXRlJ1xufSlcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2V2ZW50L3NoYXJlZG9iamVjdC1ldmVudC5qcyIsIid1c2Ugc3RyaWN0J1xuaW1wb3J0ICogYXMgd2Vic29ja2V0IGZyb20gJy4uL2FkYXB0ZXIvd2Vic29ja2V0J1xuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4uL2Vudi9icm93c2VyJ1xuaW1wb3J0IHsgRGVmZXJyZWRQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9wcm9taXNlJ1xuaW1wb3J0IHsgaW5mbywgZGVidWcsIHdhcm4gfSBmcm9tICcuLi9sb2cnXG5cbi8qKlxuICogQmFzZSBQcm94eSBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIFdlYlNvY2tldC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBTb2NrZXRIZWxwZXIge1xuXG4gIGNvbnN0cnVjdG9yIChyZXNwb25kZXIsIG5hbWUpIHtcbiAgICB0aGlzLl9yZXNwb25kZXIgPSByZXNwb25kZXJcbiAgICB0aGlzLl9wZW5kaW5nUG9zdFJlcXVlc3RzID0gW11cbiAgICB0aGlzLl93ZWJzb2NrZXQgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9jb25uZWN0aW9uUHJvbWlzZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX25hbWUgPSBuYW1lXG4gICAgdGhpcy5fcmVzcG9uc2VIYW5kbGVycyA9IFtdXG4gICAgdGhpcy5faXNUZXJtaW5hdGVkID0gZmFsc2VcbiAgICB0aGlzLl9yZXRyeUNvdW50ID0gMFxuICAgIHRoaXMuX3JldHJ5TGltaXQgPSAxXG4gICAgdGhpcy5fcmVhZHlDaGVja0NvdW50ID0gMFxuICAgIHRoaXMuX3JlYWR5Q2hlY2tMaW1pdCA9IDEwXG4gICAgdGhpcy5fb25jbG9zZSA9IHRoaXMudGVhckRvd24uYmluZCh0aGlzKVxuXG4gICAgdGhpcy5fb25vcGVuVGltZW91dCA9IDBcblxuICAgIHRoaXMuX2FzeW5jVGlja2V0cyA9IFtdXG4gIH1cblxuICBfcmVzZXRPbm9wZW5UaW1lb3V0ICh3cywgcHJvbWlzZSkge1xuICAgIC8vIGNvbnN0IGZvcmNlUmVjb25uZWN0ID0gZW52aXJvbm1lbnQuZ2V0SXNNb3ooKSB8fCBlbnZpcm9ubWVudC5nZXRJc0VkZ2UoKVxuICAgIGxldCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICAgIGlmICh3cy5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgIGluZm8odGhpcy5fbmFtZSwgJ1t3ZWJzb2NrZXRvcGVuXScpXG4gICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nUG9zdFJlcXVlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLnBvc3QodGhpcy5fcGVuZGluZ1Bvc3RSZXF1ZXN0cy5zaGlmdCgpKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZXNwb25kZXIgJiYgdGhpcy5fcmVzcG9uZGVyLm9uU29ja2V0T3Blbikge1xuICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblNvY2tldE9wZW4oKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYod3MucmVhZHlTdGF0ZSA9PT0gMCkge1xuICAgICAgICBpZiAoKyt0aGlzLl9yZWFkeUNoZWNrQ291bnQgPiB0aGlzLl9yZWFkeUNoZWNrTGltaXQpIHtcbiAgICAgICAgICB3YXJuKHRoaXMuX25hbWUsIGBXZWJTb2NrZXQgY29ubmVjdGlvbiBpc3N1ZS4gV2UgaGF2ZSB3YWl0ZWQgZm9yICR7dGhpcy5fcmVhZHlDaGVja0NvdW50LTF9IHNhbXBsZXMsIHdpdGhvdXQgYW55IGNvbm5lY3Rpb24uYClcbiAgICAgICAgICAvLyBJZiBGaXJlZm94L0VkZ2UsIHRyeSBhIHNlY29uZCBjb25uZWN0aW9uIGF0dGVtcHQgb3IgZmFpbC5cbiAgICAgICAgICAvKlxuICAgICAgICAgIGlmIChmb3JjZVJlY29ubmVjdCAmJiArK3RoaXMuX3JldHJ5Q291bnQgPCB0aGlzLl9yZXRyeUxpbWl0KSB7XG4gICAgICAgICAgICB3YXJuKHRoaXMuX25hbWUsIGBXZWJTb2NrZXQgYXR0ZW1wdGluZyByZXRyeS4uLmApXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVTb2NrZXRIYW5kbGVycyh3cylcbiAgICAgICAgICAgIHRoaXMuX29ub3BlblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX29ub3BlblRpbWVvdXQpXG4gICAgICAgICAgICAgIHRoaXMuc2V0VXAod3MudXJsLCBwcm9taXNlKVxuICAgICAgICAgICAgfSwgMjAwMClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qoe3R5cGU6ICdUaW1lb3V0J30pXG4gICAgICAgICAgfVxuICAgICAgICAgICovXG4gICAgICAgICAgdGhpcy5jbGVhclJldHJ5KClcbiAgICAgICAgICBwcm9taXNlLnJlamVjdCh7dHlwZTogJ1RpbWVvdXQnfSlcbiAgICAgICAgICB0aGlzLnRlYXJEb3duKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmZvKHRoaXMuX25hbWUsIGBXZWJTb2NrZXQgY29ubmVjdGlvbiBpcyBzdGlsbCBvcGVuaW5nLCB3aWxsIGxldCBpdCBjb250aW51ZSAoJHt0aGlzLl9yZWFkeUNoZWNrQ291bnR9KS4uLmApXG4gICAgICAgICAgdGhpcy5fb25vcGVuVGltZW91dCA9IHRoaXMuX3Jlc2V0T25vcGVuVGltZW91dCh3cywgcHJvbWlzZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5mbyh0aGlzLl9uYW1lLCBgV2ViU29ja2V0IGNvbm5lY3Rpb24gYXR0ZW1wdHMgaGF2ZSBlbmRlZCB3aXRoIHN0YXRlICgke3dzLnJlYWR5U3RhdGV9KS5gKVxuICAgICAgfVxuICAgIH0sIDUwMClcbiAgICByZXR1cm4gdGltZW91dFxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZnJvbSBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViU29ja2V0fSB3c1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZVNvY2tldEhhbmRsZXJzICh3cykge1xuICAgIGlmICh3cykge1xuICAgICAgd3Mub25vcGVuID0gdW5kZWZpbmVkXG4gICAgICB3cy5vbm1lc3NhZ2UgPSB1bmRlZmluZWRcbiAgICAgIHdzLm9uZXJyb3IgPSB1bmRlZmluZWRcbiAgICAgIHdzLm9uY2xvc2UgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyBldmVudCBoYW5kbGVyIHRvIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJTb2NrZXR9IHdzXG4gICAqIEBwYXJhbSB7UHJvbWlzZX1cbiAgICogICAgICAgIFRoZSBgUHJvbWlzZWAgdG8gcmVqZWN0IG9uIGVycm9yIGluIGNvbm5lY3Rpb24gdG8gV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZFNvY2tldEhhbmRsZXJzICh3cywgcHJvbWlzZSkge1xuXG4gICAgLyogXG4gICAgICogUmVtb3ZpbmcgdGhpcyBpbiBmYXZvciBvZiBjaGVja2luZyByZWFkeVN0YXRlIGZvciB2ZXJpZmljYXRpb24gb2Ygb3Blbi5cbiAgICAgKlxuICAgIHdzLm9ub3BlbiA9ICgpID0+IHtcbiAgICAgIGluZm8odGhpcy5fbmFtZSwgJ1t3ZWJzb2NrZXRvcGVuXScpXG4gICAgICB3aGlsZSAodGhpcy5fcGVuZGluZ1Bvc3RSZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMucG9zdCh0aGlzLl9wZW5kaW5nUG9zdFJlcXVlc3RzLnNoaWZ0KCkpXG4gICAgICB9XG4gICAgfVxuICAgICovXG5cbiAgICB0aGlzLl9yZWFkeUNoZWNrQ291bnQgPSAwXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX29ub3BlblRpbWVvdXQpXG4gICAgdGhpcy5fb25vcGVuVGltZW91dCA9IHRoaXMuX3Jlc2V0T25vcGVuVGltZW91dCh3cywgcHJvbWlzZSlcblxuICAgIHdzLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgIHdhcm4odGhpcy5fbmFtZSwgYFt3ZWJzb2NrZXRlcnJvcl06IEVycm9yIGZyb20gV2ViU29ja2V0LiAke2Vycm9yLnR5cGV9LmApXG4gICAgICB0aGlzLmNsZWFyUmV0cnkoKVxuICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpXG4gICAgfVxuXG4gICAgd3Mub25tZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgIHRoaXMucmVzcG9uZChtZXNzYWdlKVxuICAgIH1cblxuICAgIHdzLm9uY2xvc2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIHdhcm4odGhpcy5fbmFtZSwgYFt3ZWJzb2NrZXRjbG9zZV06ICR7ZXZlbnQuY29kZX1gKVxuICAgICAgaWYgKHRoaXMuX3Jlc3BvbmRlcikge1xuICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblNvY2tldENsb3NlKGV2ZW50KVxuICAgICAgfVxuICAgICAgdGhpcy5jbGVhclJldHJ5KClcbiAgICAgIHRoaXMuX3JlbW92ZVNvY2tldEhhbmRsZXJzKHdzIHx8IHRoaXMuX3dlYnNvY2tldClcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVyIGZvciB1bmV4cGVjdGVkIGVycm9yIHRocm91Z2ggV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXJyb3JcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblVuZXhwZWN0ZWRTb2NrZXRFcnJvciAoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5fcmVzcG9uZGVyKSB7XG4gICAgICB0aGlzLl9yZXNwb25kZXIub25Tb2NrZXRDbG9zZShlcnJvcilcbiAgICB9XG4gICAgd2Fybih0aGlzLl9uYW1lLCBgW3dlYnNvY2tldGVycm9yXTogUG9zc2libGUgVW5leHBlY3RlZCBFcnJvciBmcm9tIFdlYlNvY2tldC4gJHtlcnJvci50eXBlfSwgJHtlcnJvci5kZXRhaWx9YClcbiAgICB0aGlzLmNsZWFyUmV0cnkoKVxuICAgIHRoaXMuX3JlbW92ZVNvY2tldEhhbmRsZXJzKHRoaXMuX3dlYnNvY2tldClcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHJldHJ5IGNvdW50IHRvIGFsbG93IGZvciBzaW5nbGUgcHVibGlzaGVyIHRvIHJldHJ5IGFnYWluIGFmdGVyIGFuIHVucHVibGlzaC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNsZWFyUmV0cnkgKCkge1xuICAgIHRoaXMuX3JldHJ5Q291bnQgPSAwXG4gICAgdGhpcy5fcmVhZHlDaGVja0NvdW50ID0gMFxuICAgIGNsZWFyVGltZW91dCh0aGlzLl9vbm9wZW5UaW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gc2V0dXAgV2ViU29ja2V0IGNvbm5lY3Rpb24gZm9yIGNvbW11bmljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAgICogICAgICAgIEVuZHBvaW50IFVSTCBvZiB0aGUgc29ja2V0IHRvIGNvbm5lY3QgdG8uXG4gICAqIEBwYXJhbSB7UHJvbWlzZX0gc2V0dXBQcm9taXNlXG4gICAqICAgICAgICBUaGUgYFByb21pc2VgIHRvIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3Mgb2Ygc2V0dXAgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gICAqL1xuICBzZXRVcCAodXJsLCBzZXR1cFByb21pc2UpIHtcbiAgICBjb25zdCBmb3JjZVJlY29ubmVjdCA9IGVudmlyb25tZW50LmdldElzTW96KCkgfHwgZW52aXJvbm1lbnQuZ2V0SXNFZGdlKClcbiAgICBkZWJ1Zyh0aGlzLl9uYW1lLCBgW3dlYnNvY2tldDpzZXR1cF0gJHt1cmx9LmApXG4gICAgdGhpcy50ZWFyRG93bigpXG4gICAgdGhpcy5faXNUZXJtaW5hdGVkID0gZmFsc2VcbiAgICB0aGlzLl9jb25uZWN0aW9uUHJvbWlzZSA9IHNldHVwUHJvbWlzZVxuICAgIGVudmlyb25tZW50LmFkZENsb3NlSGFuZGxlcih0aGlzLl9vbmNsb3NlKVxuICAgIHRoaXMuX3dlYnNvY2tldCA9IHdlYnNvY2tldC5jcmVhdGUodXJsKVxuICAgIHRoaXMuX2FkZFNvY2tldEhhbmRsZXJzKHRoaXMuX3dlYnNvY2tldCwgdGhpcy5fY29ubmVjdGlvblByb21pc2UpXG4gICAgaWYgKGZvcmNlUmVjb25uZWN0ICYmIHRoaXMuX3JldHJ5Q291bnQrKyA8IHRoaXMuX3JldHJ5TGltaXQpIHtcbiAgICAgIGRlYnVnKHRoaXMuX25hbWUsICdXZSBoYXZlIGRldGVybWluZWQgaXQgaXMgRmlyZWZveCBhbmQgYXJlIHNldHRpbmcgdXAgYSByZXRyeSBsaW1pdC4nKVxuICAgICAgbGV0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX3dlYnNvY2tldCAmJiB0aGlzLl93ZWJzb2NrZXQucmVhZHlTdGF0ZSA9PT0gMCkge1xuICAgICAgICAgIGRlYnVnKHRoaXMuX25hbWUsIGBbd2Vic29ja2V0OkZGLXRpbWVvdXRdYClcbiAgICAgICAgICBkZWJ1Zyh0aGlzLl9uYW1lLCAnT3VyIGNvbm5lY3Rpb24gb24gRmlyZWZveCB0byB0aGUgd3NzIGVuZHBvaW50IGhhcyB0aW1lZCBvdXQuIExldFxcJ3MgdHJ5IHRoYXQgYWdhaW4uJylcbiAgICAgICAgICB0aGlzLl9yZW1vdmVTb2NrZXRIYW5kbGVycyh0aGlzLl93ZWJzb2NrZXQpXG4gICAgICAgICAgdGhpcy5zZXRVcCh1cmwsIHNldHVwUHJvbWlzZSlcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICAgIH0sIDIwMDApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gdGVhciBkb3duIGFueSBXZWJTb2NrZXQgY29ubmVjdGlvbi5cbiAgICovXG4gIHRlYXJEb3duICgpIHtcbiAgICB0aGlzLl9wZW5kaW5nUG9zdFJlcXVlc3RzLmxlbmd0aCA9IDBcbiAgICBpZiAodHlwZW9mIHRoaXMuX3dlYnNvY2tldCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMuX2lzVGVybWluYXRlZCkge1xuICAgICAgZGVidWcodGhpcy5fbmFtZSwgJ1t0ZWFyZG93bl0gPj4nKVxuICAgICAgZGVidWcodGhpcy5fbmFtZSwgYFtXZWJTb2NrZXQoJHt0aGlzLl93ZWJzb2NrZXQudXJsfSldIGNsb3NlKCkgPj5gKVxuICAgICAgLy8gICAgICB0aGlzLl9yZW1vdmVTb2NrZXRIYW5kbGVycyh0aGlzLl93ZWJzb2NrZXQpXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl93ZWJzb2NrZXQuY2xvc2UoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3YXJuKHRoaXMuX25hbWUsIGBBdHRlbXB0IHRvIGNsb3NlIFdlYlNvY2tldCBmYWlsZWQ6ICR7ZS5tZXNzYWdlfS5gKVxuICAgICAgICB0aGlzLl9yZW1vdmVTb2NrZXRIYW5kbGVycyh0aGlzLl93ZWJzb2NrZXQpXG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAodGhpcy5fd2Vic29ja2V0KSB7XG4gICAgICAgICAgZGVidWcodGhpcy5fbmFtZSwgYDw8IFtXZWJTb2NrZXQoJHt0aGlzLl93ZWJzb2NrZXQudXJsfSldIGNsb3NlKClgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWJ1Zyh0aGlzLl9uYW1lLCAnPDwgW3RlYXJkb3duXScpXG4gICAgfVxuICAgIHRoaXMuX3dlYnNvY2tldCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2lzVGVybWluYXRlZCA9IHRydWVcbiAgICB3aGlsZSh0aGlzLl9yZXNwb25zZUhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuX3Jlc3BvbnNlSGFuZGxlcnMuc2hpZnQoKVxuICAgIH1cbiAgICBlbnZpcm9ubWVudC5yZW1vdmVDbG9zZUhhbmRsZXIodGhpcy5fb25jbG9zZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHBhcnNlIEpTT04gZnJvbSBtZXNzYWdlIHJlY2VpdmVkIG92ZXIgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gbWVzc2FnZVxuICAgKiAgICAgICAgU3RyaW5nIG9yIE9iamVjdC5cbiAgICovXG4gIGdldEpzb25Gcm9tU29ja2V0TWVzc2FnZSAobWVzc2FnZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG1lc3NhZ2UuZGF0YSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKG1lc3NhZ2UuZGF0YSkgOiBtZXNzYWdlLmRhdGFcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4odGhpcy5fbmFtZSwgJ0NvdWxkIG5vdCBwYXJzZSBtZXNzYWdlIGFzIEpTT04uIE1lc3NhZ2U9ICcgKyBtZXNzYWdlLmRhdGEgKyAnLiBFcnJvcj0gJyArIGUubWVzc2FnZSlcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgU2hhcmVkT2JqZWN0IHJlc3BvbnNlIGhhbmRsZXIuIEhhbmRsZXJzIGFyZSByZXF1ZXN0ZWQgdG8gcmVzcG9uZCB0byBhIG1lc3NhZ2UgaW4gYGhhbmRsZU1lc3NhZ2VSZXNwb25zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVyXG4gICAqL1xuICBhZGRTaGFyZWRPYmplY3RSZXNwb25zZUhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgICB0aGlzLl9yZXNwb25zZUhhbmRsZXJzLnB1c2goaGFuZGxlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgU2hhcmVkT2JqZWN0IHJlc3BvbnNlIGhhbmRsZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVyXG4gICAqL1xuICByZW1vdmVTaGFyZWRPYmplY3RSZXNwb25zZUhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgICBsZXQgaSA9IHRoaXMuX3Jlc3BvbnNlSGFuZGxlcnMubGVuZ3RoXG4gICAgbGV0IHJIYW5kbGVyXG4gICAgd2hpbGUoLS1pID4gLTEpIHtcbiAgICAgIHJIYW5kbGVyID0gdGhpcy5fcmVzcG9uc2VIYW5kbGVyc1tpXVxuICAgICAgaWYgKHJIYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlSGFuZGxlcnMuc3BsaWNlKGksIDEpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgbGlzdCBvZiByZXNwb25zZSBoYW5kbGVycyBhbmQgcmV0dXJucyBmbGFnIG9mIGl0IGJlaW5nIGhhbmRsZWQgd2l0aGluIHRoZSBjaGFpbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG1lc3NhZ2VcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGhhbmRsZU1lc3NhZ2VSZXNwb25zZSAobWVzc2FnZSkge1xuICAgIGxldCBpLCBoYW5kbGVyXG4gICAgbGV0IGxlbmd0aCA9IHRoaXMuX3Jlc3BvbnNlSGFuZGxlcnMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBoYW5kbGVyID0gdGhpcy5fcmVzcG9uc2VIYW5kbGVyc1tpXVxuICAgICAgaWYgKGhhbmRsZXIucmVzcG9uZChtZXNzYWdlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHBvc3Qgbm90aWZpY2F0aW9uIG9mIGVuZCBvZiBjYW5kaWRhdGVzIGluIFdlYlJUQyBzY2VuYXJpby5cbiAgICovXG4gIHBvc3RFbmRPZkNhbmRpZGF0ZXMgKHN0cmVhbU5hbWUpIHtcbiAgICB0aGlzLnBvc3Qoe1xuICAgICAgaGFuZGxlQ2FuZGlkYXRlOiBzdHJlYW1OYW1lLFxuICAgICAgZGF0YToge1xuICAgICAgICBjYW5kaWRhdGU6IHtcbiAgICAgICAgICB0eXBlOiAnY2FuZGlkYXRlJyxcbiAgICAgICAgICBjYW5kaWRhdGU6ICcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gcG9zdCBkYXRhIG92ZXIgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gICAqIFF1ZXVlcyBtZXNzYWdlcyBpZiBXZWJTb2NrZXQgY29ubmVjdGlvbiBpcyBzdGlsbCBiZWluZyBlc3RhYmxpc2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlbmRSZXF1ZXN0XG4gICAqL1xuICBwb3N0IChzZW5kUmVxdWVzdCkge1xuICAgIGlmICh0aGlzLl93ZWJzb2NrZXQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl93ZWJzb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSAvKiBXZWJTb2NrZXQuT1BFTiAqLykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVidWcodGhpcy5fbmFtZSwgJ1t3ZWJzb2NrZXQtcG9zdF06ICcgKyBKU09OLnN0cmluZ2lmeShzZW5kUmVxdWVzdCwgbnVsbCwgMikpXG4gICAgICAgIHRoaXMuX3dlYnNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHNlbmRSZXF1ZXN0KSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGRlYnVnKHRoaXMuX25hbWUsIGBDb3VsZCBub3Qgc2VuZCByZXF1ZXN0OiAke3NlbmRSZXF1ZXN0fS4gJHtlfWApXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLl93ZWJzb2NrZXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAodGhpcy5fd2Vic29ja2V0LnJlYWR5U3RhdGUgPT09IDIgfHwgdGhpcy5fd2Vic29ja2V0LnJlYWR5U3RhdGUgPT09IDMpKSAvKiBXZWJTb2NrZXQuKENMT1NJTkcgfCBDTE9TRUQpICovIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLl9pc1Rlcm1pbmF0ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdQb3N0UmVxdWVzdHMucHVzaChzZW5kUmVxdWVzdClcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcG9zdEFzeW5jIChzZW5kUmVxdWVzdCkge1xuICAgIGNvbnN0IHAgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICBjb25zdCBpZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTAwMDApLnRvU3RyaW5nKDE2KVxuICAgIHNlbmRSZXF1ZXN0LmlkID0gaWRcbiAgICBzZW5kUmVxdWVzdC5hc3luYyA9IHRydWVcbiAgICB0aGlzLl9hc3luY1RpY2tldHMucHVzaCh7aWQ6IGlkLCBwcm9taXNlOiBwfSlcbiAgICB0aGlzLnBvc3Qoc2VuZFJlcXVlc3QpXG4gICAgcmV0dXJuIHAucHJvbWlzZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc3BvbmRzIHRvIG1lc3NhZ2VzIGNvbWluZyBvdmVyIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG1lc3NhZ2VcbiAgICovXG4gIHJlc3BvbmQgKG1lc3NhZ2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGxldCBoYW5kbGVkID0gdGhpcy5oYW5kbGVNZXNzYWdlUmVzcG9uc2UobWVzc2FnZSlcbiAgICBpZiAoIWhhbmRsZWQgJiYgbWVzc2FnZS5kYXRhKSB7XG4gICAgICBsZXQganNvbiA9IHRoaXMuZ2V0SnNvbkZyb21Tb2NrZXRNZXNzYWdlKG1lc3NhZ2UpXG4gICAgICBpZiAoanNvbiA9PT0gbnVsbCkge1xuICAgICAgICB3YXJuKHRoaXMuX25hbWUsICdEZXRlcm1pbmVkIHdlYnNvY2tldCByZXNwb25zZSBub3QgaW4gY29ycmVjdCBmb3JtYXQuIEFib3J0aW5nIG1lc3NhZ2UgaGFuZGxlLicpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgZGVidWcodGhpcy5fbmFtZSwgJ1t3ZWJzb2NrZXQtcmVzcG9uc2VdOiAnICsgSlNPTi5zdHJpbmdpZnkoanNvbiwgbnVsbCwgMikpXG4gICAgICBpZiAoanNvbi5pc0F2YWlsYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5pc0F2YWlsYWJsZSA9PT0gJ2Jvb2xlYW4nICYmIGpzb24uaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25TdHJlYW1BdmFpbGFibGUoanNvbilcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblN0cmVhbVVuYXZhaWxhYmxlKGpzb24pXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChqc29uLmFzeW5jICYmIGpzb24uaWQpIHtcbiAgICAgICAgY29uc3QgdGlja2V0ID0gdGhpcy5fYXN5bmNUaWNrZXRzLmZpbmQoZWwgPT4gZWwuaWQgPT09IGpzb24uaWQpXG4gICAgICAgIGNvbnN0IHsgcHJvbWlzZSB9ID0gdGlja2V0XG4gICAgICAgIGlmIChwcm9taXNlICYmIGpzb24uZGF0YSkge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShqc29uLmRhdGEpXG4gICAgICAgIH0gZWxzZSBpZiAocHJvbWlzZSAmJiBqc29uLmVycm9yKSB7XG4gICAgICAgICAgcHJvbWlzZS5yZWplY3QoanNvbi5lcnJvcilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChqc29uLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGpzb25cbiAgICAgICAgaWYgKGRhdGEubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uU29ja2V0TWVzc2FnZUVycm9yKGRhdGEubWVzc2FnZSwgZGF0YS5kZXRhaWwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdzdGF0dXMnKSB7XG4gICAgICAgICAgaWYgKGRhdGEuY29kZSA9PT0gJ05ldENvbm5lY3Rpb24uQ29ubmVjdC5TdWNjZXNzJykge1xuICAgICAgICAgICAgdGhpcy5fd2Vic29ja2V0Lm9uZXJyb3IgPSB0aGlzLl9vblVuZXhwZWN0ZWRTb2NrZXRFcnJvci5iaW5kKHRoaXMpXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChkYXRhLmNvZGUgPT09ICdOZXRDb25uZWN0aW9uLkNvbm5lY3QuUmVqZWN0ZWQnKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uUHJvbWlzZS5yZWplY3QoJ05ldENvbm5lY3Rpb24uQ29ubmVjdC5SZWplY3RlZCcpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICBpZiAoZGF0YS5jb2RlID09PSAnTmV0Q29ubmVjdGlvbi5Db25uZWN0LlJlamVjdGVkJykge1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvblByb21pc2UucmVqZWN0KCdOZXRDb25uZWN0aW9uLkNvbm5lY3QuUmVqZWN0ZWQnKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY29kZSA9PT0gJ05ldENvbm5lY3Rpb24uQ29ubmVjdC5GYWlsZWQnKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uUHJvbWlzZS5yZWplY3QoJ05ldENvbm5lY3Rpb24uQ29ubmVjdC5GYWlsZWQnKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGdldCBTaGFyZWRPYmplY3QgZnJvbSBzZXJ2ZXIgb3ZlciBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqL1xuICBnZXRSZW1vdGVTaGFyZWRPYmplY3QgKG5hbWUpIHtcbiAgICB0aGlzLnBvc3Qoe1xuICAgICAgc2hhcmVkT2JqZWN0R2V0UmVtb3RlOiB7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY29ubmVjdCB0byBTaGFyZWRPYmplY3QgZnJvbSBzZXJ2ZXIgb3ZlciBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqL1xuICBjb25uZWN0VG9TaGFyZWRPYmplY3QgKG5hbWUpIHtcbiAgICB0aGlzLnBvc3Qoe1xuICAgICAgc2hhcmVkT2JqZWN0Q29ubmVjdDoge1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNlbmQgbWV0aG9kIGNhbGwgdG8gU2hhcmVkT2JqZWN0IG92ZXIgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2FsbE5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIHNlbmRUb1NoYXJlZE9iamVjdCAobmFtZSwgY2FsbE5hbWUsIGRhdGEpIHtcbiAgICB0aGlzLnBvc3Qoe1xuICAgICAgc2hhcmVkT2JqZWN0U2VuZDoge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBjYWxsOiBjYWxsTmFtZSxcbiAgICAgICAgcGFyYW1zOiBbZGF0YV1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gdXBkYXRlIHByb3BlcnR5IG9uIFNoYXJlZE9iamVjdCBvdmVyIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNlbmRQcm9wZXJ0eVRvU2hhcmVkT2JqZWN0IChuYW1lLCBrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5wb3N0KHtcbiAgICAgIHNoYXJlZE9iamVjdFNldFByb3BlcnR5OiB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY2xvc2UgdGhlIFNoYXJlZE9iamVjdCBjb25uZWN0aW9uIG92ZXIgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKi9cbiAgY2xvc2VTaGFyZWRPYmplY3QgKG5hbWUpIHtcbiAgICB0aGlzLnBvc3Qoe1xuICAgICAgc2hhcmVkT2JqZWN0Q2xvc2U6IHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBmbGFnIG9mIHNvY2tldCBiZWluZyBjbG9zZWQgYW5kIHRlbXJpbmF0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVGVybWluYXRlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVGVybWluYXRlZFxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU29ja2V0SGVscGVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvaGVscGVyL3NvY2tldC1oZWxwZXIuanMiLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBSZWNlbnQgY2hhbmdlcyBoYXZlIG1vdmVkIHRoZSBXZWJTb2NrZXQgcG9ydCBvZiB0aGUgc2VydmVyIHRvIDUwODAgb3IgNDQzLlxuICogT3VyIHByZXZpb3VzIHJlY29tbWVuZGF0aW9uIHdhcyB0byB1c2UgODA4MSBvciA4MDgzLlxuICpcbiAqIFRoaXMgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYW5kIHNob3VsZCBiZSB1cGdyYWRlZCB0byBERVBSRUNBVElPTi5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBnZXRCYWNrZ3JvdW5kQ29tcGF0V2ViU29ja2V0UG9ydCA9IChwb3J0KSA9PiB7XG4gIHN3aXRjaCAocG9ydCkge1xuICAgIGNhc2UgODA4MzpcbiAgICBjYXNlICc4MDgzJzpcbiAgICAgIGNvbnNvbGUud2FybignVGhlIGRlZmF1bHQgV2ViU29ja2V0IHBvcnQgb24gdGhlIHNlcnZlciBoYXMgY2hhbmdlZCBmcm9tIDgwODMgdG8gNDQzIGZvciBzZWN1cmUgY29ubmVjdGlvbnMuJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgcmV0dXJuIDQ0M1xuICAgIGNhc2UgODA4MTpcbiAgICBjYXNlICc4MDgxJzpcbiAgICAgIGNvbnNvbGUud2FybignVGhlIGRlZmF1bHQgV2ViU29ja2V0IHBvcnQgb24gdGhlIHNlcnZlciBoYXMgY2hhbmdlZCBmcm9tIDgwODEgdG8gNTA4MCBvciA4MCBmb3Igc2VjdXJlIGNvbm5lY3Rpb25zLicpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIHJldHVybiA1MDgwXG4gIH1cbiAgcmV0dXJuIHBvcnRcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIHZhbHVlIG9mIGVhY2gga2V5IGFuZCByZXR1cm4gYSBuZXcgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZU9iamVjdFxuICogICAgICAgIFRoZSBvYmplY3Qgd2hvc2UgdmFsdWVzIHNob3VsZCBiZSBlbmNvZGVkLlxuICogQHJldHVybiB7T2JqZWN0fVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVLZXlWYWx1ZXMgPSAodmFsdWVPYmplY3QpID0+IHtcbiAgbGV0IGVuY29kZWQgPSB7fVxuICBPYmplY3Qua2V5cyh2YWx1ZU9iamVjdCkuZm9yRWFjaCgoa2V5LCBpbmRleCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZW5jb2RlZFtrZXldID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlT2JqZWN0W2tleV0pXG4gIH0pXG4gIHJldHVybiBlbmNvZGVkXG59XG5cbi8qKlxuICogQ29uc3RydWN0IGVuZHBvaW50IHRvIHVzZSBmb3IgV2ViU29ja2V0IGNvbm5lY3Rpb24gYmFzZWQgb24gY29uZmlndXJhdGlvbiBvYmplY3QgYW5kIG9wdGlvbmFsIHBhcmFtcyB0byBhcHBlbmQgdG8gcXVlcnkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqICAgICAgICBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHByb3ZpZGVkIGluIGBpbml0KClgIG9mIFdlYlJUQyBiYXNlZCBwdWJsaXNoZXIgb3Igc3Vic2NyaWJlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqICAgICAgICBUaGUgb3B0aW9uYWwgcGFyYW1zIHRvIGFwcGVuZCB0byB0aGUgZW5kcG9pbnQuIFVzZWQgYnkgc2VydmVyIGluIGNvbm5lY3Rpb24gcGFyc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgcnRjU29ja2V0RW5kcG9pbnRGcm9tT3B0aW9ucyA9IChvcHRpb25zLCBwYXJhbXMgPSB1bmRlZmluZWQpID0+IHtcbiAgY29uc3QgcHJvdG9jb2wgPSBvcHRpb25zLndzcHJvdG9jb2wgfHwgb3B0aW9ucy5wcm90b2NvbFxuICBjb25zdCBwb3J0ID0gZ2V0QmFja2dyb3VuZENvbXBhdFdlYlNvY2tldFBvcnQob3B0aW9ucy53c3BvcnQgfHwgb3B0aW9ucy5wb3J0KVxuICBjb25zdCBhcHBFbmRwb2ludCA9IG9wdGlvbnMuY29udGV4dCA/IFtvcHRpb25zLmFwcCwgb3B0aW9ucy5jb250ZXh0XS5qb2luKCcvJykgOiBvcHRpb25zLmFwcFxuICBsZXQgZW5kcG9pbnQgPSBgJHtwcm90b2NvbH06Ly8ke29wdGlvbnMuaG9zdH06JHtwb3J0fS8ke2FwcEVuZHBvaW50fS9gXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5jb25uZWN0aW9uUGFyYW1zICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IGVuY29kZWRQYXJhbXMgPSBlbmNvZGVLZXlWYWx1ZXMob3B0aW9ucy5jb25uZWN0aW9uUGFyYW1zKVxuICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24ocGFyYW1zLCBlbmNvZGVkUGFyYW1zKVxuICB9XG4gIGlmICh0eXBlb2YgcGFyYW1zICE9PSAndW5kZWZpbmVkJykge1xuICAgIGxldCBrdiA9IFtdXG4gICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKChrZXksIGluZGV4KSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGt2LnB1c2goW2tleSwgcGFyYW1zW2tleV1dLmpvaW4oJz0nKSlcbiAgICB9KVxuICAgIGlmIChrdi5sZW5ndGggPiAwKSB7XG4gICAgICBlbmRwb2ludCArPSAnPycgKyAoa3Yuam9pbignJicpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbmRwb2ludFxufVxuXG4vKipcbiAqIENvbnN0cnVjdCBlbmRwb2ludCB0byB1c2UgZm9yIFdlYlNvY2tldCBjb25uZWN0aW9uIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZCBvcHRpb25hbCBwYXJhbXMgdG8gYXBwZW5kIHRvIHF1ZXJ5LlxuICogVGhpcyBhbGxvd3MgZm9yIHN1Y2ggdGhpbmdzIGFzIGF1dGhlbnRpY2F0aW9uIHByaW9yIHRvIHJlcXVlc3Qgb2YgcGxheWJhY2sgb2YgSExTIGZpbGUuXG4gKiBSZXF1aXJlcyBhIGBzb2NrZXRQYXJhbXNgIGF0dHJpYnV0ZSBpbiB0aGUgaW5pdCBjb25maWd1cmF0aW9uIHRoYXQgZGVzY3JpYmUgdGhlIFdlYlNvY2tldCBlbmRwb2ludCB0byBtYWtlIHRoZSByZXF1ZXN0IG9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBwcm92aWRlZCBpbiBgaW5pdCgpYCBvZiBITFMgYmFzZWQgc3Vic2NyaWJlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqICAgICAgICBUaGUgb3B0aW9uYWwgcGFyYW1zIHRvIGFwcGVuZCB0byB0aGUgZW5kcG9pbnQuIFVzZWQgYnkgc2VydmVyIGluIGNvbm5lY3Rpb24gcGFyc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqICB2YXIgc3Vic2NyaWJlciA9IG5ldyBITFN1YnNjcmliZXIoKVxuICogIHN1YnNjcmliZXIuaW5pdCh7XG4gKiAgICBwcm90b2NvbDogJ2h0dHBzJyxcbiAqICAgIGhvc3Q6ICdteWNvbXBhbnkub3JnJyxcbiAqICAgIGFwcDogJ2xpdmUnLFxuICogICAgc3RyZWFtTmFtZTogJ215c3RyZWFtJyxcbiAqICAgIHNvY2tldFBhcmFtczoge1xuICogICAgICBwcm90b2NvbDogJ3dzcycsXG4gKiAgICAgIGhvc3Q6ICdteWNvbXBhbnkub3JnJyxcbiAqICAgICAgYXBwOiAnbGl2ZSdcbiAqICAgIH0sXG4gKiAgICBjb25uZWN0aW9uUGFyYW1zOiB7XG4gKiAgICAgIHVzZXI6ICdmb28nLFxuICogICAgICBwYXNzd29yZDogJ2JhcidcbiAqICAgIH1cbiAqICB9KVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGhsc1NvY2tldEVuZHBvaW50RnJvbU9wdGlvbnMgPSAob3B0aW9ucywgcGFyYW1zID0gdW5kZWZpbmVkKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzb2NrZXRQYXJhbXMsXG4gICAgY29ubmVjdGlvblBhcmFtc1xuICB9ID0gb3B0aW9uc1xuICBjb25zdCBwcm90b2NvbCA9IHNvY2tldFBhcmFtcy5wcm90b2NvbFxuICBjb25zdCBwb3J0ID0gZ2V0QmFja2dyb3VuZENvbXBhdFdlYlNvY2tldFBvcnQoc29ja2V0UGFyYW1zLnBvcnQgfHwgKHByb3RvY29sID09PSAnd3NzJyA/IDQ0MzogNTA4MCkpXG4gIGxldCBlbmRwb2ludCA9IGAke3Byb3RvY29sfTovLyR7c29ja2V0UGFyYW1zLmhvc3R9OiR7cG9ydH0vJHtzb2NrZXRQYXJhbXMuYXBwfS9gXG4gIGlmIChjb25uZWN0aW9uUGFyYW1zKSB7XG4gICAgY29uc3QgZW5jb2RlZFBhcmFtcyA9IGVuY29kZUtleVZhbHVlcyhvcHRpb25zLmNvbm5lY3Rpb25QYXJhbXMpXG4gICAgcGFyYW1zID0gT2JqZWN0LmFzc2lnbihwYXJhbXMsIGVuY29kZWRQYXJhbXMpXG4gIH1cbiAgaWYgKHBhcmFtcykge1xuICAgIGxldCBrdiA9IFtdXG4gICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKChrZXksIGluZGV4KSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGt2LnB1c2goW2tleSwgcGFyYW1zW2tleV1dLmpvaW4oJz0nKSlcbiAgICB9KVxuICAgIGlmIChrdi5sZW5ndGggPiAwKSB7XG4gICAgICBlbmRwb2ludCArPSAnPycgKyAoa3Yuam9pbignJicpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbmRwb2ludFxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3V0aWwvdXJsLWVuZHBvaW50LmpzIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBlbnZpcm9ubWVudCBmcm9tICcuLi9lbnYvYnJvd3NlcidcbmltcG9ydCB7IGRlYnVnLCBlcnJvciB9IGZyb20gJy4uL2xvZydcblxuY29uc3QgTkFNRSA9ICdSNVByb1B1Ymxpc2hWaWV3J1xuY29uc3QgcHVibGlzaGVySWQgPSAncmVkNXByby1wdWJsaXNoZXInXG5cbi8qKlxuICogQnJpZGdlIGJldHdlZW4gRE9NIEVsZW1lbnQgdmlldyBhbmQgUHVibGlzaGVyIGltcGxlbWVudGF0aW9uLlxuICogU3RpbGwgdXNlZCwgYnV0IGludGVybmFsaXplZCBhcyBvZiA0LjAuMC4gVXAgZm9yIGRlcHJlY2F0aW9uLCB1cCBmb3IgZGlzY3Vzc2lvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBQdWJsaXNoVmlldyB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBlbGVtZW50SWRcbiAgICogICAgICAgIFRoZSBlbGVtZW50IGBpZGAgdG8gdXNlIGZvciBwbGF5YmFjayBkaXNwbGF5LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGVsZW1lbnRJZCA9IHB1Ymxpc2hlcklkKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX3RhcmdldEVsZW1lbnQgPSBlbnZpcm9ubWVudC5yZXNvbHZlRWxlbWVudChlbGVtZW50SWQpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IoTkFNRSwgYENvdWxkIG5vdCBpbnN0YW50aWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBSZWQ1UHJvUHVibGlzaGVyLiBSZWFzb246ICR7ZS5tZXNzYWdlfWApXG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9XG5cbiAgYXR0YWNoUHVibGlzaGVyIChwdWJsaXNoZXIpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2F0dGFjaHB1Ymxpc2hlcl0nKVxuICAgIHB1Ymxpc2hlci5zZXRWaWV3KHRoaXMsIGVudmlyb25tZW50LmdldEVsZW1lbnRJZCh0aGlzLl90YXJnZXRFbGVtZW50KSlcbiAgfVxuXG4gIHByZXZpZXcgKG1lZGlhU3RyZWFtKSB7XG4gICAgbGV0IGF1dG9wbGF5ID0gdGhpcy5pc0F1dG9wbGF5XG4gICAgZGVidWcoTkFNRSwgYFtwcmV2aWV3XTogYXV0b3BsYXkoJHthdXRvcGxheX0pYClcbiAgICBlbnZpcm9ubWVudC5zZXRWaWRlb1NvdXJjZSh0aGlzLl90YXJnZXRFbGVtZW50LCBtZWRpYVN0cmVhbSwgYXV0b3BsYXkpXG4gIH1cblxuICBnZXQgaXNBdXRvcGxheSAoKSB7XG4gICAgcmV0dXJuIGVudmlyb25tZW50Lmhhc0F0dHJpYnV0ZURlZmluZWQodGhpcy5fdGFyZ2V0RWxlbWVudCwgJ2F1dG9wbGF5JylcbiAgfVxuXG4gIGdldCB2aWV3ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0RWxlbWVudFxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHVibGlzaFZpZXdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy92aWV3L3B1Ymxpc2guanMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgYXNjICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXtcbiAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcbiAgICAsIElTX0ZJTFRFUiAgICAgPSBUWVBFID09IDJcbiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDNcbiAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcbiAgICAsIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDZcbiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWFxuICAgICwgY3JlYXRlICAgICAgICA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpe1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcylcbiAgICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICAgLCBmICAgICAgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDBcbiAgICAgICwgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgbWV0YSAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJylcbiAgLCBmYWlscyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lQWxsICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBmb3JPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgYW5JbnN0YW5jZSAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGVhY2ggICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKXtcbiAgdmFyIEJhc2UgID0gZ2xvYmFsW05BTUVdXG4gICAgLCBDICAgICA9IEJhc2VcbiAgICAsIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJ1xuICAgICwgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlXG4gICAgLCBPICAgICA9IHt9O1xuICBpZighREVTQ1JJUFRPUlMgfHwgdHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRhcmdldCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUsICdfYycpO1xuICAgICAgdGFyZ2V0Ll9jID0gbmV3IEJhc2U7XG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGFyZ2V0W0FEREVSXSwgdGFyZ2V0KTtcbiAgICB9KTtcbiAgICBlYWNoKCdhZGQsY2xlYXIsZGVsZXRlLGZvckVhY2gsZ2V0LGhhcyxzZXQsa2V5cyx2YWx1ZXMsZW50cmllcyx0b0pTT04nLnNwbGl0KCcsJyksZnVuY3Rpb24oS0VZKXtcbiAgICAgIHZhciBJU19BRERFUiA9IEtFWSA9PSAnYWRkJyB8fCBLRVkgPT0gJ3NldCc7XG4gICAgICBpZihLRVkgaW4gcHJvdG8gJiYgIShJU19XRUFLICYmIEtFWSA9PSAnY2xlYXInKSloaWRlKEMucHJvdG90eXBlLCBLRVksIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsIEtFWSk7XG4gICAgICAgIGlmKCFJU19BRERFUiAmJiBJU19XRUFLICYmICFpc09iamVjdChhKSlyZXR1cm4gS0VZID09ICdnZXQnID8gdW5kZWZpbmVkIDogZmFsc2U7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jW0tFWV0oYSA9PT0gMCA/IDAgOiBhLCBiKTtcbiAgICAgICAgcmV0dXJuIElTX0FEREVSID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKCdzaXplJyBpbiBwcm90bylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9jLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYsIE8pO1xuXG4gIGlmKCFJU19XRUFLKWNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpXG4gICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qc1xuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qc1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpXG4gICwgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4vLyBtb2R1bGUgaWQgPSA3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4vYnJvd3NlcidcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcblxuLyoqXG4gKiBSZXBsYWNlcyBhIGB2aWRlb2AgZWxlbWVudCB3aXRoIGEgY29udGFpbmVyIGZvciBlbWJlZGRpbmcgYSBGbGFzaCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXRFbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldFBhcmVudFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZpbmVFbWJlZEVsZW1lbnQgPSAodGFyZ2V0RWxlbWVudCwgdGFyZ2V0UGFyZW50KSA9PiB7XG4gIGxldCBkZmQgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgY29uc3QgZWxlbWVudElkID0gdGFyZ2V0RWxlbWVudC5pZFxuICBpZiAodGFyZ2V0RWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8nKSB7XG4gICAgbGV0IGRpdiA9IGVudmlyb25tZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgZGl2LmlkID0gZWxlbWVudElkICsgJ19ydG1wJ1xuICAgIHRhcmdldFBhcmVudC5hcHBlbmRDaGlsZChkaXYpXG4gICAgaWYgKHRhcmdldEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgdGFyZ2V0RWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldEVsZW1lbnQpXG4gICAgfVxuICAgIGRmZC5yZXNvbHZlKGRpdi5pZClcbiAgfSBlbHNlIHtcbiAgICBkZmQucmVzb2x2ZShlbGVtZW50SWQpXG4gIH1cbiAgcmV0dXJuIGRmZC5wcm9taXNlXG59XG5cbi8qKlxuICogUmVxdWVzdCB0byBlbWJlZCBhIEZsYXNoIG9iamVjdCB1c2luZyBTV0ZPYmplY3QgbGlicmFyeS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaWROYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogICAgICAgIEluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gbWFwLlxuICogQHBhcmFtIHtPYmplY3R9IGZsYXNodmFyc1xuICogICAgICAgIFRoZSBGbGFzaFZhcnMgdG8gcGFzcyBpbnRvIHRoZSBlbWJlZGRlZCBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc3dmb2JqZWN0XG4gKiAgICAgICAgVGhlIGxvYWRlZCBTV0ZPYmplY3QgbGlicmFyeSB1dGlsLlxuICogQHBhcmFtIHtTdHJpbmd9IGVsZW1lbnRJZFxuICogICAgICAgIFRoZSBpZCBvZiB0aGUgRWxlbWVudCB0byBlbWJlZC5cbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGVtYmVkU3dmT2JqZWN0ID0gKGlkTmFtZSwgb3B0aW9ucywgZmxhc2h2YXJzLCBzd2ZvYmplY3QsIGVsZW1lbnRJZCkgPT4ge1xuICBsZXQgZGZkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gIGxldCBwYXJhbXMgPSB7XG4gICAgcXVhbGl0eTogJ2hpZ2gnLFxuICAgIHdtb2RlOiAnb3BhcXVlJyxcbiAgICBiZ2NvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvciB8fCAnIzAwMCcsXG4gICAgYWxsb3dzY3JpcHRhY2Nlc3M6ICdhbHdheXMnLFxuICAgIGFsbG93ZnVsbHNjcmVlbjogJ3RydWUnLFxuICAgIGFsbG93bmV0d29ya2luZzogJ2FsbCdcbiAgfVxuICBsZXQgYXR0cmlidXRlcyA9IHtcbiAgICBpZDogaWROYW1lLFxuICAgIG5hbWU6IGlkTmFtZSxcbiAgICBhbGlnbjogJ21pZGRsZSdcbiAgfVxuICBpZiAoc3dmb2JqZWN0Lmhhc0ZsYXNoUGxheWVyVmVyc2lvbihvcHRpb25zLm1pbkZsYXNoVmVyc2lvbikpIHtcbiAgICBzd2ZvYmplY3QuZW1iZWRTV0YoXG4gICAgICBvcHRpb25zLnN3ZixcbiAgICAgIGVsZW1lbnRJZCxcbiAgICAgIG9wdGlvbnMuZW1iZWRXaWR0aCB8fCA2NDAsXG4gICAgICBvcHRpb25zLmVtYmVkSGVpZ2h0IHx8IDQ4MCxcbiAgICAgIG9wdGlvbnMubWluRmxhc2hWZXJzaW9uLFxuICAgICAgb3B0aW9ucy5wcm9kdWN0SW5zdGFsbFVSTCxcbiAgICAgIGZsYXNodmFycyxcbiAgICAgIHBhcmFtcyxcbiAgICAgIGF0dHJpYnV0ZXMsXG4gICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgIGRmZC5yZXNvbHZlKClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZmQucmVqZWN0KCdGbGFzaCBPYmplY3QgZW1iZWQgZmFpbGVkLicpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgZGZkLnJlamVjdCgnRmxhc2ggUGxheWVyIFZlcnNpb24gaXMgbm90IHN1cHBvcnRlZC4nKVxuICB9XG4gIHJldHVybiBkZmQucHJvbWlzZVxufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvZW52L2VtYmVkLmpzIiwiaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4vYnJvd3NlcidcbmNvbnN0IHsgcmVxdWVzdEZyYW1lIH0gPSBlbnZpcm9ubWVudFxuXG4vKiB8fCBUcmFuc2xhdGlvbiBTdHlsZXMgdXNlZCBvbiBPcmllbnRhdGlvbi1jaGFuZ2UgbWV0YWRhdGEgZnJvbSBNb2JpbGUgYnJvYWRjYXN0ZXJzLiB8fCAqL1xuY29uc3Qgb3JpZ2luID0gW1xuICAnd2Via2l0VHJhbnNmb3JtT3JpZ2luJyxcbiAgJ21velRyYW5zZm9ybU9yaWdpbicsXG4gICdtc1RyYW5zZm9ybU9yaWdpbicsXG4gICdvVHJhbnNmb3JtT3JpZ2luJyxcbiAgJ3RyYW5zZm9ybU9yaWdpbidcbl1cbmNvbnN0IHN0eWxlcyA9IFtcbiAgJ3dlYmtpdFRyYW5zZm9ybScsXG4gICdtb3pUcmFuc2Zvcm0nLFxuICAnbXNUcmFuc2Zvcm0nLFxuICAnb1RyYW5zZm9ybScsXG4gICd0cmFuc2Zvcm0nXG5dXG5jb25zdCB0cmFuc2l0aW9uID0gW1xuICAnd2Via2l0VHJhbnNpdGlvbicsXG4gICdtb3pUcmFuc2l0aW9uJyxcbiAgJ21zVHJhbnNpdGlvbicsXG4gICdvVHJhbnNpdGlvbicsXG4gICd0cmFuc2l0aW9uJ1xuXVxuY29uc3Qgcm90YXRpb25UcmFuc2xhdGlvbnMgPSB7XG4gICcwJzoge1xuICAgIG9yaWdpbjogJ2NlbnRlciBjZW50ZXInLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgwZGVnKSdcbiAgfSxcbiAgJzkwJzoge1xuICAgIG9yaWdpbjogJ2xlZnQgdG9wJyxcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoOTBkZWcpIHRyYW5zbGF0ZVkoLTEwMCUpJ1xuICB9LFxuICAnMTgwJzoge1xuICAgIG9yaWdpbjogJ2NlbnRlciBjZW50ZXInLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICB9LFxuICAnMjcwJzoge1xuICAgIG9yaWdpbjogJ3RvcCBsZWZ0JyxcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMjcwZGVnKSB0cmFuc2xhdGVYKC0xMDAlKSB0cmFuc2xhdGVZKDAlKSdcbiAgfSxcbiAgJy05MCc6IHtcbiAgICBvcmlnaW46ICdsZWZ0IHRvcCcsXG4gICAgdHJhbnNmb3JtOiAncm90YXRlKC05MGRlZykgdHJhbnNsYXRlWCgtMTAwJSknXG4gIH0sXG4gICctMTgwJzoge1xuICAgIG9yaWdpbjogJ2NlbnRlciBjZW50ZXInLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtMTgwZGVnKSdcbiAgfSxcbiAgJy0yNzAnOiB7XG4gICAgb3JpZ2luOiAndG9wIGxlZnQnLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtMjcwZGVnKSB0cmFuc2xhdGVZKC0xMDAlKSdcbiAgfVxufVxuXG4vKiBVdGlsaXR5IG1ldGhvZCB0byB0cmFjayBhbmQgcmVzaXplIGFuIGVsZW1lbnQgb24gZW50ZXIgZnJhbWUuICovXG5jb25zdCB0cmFja1Jlc2l6ZSA9IChlbGVtZW50LCByYWYsIGlzUm90YXRlZCA9IGZhbHNlKSA9PiB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgY29uc3QgcHdpZHRoID0gcGFyZW50LmNsaWVudFdpZHRoXG4gICAgICBjb25zdCBwaGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodFxuICAgICAgaWYgKGlzUm90YXRlZCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gcGhlaWdodCArICdweCdcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gcHdpZHRoICsgJ3B4J1xuICAgICAgfVxuICAgICAgY29uc3QgZXdpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aFxuICAgICAgY29uc3QgZWhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICBjb25zdCBtYXJnaW4gPSAoaXNSb3RhdGVkID8gKHB3aWR0aCAtIGVoZWlnaHQpIDogKHB3aWR0aCAtIGV3aWR0aCkpICogMC41XG4gICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJ1xuICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gbWFyZ2luICsgJ3B4J1xuICAgIH1cbiAgICBpZiAocmFmKSB7XG4gICAgICByYWYodHJhY2tSZXNpemUoZWxlbWVudCwgcmFmLCBpc1JvdGF0ZWQpKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXBwbHlPcmllbnRhdGlvbiA9IChlbGVtZW50LCB2YWx1ZSwgcmVzb2x1dGlvbikgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIGxldCBpLCBsZW5ndGggPSBzdHlsZXMubGVuZ3RoXG4gIHZhbHVlID0gdmFsdWUgJSAzNjBcbiAgY29uc3QgaXNSb3RhdGVkID0gdmFsdWUgJSAxODAgIT09IDBcbiAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlXG4gIGNvbnN0IHB3aWR0aCA9IGVsZW1lbnQud2lkdGggPyBlbGVtZW50LndpZHRoIDogcGFyZW50LmNsaWVudFdpZHRoXG4gIGNvbnN0IHBoZWlnaHQgPSBlbGVtZW50LmhlaWdodCA/IGVsZW1lbnQuaGVpZ2h0IDogcGFyZW50LmNsaWVudEhlaWdodFxuICBjb25zdCB0cmFuc2xhdGlvbnMgPSByb3RhdGlvblRyYW5zbGF0aW9uc1t2YWx1ZS50b1N0cmluZygpXVxuICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQuc3R5bGVbb3JpZ2luW2ldXSA9IHRyYW5zbGF0aW9ucy5vcmlnaW5cbiAgICBlbGVtZW50LnN0eWxlW3N0eWxlc1tpXV0gPSB0cmFuc2xhdGlvbnMudHJhbnNmb3JtXG4gICAgZWxlbWVudC5zdHlsZVt0cmFuc2l0aW9uW2ldXSA9ICd0cmFuc2Zvcm0gMC4wcyBsaW5lYXInXG4gIH1cbiAgaWYgKGlzUm90YXRlZCkge1xuICAgIC8vIGNvbnN0IHNjYWxlID0gcHdpZHRoID4gcGhlaWdodCA/IHBoZWlnaHQgLyBwd2lkdGggOiBwd2lkdGggLyBwaGVpZ2h0XG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHBoZWlnaHQgKyAncHgnXG4gICAgcGFyZW50LnN0eWxlLmhlaWdodCA9IHBoZWlnaHQgKyAncHgnXG4gICAgLy8gZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAocHdpZHRoICogc2NhbGUpICsgJ3B4J1xuICB9XG4gIGVsc2Uge1xuICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBwd2lkdGggKyAncHgnXG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBwaGVpZ2h0ICsgJ3B4J1xuICAgIC8vICAgIHBhcmVudC5zdHlsZS53aWR0aCA9IHB3aWR0aCArICdweCdcbiAgfVxuXG4gIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkge1xuICAgIHBhcmVudC5hdHRhY2hFdmVudCgncmVzaXplJywgdHJhY2tSZXNpemUoZWxlbWVudCwgcmVxdWVzdEZyYW1lLCBpc1JvdGF0ZWQpKVxuICB9XG4gIGVsc2Uge1xuICAgIHRyYWNrUmVzaXplKGVsZW1lbnQsIHJlcXVlc3RGcmFtZSwgaXNSb3RhdGVkKSgpXG4gIH1cbn1cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2Vudi90cmFuc2xhdGlvbi11dGlsLmpzIiwiLyoqXG4gKiBDb21tb24gUHVibGlzaGVyLWJhc2VkIGV2ZW50IHR5cGVzLlxuICovXG5leHBvcnQgY29uc3QgUHVibGlzaGVyRXZlbnRUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBDT05ORUNUX1NVQ0NFU1M6ICdDb25uZWN0LlN1Y2Nlc3MnLFxuICBDT05ORUNUX0ZBSUxVUkU6ICdDb25uZWN0LkZhaWx1cmUnLFxuICBQVUJMSVNIX1NUQVJUOiAnUHVibGlzaC5TdGFydCcsXG4gIFBVQkxJU0hfRkFJTDogJ1B1Ymxpc2guRmFpbCcsXG4gIFBVQkxJU0hfSU5WQUxJRF9OQU1FOiAnUHVibGlzaC5JbnZhbGlkTmFtZScsXG4gIFVOUFVCTElTSF9TVUNDRVNTOiAnVW5wdWJsaXNoLlN1Y2Nlc3MnLFxuICBQVUJMSVNIX01FVEFEQVRBOiAnUHVibGlzaC5NZXRhZGF0YScsXG4gIFBVQkxJU0hfU0VORF9JTlZPS0U6ICdQdWJsaXNoLlNlbmQuSW52b2tlJyxcbiAgQ09OTkVDVElPTl9DTE9TRUQ6ICdQdWJsaXNoZXIuQ29ubmVjdGlvbi5DbG9zZWQnLFxuICBESU1FTlNJT05fQ0hBTkdFOiAnUHVibGlzaGVyLlZpZGVvLkRpbWVuc2lvbkNoYW5nZSdcbn0pXG5cbi8qKlxuICogRXZlbnQgdHlwZXMgZGlzcGFjdGhlZCBmcm9tIGFuZCBzcGVjaWZpYyB0byBgUmVkNVByb1B1Ymxpc2hlcmAuXG4gKlxuICogQHNlZSB7UmVkNVByb1B1Ymxpc2hlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZhaWxvdmVyUHVibGlzaGVyRXZlbnRUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBQVUJMSVNIRVJfUkVKRUNUOiAnUHVibGlzaGVyLlJlamVjdCcsXG4gIFBVQkxJU0hFUl9BQ0NFUFQ6ICdQdWJsaXNoZXIuQWNjZXB0J1xufSlcblxuLyoqXG4gKiBFdmVudCB0eXBlcyBkaXNwYXRjaGVkIGZyb20gYW5kIHNwZWNpZmljIHRvIGBSVENQdWJsaXNoZXJgLlxuICpcbiAqIEBzZWUge1JUQ1B1Ymxpc2hlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJUQ1B1Ymxpc2hlckV2ZW50VHlwZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgTUVESUFfU1RSRUFNX0FWQUlMQUJMRTogJ1dlYlJUQy5NZWRpYVN0cmVhbS5BdmFpbGFibGUnLFxuICBQRUVSX0NPTk5FQ1RJT05fQVZBSUxBQkxFOiAnV2ViUlRDLlBlZXJDb25uZWN0aW9uLkF2YWlsYWJsZScsXG4gIE9GRkVSX1NUQVJUOiAnV2ViUlRDLk9mZmVyLlN0YXJ0JyxcbiAgT0ZGRVJfRU5EOiAnV2ViUlRDLk9mZmVyLkVuZCcsXG4gIFBFRVJfQ0FORElEQVRFX0VORDogJ1dlYlJUQy5QZWVyQ29ubmVjdGlvbi5DYW5kaWRhdGVFbmQnLFxuICBJQ0VfVFJJQ0tMRV9DT01QTEVURTogJ1dlYlJUQy5JY2VUcmlja2xlLkNvbXBsZXRlJ1xufSlcblxuLyoqXG4gKiBFdmVudCB0eXBlcyBkaXNwYXRjaGVkIGZyb20gYW5kIHNwZWNpZmljIHRvIGBSVE1QUHVibGlzaGVyYC5cbiAqXG4gKiBAc2VlIHtSVE1QUHVibGlzaGVyfVxuICovXG5leHBvcnQgY29uc3QgUlRNUFB1Ymxpc2hlckV2ZW50VHlwZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgRU1CRURfU1VDQ0VTUzogJ0ZsYXNoUGxheWVyLkVtYmVkLlN1Y2Nlc3MnLFxuICBFTUJFRF9GQUlMVVJFOiAnRmxhc2hQbGF5ZXIuRW1iZWQuRmFpbHVyZSdcbn0pXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9ldmVudC9wdWJsaXNoZXItZXZlbnQuanMiLCIvKipcbiAqIENvbW1vbiBldmVudCB0eXBlcyBvbiBhbGwgU3Vic2NyaWJlcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBTdWJzY3JpYmVyRXZlbnRUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBDT05ORUNUX1NVQ0NFU1M6ICdDb25uZWN0LlN1Y2Nlc3MnLFxuICBDT05ORUNUX0ZBSUxVUkU6ICdDb25uZWN0LkZhaWx1cmUnLFxuICBTVUJTQ1JJQkVfU1RBUlQ6ICdTdWJzY3JpYmUuU3RhcnQnLFxuICBTVUJTQ1JJQkVfU1RPUDogJ1N1YnNjcmliZS5TdG9wJyxcbiAgU1VCU0NSSUJFX0ZBSUw6ICdTdWJzY3JpYmUuRmFpbCcsXG4gIFNVQlNDUklCRV9JTlZBTElEX05BTUU6ICdTdWJzY3JpYmUuSW52YWxpZE5hbWUnLFxuICBTVUJTQ1JJQkVfTUVUQURBVEE6ICdTdWJzY3JpYmUuTWV0YWRhdGEnLFxuICBTVUJTQ1JJQkVfU0VORF9JTlZPS0U6ICdTdWJzY3JpYmUuU2VuZC5JbnZva2UnLFxuICBQTEFZX1VOUFVCTElTSDogJ1N1YnNjcmliZS5QbGF5LlVucHVibGlzaCcsXG4gIENPTk5FQ1RJT05fQ0xPU0VEOiAnU3Vic2NyaWJlLkNvbm5lY3Rpb24uQ2xvc2VkJyxcbiAgT1JJRU5UQVRJT05fQ0hBTkdFOiAnU3Vic2NyaWJlLk9yaWVudGF0aW9uLkNoYW5nZScsXG4gIFZPTFVNRV9DSEFOR0U6ICdTdWJzY3JpYmUuVm9sdW1lLkNoYW5nZScsXG4gIFBMQVlCQUNLX1RJTUVfVVBEQVRFOiAnU3Vic2NyaWJlLlRpbWUuVXBkYXRlJyxcbiAgUExBWUJBQ0tfU1RBVEVfQ0hBTkdFOiAnU3Vic2NyaWJlLlBsYXliYWNrLkNoYW5nZScsXG4gIEZVTExfU0NSRUVOX1NUQVRFX0NIQU5HRTogJ1N1YnNjcmliZS5GdWxsU2NyZWVuLkNoYW5nZScsXG4gIEFVVE9fUExBWUJBQ0tfRkFJTFVSRTogJ1N1YnNjcmliZS5BdXRvcGxheS5GYWlsdXJlJyxcbiAgQVVUT19QTEFZQkFDS19NVVRFRDogJ1N1YnNjcmliZS5BdXRvcGxheS5NdXRlZCdcbn0pXG5cbi8qKlxuICogRXZlbnQgdHlwZXMgZGlzcGF0Y2hlZCBmcm9tIGFuZCBzcGVjaWZpYyB0byBgUmVkNVByb1N1YnNjcmliZXJgLlxuICpcbiAqIEBzZWUge1JlZDVQcm9TdWJzY3JpYmVyfVxuICovXG5leHBvcnQgY29uc3QgRmFpbG92ZXJTdWJzY3JpYmVyRXZlbnRUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBTVUJTQ1JJQkVSX1JFSkVDVDogJ1N1YnNjcmliZXIuUmVqZWN0JyxcbiAgU1VCU0NSSUJFUl9BQ0NFUFQ6ICdTdWJzY3JpYmVyLkFjY2VwdCdcbn0pXG5cbi8qKlxuICogRXZlbnQgdHlwZXMgZGlzcGF0Y2hlZCBmcm9tIGFuZCBzcGVjaWZpYyB0byBgUlRDU3Vic2NyaWJlcmAuXG4gKlxuICogQHNlZSB7UlRDU3Vic2NyaWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJUQ1N1YnNjcmliZXJFdmVudFR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFBFRVJfQ09OTkVDVElPTl9BVkFJTEFCTEU6ICdXZWJSVEMuUGVlckNvbm5lY3Rpb24uQXZhaWxhYmxlJyxcbiAgT0ZGRVJfU1RBUlQ6ICdXZWJSVEMuT2ZmZXIuU3RhcnQnLFxuICBPRkZFUl9FTkQ6ICdXZWJSVEMuT2ZmZXIuRW5kJyxcbiAgQU5TV0VSX1NUQVJUOiAnV2ViUlRDLkFuc3dlci5TdGFydCcsXG4gIEFOU1dFUl9FTkQ6ICdXZWJSVEMuQW5zd2VyLkVuZCcsXG4gIENBTkRJREFURV9TVEFSVDogJ1dlYlJUQy5DYW5kaWRhdGUuU3RhcnQnLFxuICBDQU5ESURBVEVfRU5EOiAnV2ViUlRDLkNhbmRpZGF0ZS5FbmQnLFxuICBQRUVSX0NBTkRJREFURV9FTkQ6ICdXZWJSVEMuUGVlckNvbm5lY3Rpb24uQ2FuZGlkYXRlRW5kJyxcbiAgSUNFX1RSSUNLTEVfQ09NUExFVEU6ICdXZWJSVEMuSWNlVHJpY2tsZS5Db21wbGV0ZScsXG4gIE9OX0FERF9TVFJFQU06ICdXZWJSVEMuQWRkLlN0cmVhbSdcbn0pXG5cbi8qKlxuICogRXZlbnQgdHlwZSBkaXNwYXRjaGVkIGZyb20gYW5kIHNwZWNpZmljIHRvIGBSVE1QU3Vic2NyaWJlcmAuXG4gKlxuICogQHNlZSB7UlRNUFN1YnNjcmliZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSVE1QU3Vic2NyaWJlckV2ZW50VHlwZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgRU1CRURfU1VDQ0VTUzogJ0ZsYXNoUGxheWVyLkVtYmVkLlN1Y2Nlc3MnLFxuICBFTUJFRF9GQUlMVVJFOiAnRmxhc2hQbGF5ZXIuRW1iZWQuRmFpbHVyZScsXG4gIC8vIFN0cmVhbSBNYW5hZ2VyICsgQUJSIFNwZWNpZmljXG4gIEFCUl9MRVZFTF9DSEFOR0U6ICdSVE1QLkFkYXB0aXZlQml0cmF0ZS5MZXZlbCdcbn0pXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9ldmVudC9zdWJzY3JpYmVyLWV2ZW50LmpzIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBlbnZpcm9ubWVudCBmcm9tICcuLi9lbnYvYnJvd3NlcidcbmltcG9ydCB7IGRlYnVnLCB3YXJuIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBOQU1FID0gJ1I1UHJvUlRNUFNoYXJlZE9iamVjdEhhbmRsZXInXG5cbi8qKlxuICogRmxhc2gtYmFzZWQgU2hhcmVkT2JqZWN0IGhhbmRsZXIuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUlRNUFNoYXJlZE9iamVjdEhhbmRsZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fcmVzcG9uc2VIYW5kbGVycyA9IFtdXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHJlc3BvbnNlIGhhbmRsZXIgZm9yIFNoYXJlZE9iamVjdCBldmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVyXG4gICAqL1xuICBhZGRSZXNwb25zZUhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgICB0aGlzLl9yZXNwb25zZUhhbmRsZXJzLnB1c2goaGFuZGxlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgcmVzcG9uc2UgaGFuZGxlciBmcm9tIFNoYXJlZE9iamVjdCBldmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVyXG4gICAqL1xuICByZW1vdmVSZXNwb25zZUhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgICBsZXQgaSA9IHRoaXMuX3Jlc3BvbnNlSGFuZGxlcnMubGVuZ3RoXG4gICAgbGV0IHJIYW5kbGVyXG4gICAgd2hpbGUoLS1pID4gLTEpIHtcbiAgICAgIHJIYW5kbGVyID0gdGhpcy5fcmVzcG9uc2VIYW5kbGVyc1tpXVxuICAgICAgaWYgKHJIYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlSGFuZGxlcnMuc3BsaWNlKGksIDEpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGFuIGV2ZW50IGZyb20gYSBTaGFyZWRPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgKi9cbiAgaGFuZGxlU2hhcmVkT2JqZWN0RXZlbnQgKGV2ZW50KSB7XG4gICAgZGVidWcoTkFNRSwgJ1tzaGFyZWRvYmplY3Q6ZXZlbnRdJylcbiAgICBsZXQgaVxuICAgIGxldCBsZW5ndGggPSB0aGlzLl9yZXNwb25zZUhhbmRsZXJzLmxlbmd0aFxuICAgIGxldCBoYW5kbGVyXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBoYW5kbGVyID0gdGhpcy5fcmVzcG9uc2VIYW5kbGVyc1tpXVxuICAgICAgaWYgKGhhbmRsZXIucmVzcG9uZChKU09OLnBhcnNlKGV2ZW50KSkpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyBhIGdsb2JhbCByZXNwb25zZSBoYW5kbGVyIGZvciBTaGFyZWRPYmplY3QgY29tbXVuaWNhdGlvbiB0aHJvdWdoIEZsYXNoIG9iamVjdCBvdmVyIEV4dGVybmFsSW50ZXJmYWNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqICAgICAgICBUaGUgb2JqZWN0IGVtYmVkIGVsZW1lbnQuXG4gICAqL1xuICBhc3NpZ25TaGFyZWRPYmplY3RSZXNwb25kZXIgKG5hbWUsIGVsKSB7XG4gICAgY29uc3QgX2hhbmRsZVNoYXJlZE9iamVjdEV2ZW50ID0gdGhpcy5oYW5kbGVTaGFyZWRPYmplY3RFdmVudC5iaW5kKHRoaXMpXG4gICAgY29uc3QgZWxJZCA9IGVsLmlkLnNwbGl0KCctJykuam9pbignXycpXG4gICAgY29uc3QgaGFuZGxlck5hbWUgPSBbJ2hhbmRsZVNoYXJlZE9iamVjdEV2ZW50JywgZWxJZF0uam9pbignXycpXG4gICAgZGVidWcoTkFNRSwgYFthc3NpZ246c2hhcmVkb2JqZWN0OnJlc3BvbmRlcl0gOjogJHtlbElkfWApXG4gICAgZGVidWcoTkFNRSwgYFtzaGFyZWRvamVjdDpyZXNwb25kZXJdIDo6ICR7aGFuZGxlck5hbWV9YClcbiAgICBlbC5zZXRTaGFyZWRPYmplY3RSZXNwb25kZXIobmFtZSwgaGFuZGxlck5hbWUpXG4gICAgZW52aXJvbm1lbnQuc2V0R2xvYmFsKGhhbmRsZXJOYW1lLCBfaGFuZGxlU2hhcmVkT2JqZWN0RXZlbnQpXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBjb25uZWN0IHRvIFNoYXJlZE9iamVjdC5cbiAgICovXG4gIGNvbm5lY3QgKHN3ZklkKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGVudmlyb25tZW50LmdldEVtYmVkT2JqZWN0KHN3ZklkKVxuICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgd2FybihgQ291bGQgbm90IGxvY2F0ZSBlbWJlZGRlZCBGbGFzaCBvYmplY3QgZm9yIGlkOiAke3N3ZklkfWApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gZGlzY29ubmVjdCB0byBTaGFyZWRPYmplY3QuXG4gICAqL1xuICBkaXNjb25uZWN0ICgpIHtcbiAgICB3aGlsZSAodGhpcy5fcmVzcG9uc2VIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl9yZXNwb25zZUhhbmRsZXJzLnNoaWZ0KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdCB0byBzZW5kIG1ldGhvZCB1cGRhdGUgdG8gU2hhcmVkT2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2FsbE5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1lc3NhZ2VcbiAgICogICAgICAgIFN0cmluZyBvciBPYmplY3QgdGhhdCB3aWxsIGJlIHNlcmlhbGl6ZWQgdG8gYSBKU09OIHN0cmluZy5cbiAgICovXG4gIHNlbmRUb1NoYXJlZE9iamVjdCAobmFtZSwgY2FsbE5hbWUsIG1lc3NhZ2UpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3NlbmRUb1NoYXJlZE9iamVjdF0nKVxuICAgIHRyeSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnNoYXJlZE9iamVjdFNlbmQobmFtZSwgY2FsbE5hbWUsIHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyA/IG1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSlcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oJ0NvdWxkIG5vdCBzZW5kIHRvIHNoYXJlZCBvYmplY3QgKCcgKyBuYW1lICsgJykuIEVycm9yOiAnICsgZS5tZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIHVwZGF0ZSBwcm9wZXJ0eSBvbiBTaGFyZWRPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gICAqL1xuICBzZW5kUHJvcGVydHlUb1NoYXJlZE9iamVjdCAobmFtZSwga2V5LCB2YWx1ZSkge1xuICAgIGRlYnVnKE5BTUUsICdbc2VuZFByb3BlcnR5VG9TaGFyZWRPYmplY3RdJylcbiAgICB0cnkge1xuICAgICAgdGhpcy5fZWxlbWVudC5zaGFyZWRPYmplY3RTZW5kUHJvcGVydHkobmFtZSwga2V5LCB2YWx1ZSlcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oJ0NvdWxkIG5vdCBzZW5kIHRvIHNoYXJlZCBvYmplY3QgKCcgKyBuYW1lICsgJykuIEVycm9yOiAnICsgZS5tZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGdldCByZW1vdGUgU2hhcmVPYmplY3QgYnkgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNoYXJlZE9iamVjdE5hbWVcbiAgICovXG4gIGdldFJlbW90ZVNoYXJlZE9iamVjdCAoc2hhcmVkT2JqZWN0TmFtZSkge1xuICAgIGRlYnVnKE5BTUUsICdbZ2V0UmVtb3RlU2hhcmVkT2JqZWN0XScpXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuYXNzaWduU2hhcmVkT2JqZWN0UmVzcG9uZGVyKHNoYXJlZE9iamVjdE5hbWUsIHRoaXMuX2VsZW1lbnQpXG4gICAgICB0aGlzLl9lbGVtZW50LmdldFJlbW90ZVNoYXJlZE9iamVjdChzaGFyZWRPYmplY3ROYW1lKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgd2FybignQ291bGQgbm90IGdldCByZW1vdGUgc2hhcmVkIG9iamVjdCAoJyArIG5hbWUgKyAnKS4gRXJyb3I6ICcgKyBlLm1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY29ubmVjdCB0byBTaGFyZWRPYmplY3QgYnkgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNoYXJlZE9iamVjdE5hbWVcbiAgICovXG4gIGNvbm5lY3RUb1NoYXJlZE9iamVjdCAoc2hhcmVkT2JqZWN0TmFtZSkge1xuICAgIGRlYnVnKE5BTUUsICdbY29ubmVjdFRvU2hhcmVkT2JqZWN0XScpXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY29ubmVjdFRvU2hhcmVkT2JqZWN0KHNoYXJlZE9iamVjdE5hbWUpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB3YXJuKCdDb3VsZCBub3QgY29ubmVjdCB0byBzaGFyZWQgb2JqZWN0ICgnICsgbmFtZSArICcpLiBFcnJvcjogJyArIGUubWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBjbG9zZSBTaGFyZWRPYmplY3QgY29ubmVjdGlvbiBieSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2hhcmVkT2JqZWN0TmFtZVxuICAgKi9cbiAgY2xvc2VTaGFyZWRPYmplY3QgKHNoYXJlZE9iamVjdE5hbWUpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2Rpc2Nvbm5lY3RUb1NoYXJlZE9iamVjdF0nKVxuICAgIHRyeSB7XG4gICAgICB0aGlzLl9lbGVtZW50LmRpc2Nvbm5lY3RGcm9tU2hhcmVkT2JqZWN0KHNoYXJlZE9iamVjdE5hbWUpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB3YXJuKCdDb3VsZCBub3QgZGlzY29ubmVjdCB0byBzaGFyZWQgb2JqZWN0ICgnICsgbmFtZSArICcpLiBFcnJvcjogJyArIGUubWVzc2FnZSlcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSVE1QU2hhcmVkT2JqZWN0SGFuZGxlclxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvaGVscGVyL3NoYXJlZG9iamVjdC1oZWxwZXItcnRtcC5qcyIsIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIEVhc3kgZGVjb3JhdG9yIGZvciBzZXR0aW5nIGEgbXV0YWJsZSwgaXRlcmF0YWJsZSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgaW5mbGF0ZSA9IChvYmosIHByb3AsIHZhbHVlKSA9PiB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9KVxufVxuXG4vKipcbiAqIERlZmF1bHQgYGV4YWN0YCBzZXR0aW5nIGZvciBgdmlkZW9gIG9uIGBNZWRpYUNvbnN0cmFpbnRgIGZvciBXZWJSVEMgYnJvYWRjYXN0LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFJUQ01lZGlhVmlkZW9Db25zdHJhaW50IHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgaW5mbGF0ZSh0aGlzLCAnd2lkdGgnLCB7XG4gICAgICBleGFjdDogNjQwXG4gICAgfSlcbiAgICBpbmZsYXRlKHRoaXMsICdoZWlnaHQnLCB7XG4gICAgICBleGFjdDogNDgwXG4gICAgfSlcbiAgfVxuXG59XG5cbi8qKlxuICogRGVmYXVsdCBSVE1QIHZpZGVvIHNldHRpbmdzIGZvciBicmFvZGNhc3QuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUlRNUE1lZGlhVmlkZW9Db25zdHJhaW50IHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgaW5mbGF0ZSh0aGlzLCAnd2lkdGgnLCA2NDApXG4gICAgaW5mbGF0ZSh0aGlzLCAnaGVpZ2h0JywgNDgwKVxuICAgIGluZmxhdGUodGhpcywgJ2ZvcmNlJywgZmFsc2UpXG4gICAgaW5mbGF0ZSh0aGlzLCAnZnJhbWVyYXRlJywgMTUpXG4gICAgaW5mbGF0ZSh0aGlzLCAnYmFuZHdpZHRoJywgNTAwMDApXG4gICAgaW5mbGF0ZSh0aGlzLCAncXVhbGl0eScsIDgwKVxuICAgIGluZmxhdGUodGhpcywgJ3Byb2ZpbGUnLCAnYmFzZWxpbmUnKVxuICAgIGluZmxhdGUodGhpcywgJ2xldmVsJywgMy4xKVxuICB9XG5cbn1cblxuLyoqXG4gKiBEZWZhdWx0IFdlYlJUQyBtZWRpYSBzZXR0aW5ncyBmb3IgYnJvYWRjYXN0LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFJUQ01lZGlhQ29uc3RyYWludCB7XG5cbiAgY29uc3RydWN0b3IgKGF1ZGlvID0gdHJ1ZSwgdmlkZW8gPSB1bmRlZmluZWQpIHtcbiAgICBpbmZsYXRlKHRoaXMsICdhdWRpbycsIGF1ZGlvKVxuICAgIGluZmxhdGUodGhpcywgJ3ZpZGVvJywgdmlkZW8gfHwgbmV3IFJUQ01lZGlhVmlkZW9Db25zdHJhaW50KCkpXG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IFJUTVAgbWVkaWEgc2V0dGluZ3MgZm9yIGJyb2FkY2FzdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBSVE1QTWVkaWFDb25zdHJhaW50IHtcblxuICBjb25zdHJ1Y3RvciAoYXVkaW8gPSB0cnVlLCB2aWRlbyA9IHVuZGVmaW5lZCkge1xuICAgIGluZmxhdGUodGhpcywgJ2F1ZGlvJywgYXVkaW8pXG4gICAgaW5mbGF0ZSh0aGlzLCAndmlkZW8nLCB2aWRlbyB8fCBuZXcgUlRNUE1lZGlhVmlkZW9Db25zdHJhaW50KCkpXG4gIH1cbn1cblxuZXhwb3J0IHsgUlRDTWVkaWFDb25zdHJhaW50LCBSVE1QTWVkaWFDb25zdHJhaW50IH1cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3B1Ymxpc2hlci9jb25zdHJhaW50L2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50J1xuXG4vKipcbiAqIEV2ZW50cyBmb3IgU2xpZGVyIENvbnRyb2wuXG4gKlxuICogQHNlZSB7U2xpZGVyQ29udHJvbH1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBTbGlkZXJFdmVudCBleHRlbmRzIEV2ZW50IHtcblxuICBjb25zdHJ1Y3RvciAodHlwZSwgY29udHJvbCwgZGF0YSkge1xuICAgIHN1cGVyKHR5cGUsIGRhdGEpXG4gICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2xcbiAgfVxuXG4gIGdldCBjb250cm9sICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udHJvbFxuICB9XG5cbn1cblxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBTbGlkZXIgRXZlbnQgdHlwZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgU2xpZGVyRXZlbnRUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBDSEFOR0VfU1RBUlQ6ICdjaGFuZ2VzdGFydCcsXG4gIENIQU5HRTogJ2NoYW5nZScsXG4gIENIQU5HRV9DT01QTEVURTogJ2NoYW5nZWNvbXBsZXRlJ1xufSlcblxuZXhwb3J0IHsgU2xpZGVyRXZlbnQgYXMgU2xpZGVyRXZlbnQgfVxuZXhwb3J0IHsgU2xpZGVyRXZlbnRUeXBlcyBhcyBTbGlkZXJFdmVudFR5cGVzIH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9zdWJzY3JpYmVyL2NvbnRyb2xzL2V2ZW50LmpzIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4vcHJvbWlzZSdcblxuY29uc3QgbWFwID0gbmV3IFdlYWtNYXAoKVxuXG5jb25zdCBwdnQgPSAoY3R4KSA9PiB7XG4gIGlmICghbWFwLmhhcyhjdHgpKSB7XG4gICAgbWFwLnNldChjdHgsIHt9KVxuICB9XG5cbiAgcmV0dXJuIG1hcC5nZXQoY3R4KVxufVxuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIEZhY3RvcnkuXG4gKlxuICogVGhpcyBpcyB1c2VkIGJ5IHRoZSBmYWlsLW92ZXIgZm9yIFB1Ymxpc2hlciBhbmQgU3Vic2NyaWJlciB0byBkZXRlcm1pbmUgYnJvd3NlciBzdXBwb3J0IG9mIG9yZGVyIGxpc3Qgb2YgaW1wbGVtZW50YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbXBsRmFjdG9yeU9yZGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5saXN0b3JkZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICogbGlzdG9yZGVyIChsaXN0KSB7XG4gICAgICAgIHdoaWxlIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB5aWVsZCBsaXN0LnNoaWZ0KClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0oKSlcblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgdG8gY2hlY2sgc3VwcG9ydCBhbmQgaW5pdGlhbGl6ZSBDbGFzcyBpbnN0YW5jZSB3aXRoaW4gdGhlIG9yZGVyLiBPcHRpb25hbGx5LCBjYW4gaW52b2tlIGFuIGluaXRpYWxpemF0aW9uIHdpdGggY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3JcbiAgICAgKiAgICAgICAgSXRlcmF0b3IgdXNlZCBpbiBhY2Nlc3NpbmcgcG9zc2libGUgQ2xhc3MgaW5zdGFuY2UgbmV4dCBpbiBsaW5rZWQgbGlzdCBvZiBvcmRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwXG4gICAgICogICAgICAgIE1hcCBvZiBvcmRlciB0eXBlIHRvIENsYXNzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogICAgICAgIE1hcCBvZiBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9ucyB0byB0eXBlcy5cbiAgICAgKiBAcGFyYW0ge1Byb21pc2V9IHByb21pc2VcbiAgICAgKiAgICAgICAgVGhlIGBQcm9taXNlYCBpbnN0YW5jZSB0byB1c2UgaW4gcmVzb2x2ZSBvciByZWplY3Qgb25jZSBlaXRoZXIgYSB2YWxpZCBpbnN0YW5jZSBpcyBjcmVhdGVkIG9yIG9yZGVyIGhhcyBiZWVuIGV4aGF1c3RlZCwgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRGblxuICAgICAqICAgICAgICBPcHRpb25hbCBmdW5jdGlvbiB0byBpbnZva2UgdXBvbiBpbnN0YW50aWF0aW9uIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxhc3RFcnJvclxuICAgICAqICAgICAgICBPcHRpb25hbCAtIGFuZCBjb21wb3VuZGVkIC0gbGFzdCBzdHJpbmcgZXJyb3IgdGhhdCBjYXVzZWQgYSBmYWlsdXJlIGluIGVzdGFibGlzaGluZyBhIHN1cHBvcnRlZCBpbnN0YW5jZS4gVGhpcyBlcnJvciBpcyBkZWxpdmVyZWQgb24gdGhlIHJlamVjdGlvbiBvZiB0aGUgYFByb21pc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdnQodGhpcykuZmluZCA9IChpdGVyYXRvciwgbWFwLCBvcHRpb25zLCBwcm9taXNlLCBpbml0Rm4gPSBudWxsLCBsYXN0RXJyb3IgPSBudWxsKSA9PiB7XG4gICAgICBjb25zdCBbdHlwZSwgSW1wbF0gPSBwdnQodGhpcykubmV4dChpdGVyYXRvciwgbWFwKVxuICAgICAgaWYgKCFJbXBsKSB7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGxhc3RFcnJvcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwXG4gICAgICAgIGxldCBzcmMgPSBvcHRpb25zW3R5cGVdXG4gICAgICAgIHNyYyA9IHNyYyB8fCBvcHRpb25zXG4gICAgICAgIGlmIChpbml0Rm4pIHtcbiAgICAgICAgICBwID0gbmV3IEltcGwoKVtpbml0Rm5dKHNyYylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwID0gbmV3IEltcGwoc3JjKVxuICAgICAgICB9XG4gICAgICAgIHAudGhlbigoY29uY3JldGUpID0+IHtcbiAgICAgICAgICBwcm9taXNlLnJlc29sdmUoY29uY3JldGUpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICBsYXN0RXJyb3IgPSBlcnJvclxuICAgICAgICAgIHB2dCh0aGlzKS5maW5kKGl0ZXJhdG9yLCBtYXAsIG9wdGlvbnMsIHByb21pc2UsIGluaXRGbiwgbGFzdEVycm9yKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGUgbmV4dCBpbiBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHZ0KHRoaXMpLm5leHQgPSAob3JkZXIsIG1hcCkgPT4ge1xuICAgICAgbGV0IEltcGxcbiAgICAgIGxldCBrZXlcbiAgICAgIGNvbnN0IG5leHQgPSBvcmRlci5uZXh0KClcbiAgICAgIGlmICghbmV4dC5kb25lKSB7XG4gICAgICAgIGtleSA9IG5leHQudmFsdWVcbiAgICAgICAgSW1wbCA9IG1hcC5nZXQoa2V5KVxuICAgICAgfVxuICAgICAgcmV0dXJuIFtrZXksIEltcGxdXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gbG9jYXRlIHN1cHBvcnRlZCBpbXBsZW1lbnRhdGlvbiBhbmQgaW5pdGlhbGl6ZSBpdCwgcmVzb2x2aW5nIHRoZSBgUHJvbWlzZWAgd2l0aCB0aGUgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IG9yZGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXBcbiAgICogICAgICAgIE1hcCBvZiBDbGFzcyB0byBvcmRlciB0eXBlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgSW5pdGlhbGl6YXRpb24gb2JqZWN0IHRvIHBhc3MgdG8gY29uc3RydWN0b3Igb2YgQ2xhc3MgaW4gYnJvd3NlciB0ZXN0IG9mIHN1cHBvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRGblxuICAgKiAgICAgICAgT3B0aW9uYWwgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gdG8gaW52b2tlIHdpdGggdGhlIGBvcHRpb25zYCBjb25maWcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGUgKG9yZGVyLCBtYXAsIG9wdGlvbnMsIGluaXRGbiA9IG51bGwpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgcHZ0KHRoaXMpLmZpbmQodGhpcy5saXN0b3JkZXIob3JkZXIuc2xpY2UoKSksIG1hcCwgb3B0aW9ucywgcHJvbWlzZSwgaW5pdEZuKVxuICAgIHJldHVybiBwcm9taXNlLnByb21pc2VcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEltcGxGYWN0b3J5T3JkZXJcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3V0aWwvaW1wbC1mYWN0b3J5LW9yZGVyLmpzIiwiJ3VzZSBzdHJpY3QnXG5cbi8vIGh0dHA6Ly9ibG9nLmNhcmJvbmZpdmUuY29tLzIwMTUvMDEvMTQvZ2V0dGluLWZyZWFreS1mdW5jdGlvbmFsLXdjdXJyaWVkLWphdmFzY3JpcHQvXG4vKipcbiAqIEJhc2ljIGN1cnJ5IGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBjdXJyeSA9IChmeCkgPT4ge1xuICBsZXQgYXJpdHkgPSBmeC5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbiBmMSgpIHtcbiAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPj0gYXJpdHkpIHtcbiAgICAgIHJldHVybiBmeC5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gZjIoKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgICAgcmV0dXJuIGYxLmFwcGx5KG51bGwsIGFyZ3MuY29uY2F0KGFyZ3MyKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEJhc2ljIGZpbHRlciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgZmlsdGVyID0gY3VycnkoKGZuLCBsaXN0KSA9PiB7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgbGVuID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgaWYgKGZuKGxpc3RbaWR4XSkpIHtcbiAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IGxpc3RbaWR4XTtcbiAgICB9XG4gICAgaWR4ICs9IDE7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pXG5cbi8qKlxuICogQ29udmVydHMgYSB2YWx1ZSB0byBpbnRlZ2VyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybnMge051bWJlcn1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgdG9JbnQgPSAodmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKVxuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIHRydXRoeS1uZXNzIG9mIGB2YWx1ZWAgYW5kIHJldHVybnMgZGVmYXVsdCBpZiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0VmFsdWVcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0T3JFbHNlID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgcmV0dXJuIHZhbHVlIHx8IGRlZmF1bHRWYWx1ZVxufVxuXG4vKipcbiAqIENoZWNrcyB0cnV0aHktbmVzcyBvZiBgdmFsdWVgIGFzIGEgTnVtYmVyIGFuZCByZXR1cm5zIGRlZmF1bHQgaWYgZmFsc2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdFZhbHVlXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEludE9yRWxzZSA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiAhaXNOYU4odG9JbnQodmFsdWUpKSA/IHRvSW50KHZhbHVlKSA6IGRlZmF1bHRWYWx1ZVxufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvdXRpbC9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9tYXBcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL21hcC5qc1xuLy8gbW9kdWxlIGlkID0gODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL251bWJlci9pcy1maW5pdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL251bWJlci9pcy1maW5pdGUuanNcbi8vIG1vZHVsZSBpZCA9IDkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc2V0XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIik7XG5cbnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldE93blByb3BlcnR5RGVzY3JpcHRvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gIHZhciBkZXNjID0gKDAsIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyLmRlZmF1bHQpKG9iamVjdCwgcHJvcGVydHkpO1xuXG4gIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcGFyZW50ID0gKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkob2JqZWN0KTtcblxuICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykge1xuICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDtcblxuICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0LmpzXG4vLyBtb2R1bGUgaWQgPSA5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9mcm9tID0gcmVxdWlyZShcIi4uL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxudmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMCwgX2Zyb20yLmRlZmF1bHQpKGFycik7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiAhVGhpcyBpcyBhIHN0cmlwcGVkIGRvd24gdmVyc2lvbiBvZiBCdW55YW4gdGFyZ2V0ZWQgc3BlY2lmaWNhbGx5IGZvciB0aGUgYnJvd3NlclxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgVHJlbnQgTWljay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIENvcHlyaWdodCAoYykgMjAxNCBKb3llbnQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoZSBidW55YW4gbG9nZ2luZyBsaWJyYXJ5IGZvciBub2RlLmpzLlxuICpcbiAqIC0qLSBtb2RlOiBqcyAtKi1cbiAqIHZpbTogZXhwYW5kdGFiOnRzPTQ6c3c9NFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSAnMC4yLjMnO1xuXG4vLyBCdW55YW4gbG9nIGZvcm1hdCB2ZXJzaW9uLiBUaGlzIGJlY29tZXMgdGhlICd2JyBmaWVsZCBvbiBhbGwgbG9nIHJlY29yZHMuXG4vLyBgMGAgaXMgdW50aWwgSSByZWxlYXNlIGEgdmVyc2lvbiAnMS4wLjAnIG9mIG5vZGUtYnVueWFuLiBUaGVyZWFmdGVyLFxuLy8gc3RhcnRpbmcgd2l0aCBgMWAsIHRoaXMgd2lsbCBiZSBpbmNyZW1lbnRlZCBpZiB0aGVyZSBpcyBhbnkgYmFja3dhcmRcbi8vIGluY29tcGF0aWJsZSBjaGFuZ2UgdG8gdGhlIGxvZyByZWNvcmQgZm9ybWF0LiBEZXRhaWxzIHdpbGwgYmUgaW5cbi8vICdDSEFOR0VTLm1kJyAodGhlIGNoYW5nZSBsb2cpLlxudmFyIExPR19WRVJTSU9OID0gMDtcblxuLy8tLS0tIEludGVybmFsIHN1cHBvcnQgc3R1ZmZcblxuLyoqXG4gKiBBIHNoYWxsb3cgY29weSBvZiBhbiBvYmplY3QuIEJ1bnlhbiBsb2dnaW5nIGF0dGVtcHRzIHRvIG5ldmVyIGNhdXNlXG4gKiBleGNlcHRpb25zLCBzbyB0aGlzIGZ1bmN0aW9uIGF0dGVtcHRzIHRvIGhhbmRsZSBub24tb2JqZWN0cyBncmFjZWZ1bGx5LlxuICovXG5mdW5jdGlvbiBvYmpDb3B5KG9iaikge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyB8fCBvYmogPT09IG51bGwpIHsgIC8vIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIChvYmopID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgY29weSA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgIGNvcHlba10gPSBvYmpba107XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbn1cblxudmFyIGZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcblxuICAgIGlmKGYgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgZiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGYudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5cbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgaWYgKHggPT09ICclJScpIHtcbiAgICAgICAgICAgIHJldHVybiAnJSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHgpIHtcbiAgICAgICAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICAgICAgICBjYXNlICclaic6XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogR2F0aGVyIHNvbWUgY2FsbGVyIGluZm8gMyBzdGFjayBsZXZlbHMgdXAuXG4gKiBTZWUgPGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC93aWtpL0phdmFTY3JpcHRTdGFja1RyYWNlQXBpPi5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2FsbGVyM0luZm8oKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIHZhciBzYXZlTGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG4gICAgdmFyIHNhdmVQcmVwYXJlID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMztcbiAgICAvL0Vycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGdldENhbGxlcjNJbmZvKTtcblxuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gZnVuY3Rpb24gKF8sIHN0YWNrKSB7XG4gICAgICAgIHZhciBjYWxsZXIgPSBzdGFja1syXTtcbiAgICAgICAgb2JqLmZpbGUgPSBjYWxsZXIuZ2V0RmlsZU5hbWUoKTtcbiAgICAgICAgb2JqLmxpbmUgPSBjYWxsZXIuZ2V0TGluZU51bWJlcigpO1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxlci5nZXRGdW5jdGlvbk5hbWUoKTtcbiAgICAgICAgaWYgKGZ1bmMpIHtcbiAgICAgICAgICAgIG9iai5mdW5jID0gZnVuYztcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gc2F2ZUxpbWl0O1xuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gc2F2ZVByZXBhcmU7XG4gICAgcmV0dXJuIG9iajtcbn1cblxuXG5mdW5jdGlvbiBfaW5kZW50KHMsIGluZGVudCkge1xuICAgIGlmICghaW5kZW50KSB7XG4gICAgICAgIGluZGVudCA9ICcgICAgJztcbiAgICB9XG4gICAgdmFyIGxpbmVzID0gcy5zcGxpdCgvXFxyP1xcbi9nKTtcbiAgICByZXR1cm4gaW5kZW50ICsgbGluZXMuam9pbignXFxuJyArIGluZGVudCk7XG59XG5cblxuLyoqXG4gKiBXYXJuIGFib3V0IGFuIGJ1bnlhbiBwcm9jZXNzaW5nIGVycm9yLlxuICpcbiAqIEBwYXJhbSBtc2cge1N0cmluZ30gTWVzc2FnZSB3aXRoIHdoaWNoIHRvIHdhcm4uXG4gKiBAcGFyYW0gZGVkdXBLZXkge1N0cmluZ30gT3B0aW9uYWwuIEEgc2hvcnQgc3RyaW5nIGtleSBmb3IgdGhpcyB3YXJuaW5nIHRvXG4gKiAgICAgIGhhdmUgaXRzIHdhcm5pbmcgb25seSBwcmludGVkIG9uY2UuXG4gKi9cbmZ1bmN0aW9uIF93YXJuKG1zZywgZGVkdXBLZXkpIHtcbiAgICBpZiAoZGVkdXBLZXkpIHtcbiAgICAgICAgaWYgKF93YXJuZWRbZGVkdXBLZXldKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3dhcm5lZFtkZWR1cEtleV0gPSB0cnVlO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKG1zZyArICdcXG4nKTtcbn1cbmZ1bmN0aW9uIF9oYXZlV2FybmVkKGRlZHVwS2V5KSB7XG4gICAgcmV0dXJuIF93YXJuZWRbZGVkdXBLZXldO1xufVxudmFyIF93YXJuZWQgPSB7fTtcblxuXG5mdW5jdGlvbiBDb25zb2xlUmF3U3RyZWFtKCkge1xufVxuQ29uc29sZVJhd1N0cmVhbS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocmVjKSB7XG4gICAgaWYgKHJlYy5sZXZlbCA8IElORk8pIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVjKTtcbiAgICB9IGVsc2UgaWYgKHJlYy5sZXZlbCA8IFdBUk4pIHtcbiAgICAgICAgY29uc29sZS5pbmZvKHJlYyk7XG4gICAgfSBlbHNlIGlmIChyZWMubGV2ZWwgPCBFUlJPUikge1xuICAgICAgICBjb25zb2xlLndhcm4ocmVjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKHJlYyk7XG4gICAgfVxuXG4gICAgaWYocmVjLmVyciAmJiByZWMuZXJyLnN0YWNrKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IocmVjLmVyci5zdGFjayk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gQ29uc29sZUZvcm1hdHRlZFN0cmVhbSgpIHt9XG5Db25zb2xlRm9ybWF0dGVkU3RyZWFtLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChyZWMpIHtcblxuICAgIHZhciBsZXZlbENzcywgZGVmYXVsdENzcyA9ICdjb2xvcjogRGltR3JheScsIG1zZ0NzcyA9ICdjb2xvcjogU3RlZWxCbHVlJztcblxuICAgIGlmIChyZWMubGV2ZWwgPCBERUJVRykge1xuICAgICAgICBsZXZlbENzcyA9ICdjb2xvcjogRGVlcFBpbmsnO1xuICAgIH0gZWxzZSBpZiAocmVjLmxldmVsIDwgSU5GTykge1xuICAgICAgICBsZXZlbENzcyA9ICdjb2xvcjogR29sZGVuUm9kJztcbiAgICB9IGVsc2UgaWYgKHJlYy5sZXZlbCA8IFdBUk4pIHtcbiAgICAgICAgbGV2ZWxDc3MgPSAnY29sb3I6IERhcmtUdXJxdW9pc2UnO1xuICAgIH0gZWxzZSBpZiAocmVjLmxldmVsIDwgRVJST1IpIHtcbiAgICAgICAgbGV2ZWxDc3MgPSAnY29sb3I6IFB1cnBsZSc7XG4gICAgfSBlbHNlIGlmIChyZWMubGV2ZWwgPCBGQVRBTCkge1xuICAgICAgICBsZXZlbENzcyA9ICdjb2xvcjogQ3JpbXNvbic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWxDc3MgPSAnY29sb3I6IEJsYWNrJztcbiAgICB9XG5cbiAgICB2YXIgbG9nZ2VyTmFtZSA9IHJlYy5jaGlsZE5hbWUgPyByZWMubmFtZSArICcvJyArIHJlYy5jaGlsZE5hbWUgOiByZWMubmFtZTtcblxuICAgIC8vZ2V0IGxldmVsIG5hbWUgYW5kIHBhZCBzdGFydCB3aXRoIHNwYWNzXG4gICAgdmFyIGxldmVsTmFtZSA9IG5hbWVGcm9tTGV2ZWxbcmVjLmxldmVsXS50b1VwcGVyQ2FzZSgpO1xuICAgIGxldmVsTmFtZSA9IEFycmF5KDYgLSBsZXZlbE5hbWUubGVuZ3RoKS5qb2luKCcgJykgKyBsZXZlbE5hbWU7XG5cbiAgICBmdW5jdGlvbiBwYWRaZXJvcyhudW1iZXIsIGxlbikge1xuICAgICAgICByZXR1cm4gQXJyYXkoKGxlbiArIDEpIC0gKG51bWJlciArICcnKS5sZW5ndGgpLmpvaW4oJzAnKSArIG51bWJlcjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnWyVzOiVzOiVzOiVzXSAlYyVzJWM6ICVzOiAlYyVzJyxcbiAgICAgICAgcGFkWmVyb3MocmVjLnRpbWUuZ2V0SG91cnMoKSwgMiksIHBhZFplcm9zKHJlYy50aW1lLmdldE1pbnV0ZXMoKSwgMiksXG4gICAgICAgIHBhZFplcm9zKHJlYy50aW1lLmdldFNlY29uZHMoKSwgMiksIHBhZFplcm9zKHJlYy50aW1lLmdldE1pbGxpc2Vjb25kcygpLCA0KSxcbiAgICAgICAgbGV2ZWxDc3MsIGxldmVsTmFtZSxcbiAgICAgICAgZGVmYXVsdENzcywgbG9nZ2VyTmFtZSxcbiAgICAgICAgbXNnQ3NzLCByZWMubXNnKTtcbiAgICBpZihyZWMuZXJyICYmIHJlYy5lcnIuc3RhY2spIHtcbiAgICAgICAgY29uc29sZS5sb2coJyVjJXMsJywgbGV2ZWxDc3MsIHJlYy5lcnIuc3RhY2spO1xuICAgIH1cbn07XG5cbi8vLS0tLSBMZXZlbHNcblxudmFyIFRSQUNFID0gMTA7XG52YXIgREVCVUcgPSAyMDtcbnZhciBJTkZPID0gMzA7XG52YXIgV0FSTiA9IDQwO1xudmFyIEVSUk9SID0gNTA7XG52YXIgRkFUQUwgPSA2MDtcblxudmFyIGxldmVsRnJvbU5hbWUgPSB7XG4gICAgJ3RyYWNlJzogVFJBQ0UsXG4gICAgJ2RlYnVnJzogREVCVUcsXG4gICAgJ2luZm8nOiBJTkZPLFxuICAgICd3YXJuJzogV0FSTixcbiAgICAnZXJyb3InOiBFUlJPUixcbiAgICAnZmF0YWwnOiBGQVRBTFxufTtcbnZhciBuYW1lRnJvbUxldmVsID0ge307XG5PYmplY3Qua2V5cyhsZXZlbEZyb21OYW1lKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgbmFtZUZyb21MZXZlbFtsZXZlbEZyb21OYW1lW25hbWVdXSA9IG5hbWU7XG59KTtcblxuXG4vKipcbiAqIFJlc29sdmUgYSBsZXZlbCBudW1iZXIsIG5hbWUgKHVwcGVyIG9yIGxvd2VyY2FzZSkgdG8gYSBsZXZlbCBudW1iZXIgdmFsdWUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUxldmVsKG5hbWVPck51bSkge1xuICAgIHZhciBsZXZlbCA9ICh0eXBlb2YgKG5hbWVPck51bSkgPT09ICdzdHJpbmcnID8gbGV2ZWxGcm9tTmFtZVtuYW1lT3JOdW0udG9Mb3dlckNhc2UoKV0gOiBuYW1lT3JOdW0pO1xuICAgIHJldHVybiBsZXZlbDtcbn1cblxuXG4vLy0tLS0gTG9nZ2VyIGNsYXNzXG5cbi8qKlxuICogQ3JlYXRlIGEgTG9nZ2VyIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9IFNlZSBkb2N1bWVudGF0aW9uIGZvciBmdWxsIGRldGFpbHMuIEF0IG1pbmltdW1cbiAqICAgIHRoaXMgbXVzdCBpbmNsdWRlIGEgJ25hbWUnIHN0cmluZyBrZXkuIENvbmZpZ3VyYXRpb24ga2V5czpcbiAqICAgICAgLSBgc3RyZWFtc2A6IHNwZWNpZnkgdGhlIGxvZ2dlciBvdXRwdXQgc3RyZWFtcy4gVGhpcyBpcyBhbiBhcnJheSBvZlxuICogICAgICAgIG9iamVjdHMgd2l0aCB0aGVzZSBmaWVsZHM6XG4gKiAgICAgICAgICAtIGB0eXBlYDogVGhlIHN0cmVhbSB0eXBlLiBTZWUgUkVBRE1FLm1kIGZvciBmdWxsIGRldGFpbHMuXG4gKiAgICAgICAgICAgIE9mdGVuIHRoaXMgaXMgaW1wbGllZCBieSB0aGUgb3RoZXIgZmllbGRzLiBFeGFtcGxlcyBhcmVcbiAqICAgICAgICAgICAgJ2ZpbGUnLCAnc3RyZWFtJyBhbmQgXCJyYXdcIi5cbiAqICAgICAgICAgIC0gYGxldmVsYDogRGVmYXVsdHMgdG8gJ2luZm8nLlxuICogICAgICAgICAgLSBgcGF0aGAgb3IgYHN0cmVhbWA6IFRoZSBzcGVjaWZ5IHRoZSBmaWxlIHBhdGggb3Igd3JpdGVhYmxlXG4gKiAgICAgICAgICAgIHN0cmVhbSB0byB3aGljaCBsb2cgcmVjb3JkcyBhcmUgd3JpdHRlbi4gRS5nLlxuICogICAgICAgICAgICBgc3RyZWFtOiBwcm9jZXNzLnN0ZG91dGAuXG4gKiAgICAgICAgICAtIGBjbG9zZU9uRXhpdGAgKGJvb2xlYW4pOiBPcHRpb25hbC4gRGVmYXVsdCBpcyB0cnVlIGZvciBhXG4gKiAgICAgICAgICAgICdmaWxlJyBzdHJlYW0gd2hlbiBgcGF0aGAgaXMgZ2l2ZW4sIGZhbHNlIG90aGVyd2lzZS5cbiAqICAgICAgICBTZWUgUkVBRE1FLm1kIGZvciBmdWxsIGRldGFpbHMuXG4gKiAgICAgIC0gYGxldmVsYDogc2V0IHRoZSBsZXZlbCBmb3IgYSBzaW5nbGUgb3V0cHV0IHN0cmVhbSAoY2Fubm90IGJlIHVzZWRcbiAqICAgICAgICB3aXRoIGBzdHJlYW1zYClcbiAqICAgICAgLSBgc3RyZWFtYDogdGhlIG91dHB1dCBzdHJlYW0gZm9yIGEgbG9nZ2VyIHdpdGgganVzdCBvbmUsIGUuZy5cbiAqICAgICAgICBgcHJvY2Vzcy5zdGRvdXRgIChjYW5ub3QgYmUgdXNlZCB3aXRoIGBzdHJlYW1zYClcbiAqICAgICAgLSBgc2VyaWFsaXplcnNgOiBvYmplY3QgbWFwcGluZyBsb2cgcmVjb3JkIGZpZWxkIG5hbWVzIHRvXG4gKiAgICAgICAgc2VyaWFsaXppbmcgZnVuY3Rpb25zLiBTZWUgUkVBRE1FLm1kIGZvciBkZXRhaWxzLlxuICogICAgICAtIGBzcmNgOiBCb29sZWFuIChkZWZhdWx0IGZhbHNlKS4gU2V0IHRydWUgdG8gZW5hYmxlICdzcmMnIGF1dG9tYXRpY1xuICogICAgICAgIGZpZWxkIHdpdGggbG9nIGNhbGwgc291cmNlIGluZm8uXG4gKiAgICBBbGwgb3RoZXIga2V5cyBhcmUgbG9nIHJlY29yZCBmaWVsZHMuXG4gKlxuICogQW4gYWx0ZXJuYXRpdmUgKmludGVybmFsKiBjYWxsIHNpZ25hdHVyZSBpcyB1c2VkIGZvciBjcmVhdGluZyBhIGNoaWxkOlxuICogICAgbmV3IExvZ2dlcig8cGFyZW50IGxvZ2dlcj4sIDxjaGlsZCBvcHRpb25zPlssIDxjaGlsZCBvcHRzIGFyZSBzaW1wbGU+XSk7XG4gKlxuICogQHBhcmFtIF9jaGlsZFNpbXBsZSAoQm9vbGVhbikgQW4gYXNzZXJ0aW9uIHRoYXQgdGhlIGdpdmVuIGBfY2hpbGRPcHRpb25zYFxuICogICAgKGEpIG9ubHkgYWRkIGZpZWxkcyAobm8gY29uZmlnKSBhbmQgKGIpIG5vIHNlcmlhbGl6YXRpb24gaGFuZGxpbmcgaXNcbiAqICAgIHJlcXVpcmVkIGZvciB0aGVtLiBJT1csIHRoaXMgaXMgYSBmYXN0IHBhdGggZm9yIGZyZXF1ZW50IGNoaWxkXG4gKiAgICBjcmVhdGlvbi5cbiAqL1xuZnVuY3Rpb24gTG9nZ2VyKG9wdGlvbnMsIF9jaGlsZE9wdGlvbnMsIF9jaGlsZFNpbXBsZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBMb2dnZXIpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTG9nZ2VyKG9wdGlvbnMsIF9jaGlsZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8vIElucHV0IGFyZyB2YWxpZGF0aW9uLlxuICAgIHZhciBwYXJlbnQ7XG4gICAgaWYgKF9jaGlsZE9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJlbnQgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gX2NoaWxkT3B0aW9ucztcbiAgICAgICAgaWYgKCEocGFyZW50IGluc3RhbmNlb2YgTG9nZ2VyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICAnaW52YWxpZCBMb2dnZXIgY3JlYXRpb246IGRvIG5vdCBwYXNzIGEgc2Vjb25kIGFyZycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIChvYmplY3QpIGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zLm5hbWUgKHN0cmluZykgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgJ2ludmFsaWQgb3B0aW9ucy5uYW1lOiBjaGlsZCBjYW5ub3Qgc2V0IGxvZ2dlciBuYW1lJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc3RyZWFtICYmIG9wdGlvbnMuc3RyZWFtcykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3QgbWl4IFwic3RyZWFtc1wiIGFuZCBcInN0cmVhbVwiIG9wdGlvbnMnKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc3RyZWFtcyAmJiAhQXJyYXkuaXNBcnJheShvcHRpb25zLnN0cmVhbXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgb3B0aW9ucy5zdHJlYW1zOiBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnNlcmlhbGl6ZXJzICYmICh0eXBlb2YgKG9wdGlvbnMuc2VyaWFsaXplcnMpICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMuc2VyaWFsaXplcnMpKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIG9wdGlvbnMuc2VyaWFsaXplcnM6IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgdmFyIGZpZWxkcywgbmFtZSwgaTtcblxuICAgIC8vIEZhc3QgcGF0aCBmb3Igc2ltcGxlIGNoaWxkIGNyZWF0aW9uLlxuICAgIGlmIChwYXJlbnQgJiYgX2NoaWxkU2ltcGxlKSB7XG4gICAgICAgIC8vIGBfaXNTaW1wbGVDaGlsZGAgaXMgYSBzaWduYWwgdG8gc3RyZWFtIGNsb3NlIGhhbmRsaW5nIHRoYXQgdGhpcyBjaGlsZFxuICAgICAgICAvLyBvd25zIG5vbmUgb2YgaXRzIHN0cmVhbXMuXG4gICAgICAgIHRoaXMuX2lzU2ltcGxlQ2hpbGQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2xldmVsID0gcGFyZW50Ll9sZXZlbDtcbiAgICAgICAgdGhpcy5zdHJlYW1zID0gcGFyZW50LnN0cmVhbXM7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplcnMgPSBwYXJlbnQuc2VyaWFsaXplcnM7XG4gICAgICAgIHRoaXMuc3JjID0gcGFyZW50LnNyYztcbiAgICAgICAgZmllbGRzID0gdGhpcy5maWVsZHMgPSB7fTtcbiAgICAgICAgdmFyIHBhcmVudEZpZWxkTmFtZXMgPSBPYmplY3Qua2V5cyhwYXJlbnQuZmllbGRzKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcmVudEZpZWxkTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5hbWUgPSBwYXJlbnRGaWVsZE5hbWVzW2ldO1xuICAgICAgICAgICAgZmllbGRzW25hbWVdID0gcGFyZW50LmZpZWxkc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgICBmaWVsZHNbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBOdWxsIHZhbHVlcy5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLl9sZXZlbCA9IHBhcmVudC5fbGV2ZWw7XG4gICAgICAgIHRoaXMuc3RyZWFtcyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFyZW50LnN0cmVhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzID0gb2JqQ29weShwYXJlbnQuc3RyZWFtc1tpXSk7XG4gICAgICAgICAgICBzLmNsb3NlT25FeGl0ID0gZmFsc2U7IC8vIERvbid0IG93biBwYXJlbnQgc3RyZWFtLlxuICAgICAgICAgICAgdGhpcy5zdHJlYW1zLnB1c2gocyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXJpYWxpemVycyA9IG9iakNvcHkocGFyZW50LnNlcmlhbGl6ZXJzKTtcbiAgICAgICAgdGhpcy5zcmMgPSBwYXJlbnQuc3JjO1xuICAgICAgICB0aGlzLmZpZWxkcyA9IG9iakNvcHkocGFyZW50LmZpZWxkcyk7XG4gICAgICAgIGlmIChvcHRpb25zLmxldmVsKSB7XG4gICAgICAgICAgICB0aGlzLmxldmVsKG9wdGlvbnMubGV2ZWwpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbGV2ZWwgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIHRoaXMuc3RyZWFtcyA9IFtdO1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zcmMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgKmNvbmZpZyogb3B0aW9ucyAoaS5lLiBvcHRpb25zIHRoYXQgYXJlIG5vdCBqdXN0IHBsYWluIGRhdGFcbiAgICAvLyBmb3IgbG9nIHJlY29yZHMpLlxuICAgIGlmIChvcHRpb25zLnN0cmVhbSkge1xuICAgICAgICBzZWxmLmFkZFN0cmVhbSh7XG4gICAgICAgICAgICB0eXBlOiAnc3RyZWFtJyxcbiAgICAgICAgICAgIHN0cmVhbTogb3B0aW9ucy5zdHJlYW0sXG4gICAgICAgICAgICBjbG9zZU9uRXhpdDogZmFsc2UsXG4gICAgICAgICAgICBsZXZlbDogb3B0aW9ucy5sZXZlbFxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc3RyZWFtcykge1xuICAgICAgICBvcHRpb25zLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgc2VsZi5hZGRTdHJlYW0ocywgb3B0aW9ucy5sZXZlbCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocGFyZW50ICYmIG9wdGlvbnMubGV2ZWwpIHtcbiAgICAgICAgdGhpcy5sZXZlbChvcHRpb25zLmxldmVsKTtcbiAgICB9IGVsc2UgaWYgKCFwYXJlbnQpIHtcblxuICAgICAgICAvKlxuICAgICAgICAgKiBJbiB0aGUgYnJvd3NlciB3ZSdsbCBiZSBlbWl0dGluZyB0byBjb25zb2xlLmxvZyBieSBkZWZhdWx0LlxuICAgICAgICAgKiBBbnkgY29uc29sZS5sb2cgd29ydGggaXRzIHNhbHQgdGhlc2UgZGF5cyBjYW4gbmljZWx5IHJlbmRlclxuICAgICAgICAgKiBhbmQgaW50cm9zcGVjdCBvYmplY3RzIChlLmcuIHRoZSBGaXJlZm94IGFuZCBDaHJvbWUgY29uc29sZSlcbiAgICAgICAgICogc28gbGV0J3MgZW1pdCB0aGUgcmF3IGxvZyByZWNvcmQuIEFyZSB0aGVyZSBicm93c2VycyBmb3Igd2hpY2hcbiAgICAgICAgICogdGhhdCBicmVha3MgdGhpbmdzP1xuICAgICAgICAgKi9cbiAgICAgICAgc2VsZi5hZGRTdHJlYW0oe1xuICAgICAgICAgICAgdHlwZTogJ3JhdycsXG4gICAgICAgICAgICBzdHJlYW06IG5ldyBDb25zb2xlUmF3U3RyZWFtKCksXG4gICAgICAgICAgICBjbG9zZU9uRXhpdDogZmFsc2UsXG4gICAgICAgICAgICBsZXZlbDogb3B0aW9ucy5sZXZlbFxuICAgICAgICB9KTtcblxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zZXJpYWxpemVycykge1xuICAgICAgICBzZWxmLmFkZFNlcmlhbGl6ZXJzKG9wdGlvbnMuc2VyaWFsaXplcnMpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zcmMpIHtcbiAgICAgICAgdGhpcy5zcmMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZpZWxkcy5cbiAgICAvLyBUaGVzZSBhcmUgdGhlIGRlZmF1bHQgZmllbGRzIGZvciBsb2cgcmVjb3JkcyAobWludXMgdGhlIGF0dHJpYnV0ZXNcbiAgICAvLyByZW1vdmVkIGluIHRoaXMgY29uc3RydWN0b3IpLiBUbyBhbGxvdyBzdG9yaW5nIHJhdyBsb2cgcmVjb3Jkc1xuICAgIC8vICh1bnJlbmRlcmVkKSwgYHRoaXMuZmllbGRzYCBtdXN0IG5ldmVyIGJlIG11dGF0ZWQuIENyZWF0ZSBhIGNvcHkgZm9yXG4gICAgLy8gYW55IGNoYW5nZXMuXG4gICAgZmllbGRzID0gb2JqQ29weShvcHRpb25zKTtcbiAgICBkZWxldGUgZmllbGRzLnN0cmVhbTtcbiAgICBkZWxldGUgZmllbGRzLmxldmVsO1xuICAgIGRlbGV0ZSBmaWVsZHMuc3RyZWFtcztcbiAgICBkZWxldGUgZmllbGRzLnNlcmlhbGl6ZXJzO1xuICAgIGRlbGV0ZSBmaWVsZHMuc3JjO1xuICAgIGlmICh0aGlzLnNlcmlhbGl6ZXJzKSB7XG4gICAgICAgIHRoaXMuX2FwcGx5U2VyaWFsaXplcnMoZmllbGRzKTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoZmllbGRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHNlbGYuZmllbGRzW2tdID0gZmllbGRzW2tdO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEFkZCBhIHN0cmVhbVxuICpcbiAqIEBwYXJhbSBzdHJlYW0ge09iamVjdH0uIE9iamVjdCB3aXRoIHRoZXNlIGZpZWxkczpcbiAqICAgIC0gYHR5cGVgOiBUaGUgc3RyZWFtIHR5cGUuIFNlZSBSRUFETUUubWQgZm9yIGZ1bGwgZGV0YWlscy5cbiAqICAgICAgT2Z0ZW4gdGhpcyBpcyBpbXBsaWVkIGJ5IHRoZSBvdGhlciBmaWVsZHMuIEV4YW1wbGVzIGFyZVxuICogICAgICAnZmlsZScsICdzdHJlYW0nIGFuZCBcInJhd1wiLlxuICogICAgLSBgcGF0aGAgb3IgYHN0cmVhbWA6IFRoZSBzcGVjaWZ5IHRoZSBmaWxlIHBhdGggb3Igd3JpdGVhYmxlXG4gKiAgICAgIHN0cmVhbSB0byB3aGljaCBsb2cgcmVjb3JkcyBhcmUgd3JpdHRlbi4gRS5nLlxuICogICAgICBgc3RyZWFtOiBwcm9jZXNzLnN0ZG91dGAuXG4gKiAgICAtIGBsZXZlbGA6IE9wdGlvbmFsLiBGYWxscyBiYWNrIHRvIGBkZWZhdWx0TGV2ZWxgLlxuICogICAgLSBgY2xvc2VPbkV4aXRgIChib29sZWFuKTogT3B0aW9uYWwuIERlZmF1bHQgaXMgdHJ1ZSBmb3IgYVxuICogICAgICAnZmlsZScgc3RyZWFtIHdoZW4gYHBhdGhgIGlzIGdpdmVuLCBmYWxzZSBvdGhlcndpc2UuXG4gKiAgICBTZWUgUkVBRE1FLm1kIGZvciBmdWxsIGRldGFpbHMuXG4gKiBAcGFyYW0gZGVmYXVsdExldmVsIHtOdW1iZXJ8U3RyaW5nfSBPcHRpb25hbC4gQSBsZXZlbCB0byB1c2UgaWZcbiAqICAgICAgYHN0cmVhbS5sZXZlbGAgaXMgbm90IHNldC4gSWYgbmVpdGhlciBpcyBnaXZlbiwgdGhpcyBkZWZhdWx0cyB0byBJTkZPLlxuICovXG5Mb2dnZXIucHJvdG90eXBlLmFkZFN0cmVhbSA9IGZ1bmN0aW9uIGFkZFN0cmVhbShzLCBkZWZhdWx0TGV2ZWwpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKGRlZmF1bHRMZXZlbCA9PT0gbnVsbCB8fCBkZWZhdWx0TGV2ZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWZhdWx0TGV2ZWwgPSBJTkZPO1xuICAgIH1cblxuICAgIHMgPSBvYmpDb3B5KHMpO1xuXG4gICAgLy8gSW1wbGljaXQgJ3R5cGUnIGZyb20gb3RoZXIgYXJncy5cbiAgICBpZiAoIXMudHlwZSAmJiBzLnN0cmVhbSkge1xuICAgICAgICBzLnR5cGUgPSAncmF3JztcbiAgICB9XG4gICAgcy5yYXcgPSAocy50eXBlID09PSAncmF3Jyk7ICAvLyBQRVJGOiBBbGxvdyBmb3IgZmFzdGVyIGNoZWNrIGluIGBfZW1pdGAuXG5cbiAgICBpZiAocy5sZXZlbCkge1xuICAgICAgICBzLmxldmVsID0gcmVzb2x2ZUxldmVsKHMubGV2ZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHMubGV2ZWwgPSByZXNvbHZlTGV2ZWwoZGVmYXVsdExldmVsKTtcbiAgICB9XG4gICAgaWYgKHMubGV2ZWwgPCBzZWxmLl9sZXZlbCkge1xuICAgICAgICBzZWxmLl9sZXZlbCA9IHMubGV2ZWw7XG4gICAgfVxuXG4gICAgc3dpdGNoIChzLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3RyZWFtJzpcbiAgICAgICAgICAgIGlmICghcy5jbG9zZU9uRXhpdCkge1xuICAgICAgICAgICAgICAgIHMuY2xvc2VPbkV4aXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyYXcnOlxuICAgICAgICAgICAgaWYgKCFzLmNsb3NlT25FeGl0KSB7XG4gICAgICAgICAgICAgICAgcy5jbG9zZU9uRXhpdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmtub3duIHN0cmVhbSB0eXBlIFwiJyArIHMudHlwZSArICdcIicpO1xuICAgIH1cblxuICAgIHNlbGYuc3RyZWFtcy5wdXNoKHMpO1xuICAgIGRlbGV0ZSBzZWxmLmhhdmVOb25SYXdTdHJlYW1zOyAgLy8gcmVzZXRcbn07XG5cblxuLyoqXG4gKiBBZGQgc2VyaWFsaXplcnNcbiAqXG4gKiBAcGFyYW0gc2VyaWFsaXplcnMge09iamVjdH0gT3B0aW9uYWwuIE9iamVjdCBtYXBwaW5nIGxvZyByZWNvcmQgZmllbGQgbmFtZXNcbiAqICAgIHRvIHNlcmlhbGl6aW5nIGZ1bmN0aW9ucy4gU2VlIFJFQURNRS5tZCBmb3IgZGV0YWlscy5cbiAqL1xuTG9nZ2VyLnByb3RvdHlwZS5hZGRTZXJpYWxpemVycyA9IGZ1bmN0aW9uIGFkZFNlcmlhbGl6ZXJzKHNlcmlhbGl6ZXJzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKCFzZWxmLnNlcmlhbGl6ZXJzKSB7XG4gICAgICAgIHNlbGYuc2VyaWFsaXplcnMgPSB7fTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoc2VyaWFsaXplcnMpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHZhciBzZXJpYWxpemVyID0gc2VyaWFsaXplcnNbZmllbGRdO1xuICAgICAgICBpZiAodHlwZW9mIChzZXJpYWxpemVyKSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihmb3JtYXQoXG4gICAgICAgICAgICAgICAgJ2ludmFsaWQgc2VyaWFsaXplciBmb3IgXCIlc1wiIGZpZWxkOiBtdXN0IGJlIGEgZnVuY3Rpb24nLFxuICAgICAgICAgICAgICAgIGZpZWxkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnNlcmlhbGl6ZXJzW2ZpZWxkXSA9IHNlcmlhbGl6ZXI7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGUgYSBjaGlsZCBsb2dnZXIsIHR5cGljYWxseSB0byBhZGQgYSBmZXcgbG9nIHJlY29yZCBmaWVsZHMuXG4gKlxuICogVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4gcGFzc2luZyBhIGxvZ2dlciB0byBhIHN1Yi1jb21wb25lbnQsIGUuZy4gYVxuICogJ3d1enpsZScgY29tcG9uZW50IG9mIHlvdXIgc2VydmljZTpcbiAqXG4gKiAgICB2YXIgd3V6emxlTG9nID0gbG9nLmNoaWxkKHtjb21wb25lbnQ6ICd3dXp6bGUnfSlcbiAqICAgIHZhciB3dXp6bGUgPSBuZXcgV3V6emxlKHsuLi4sIGxvZzogd3V6emxlTG9nfSlcbiAqXG4gKiBUaGVuIGxvZyByZWNvcmRzIGZyb20gdGhlIHd1enpsZSBjb2RlIHdpbGwgaGF2ZSB0aGUgc2FtZSBzdHJ1Y3R1cmUgYXNcbiAqIHRoZSBhcHAgbG9nLCAqcGx1cyB0aGUgY29tcG9uZW50PSd3dXp6bGUnIGZpZWxkKi5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBPcHRpb25hbC4gU2V0IG9mIG9wdGlvbnMgdG8gYXBwbHkgdG8gdGhlIGNoaWxkLlxuICogICAgQWxsIG9mIHRoZSBzYW1lIG9wdGlvbnMgZm9yIGEgbmV3IExvZ2dlciBhcHBseSBoZXJlLiBOb3RlczpcbiAqICAgICAgLSBUaGUgcGFyZW50J3Mgc3RyZWFtcyBhcmUgaW5oZXJpdGVkIGFuZCBjYW5ub3QgYmUgcmVtb3ZlZCBpbiB0aGlzXG4gKiAgICAgICAgY2FsbC4gQW55IGdpdmVuIGBzdHJlYW1zYCBhcmUgKmFkZGVkKiB0byB0aGUgc2V0IGluaGVyaXRlZCBmcm9tXG4gKiAgICAgICAgdGhlIHBhcmVudC5cbiAqICAgICAgLSBUaGUgcGFyZW50J3Mgc2VyaWFsaXplcnMgYXJlIGluaGVyaXRlZCwgdGhvdWdoIGNhbiBlZmZlY3RpdmVseSBiZVxuICogICAgICAgIG92ZXJ3cml0dGVuIGJ5IHVzaW5nIGR1cGxpY2F0ZSBrZXlzLlxuICogICAgICAtIENhbiB1c2UgYGxldmVsYCB0byBzZXQgdGhlIGxldmVsIG9mIHRoZSBzdHJlYW1zIGluaGVyaXRlZCBmcm9tXG4gKiAgICAgICAgdGhlIHBhcmVudC4gVGhlIGxldmVsIGZvciB0aGUgcGFyZW50IGlzIE5PVCBhZmZlY3RlZC5cbiAqIEBwYXJhbSBzaW1wbGUge0Jvb2xlYW59IE9wdGlvbmFsLiBTZXQgdG8gdHJ1ZSB0byBhc3NlcnQgdGhhdCBgb3B0aW9uc2BcbiAqICAgIChhKSBvbmx5IGFkZCBmaWVsZHMgKG5vIGNvbmZpZykgYW5kIChiKSBubyBzZXJpYWxpemF0aW9uIGhhbmRsaW5nIGlzXG4gKiAgICByZXF1aXJlZCBmb3IgdGhlbS4gSU9XLCB0aGlzIGlzIGEgZmFzdCBwYXRoIGZvciBmcmVxdWVudCBjaGlsZFxuICogICAgY3JlYXRpb24uIFNlZSAndG9vbHMvdGltZWNoaWxkLmpzJyBmb3IgbnVtYmVycy5cbiAqL1xuTG9nZ2VyLnByb3RvdHlwZS5jaGlsZCA9IGZ1bmN0aW9uIChvcHRpb25zLCBzaW1wbGUpIHtcbiAgICByZXR1cm4gbmV3ICh0aGlzLmNvbnN0cnVjdG9yKSh0aGlzLCBvcHRpb25zIHx8IHt9LCBzaW1wbGUpO1xufTtcblxuLyoqXG4gKiBHZXQvc2V0IHRoZSBsZXZlbCBvZiBhbGwgc3RyZWFtcyBvbiB0aGlzIGxvZ2dlci5cbiAqXG4gKiBHZXQgVXNhZ2U6XG4gKiAgICAvLyBSZXR1cm5zIHRoZSBjdXJyZW50IGxvZyBsZXZlbCAobG93ZXN0IGxldmVsIG9mIGFsbCBpdHMgc3RyZWFtcykuXG4gKiAgICBsb2cubGV2ZWwoKSAtPiBJTkZPXG4gKlxuICogU2V0IFVzYWdlOlxuICogICAgbG9nLmxldmVsKElORk8pICAgICAgIC8vIHNldCBhbGwgc3RyZWFtcyB0byBsZXZlbCBJTkZPXG4gKiAgICBsb2cubGV2ZWwoJ2luZm8nKSAgICAgLy8gY2FuIHVzZSAnaW5mbycgZXQgYWwgYWxpYXNlc1xuICovXG5Mb2dnZXIucHJvdG90eXBlLmxldmVsID0gZnVuY3Rpb24gbGV2ZWwodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGV2ZWw7XG4gICAgfVxuICAgIHZhciBuZXdMZXZlbCA9IHJlc29sdmVMZXZlbCh2YWx1ZSk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc3RyZWFtcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLnN0cmVhbXNbaV0ubGV2ZWwgPSBuZXdMZXZlbDtcbiAgICB9XG4gICAgdGhpcy5fbGV2ZWwgPSBuZXdMZXZlbDtcbn07XG5cblxuLyoqXG4gKiBHZXQvc2V0IHRoZSBsZXZlbCBvZiBhIHBhcnRpY3VsYXIgc3RyZWFtIG9uIHRoaXMgbG9nZ2VyLlxuICpcbiAqIEdldCBVc2FnZTpcbiAqICAgIC8vIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIGxldmVscyBvZiBlYWNoIHN0cmVhbS5cbiAqICAgIGxvZy5sZXZlbHMoKSAtPiBbVFJBQ0UsIElORk9dXG4gKlxuICogICAgLy8gUmV0dXJucyBhIGxldmVsIG9mIHRoZSBpZGVudGlmaWVkIHN0cmVhbS5cbiAqICAgIGxvZy5sZXZlbHMoMCkgLT4gVFJBQ0UgICAgICAvLyBsZXZlbCBvZiBzdHJlYW0gYXQgaW5kZXggMFxuICogICAgbG9nLmxldmVscygnZm9vJykgICAgICAgICAgIC8vIGxldmVsIG9mIHN0cmVhbSB3aXRoIG5hbWUgJ2ZvbydcbiAqXG4gKiBTZXQgVXNhZ2U6XG4gKiAgICBsb2cubGV2ZWxzKDAsIElORk8pICAgICAgICAgLy8gc2V0IGxldmVsIG9mIHN0cmVhbSAwIHRvIElORk9cbiAqICAgIGxvZy5sZXZlbHMoMCwgJ2luZm8nKSAgICAgICAvLyBjYW4gdXNlICdpbmZvJyBldCBhbCBhbGlhc2VzXG4gKiAgICBsb2cubGV2ZWxzKCdmb28nLCBXQVJOKSAgICAgLy8gc2V0IHN0cmVhbSBuYW1lZCAnZm9vJyB0byBXQVJOXG4gKlxuICogU3RyZWFtIG5hbWVzOiBXaGVuIHN0cmVhbXMgYXJlIGRlZmluZWQsIHRoZXkgY2FuIG9wdGlvbmFsbHkgYmUgZ2l2ZW5cbiAqIGEgbmFtZS4gRm9yIGV4YW1wbGUsXG4gKiAgICAgICBsb2cgPSBuZXcgTG9nZ2VyKHtcbiAqICAgICAgICAgc3RyZWFtczogW1xuICogICAgICAgICAgIHtcbiAqICAgICAgICAgICAgIG5hbWU6ICdmb28nLFxuICogICAgICAgICAgICAgcGF0aDogJy92YXIvbG9nL215LXNlcnZpY2UvZm9vLmxvZydcbiAqICAgICAgICAgICAgIGxldmVsOiAndHJhY2UnXG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgLi4uXG4gKlxuICogQHBhcmFtIG5hbWUge1N0cmluZ3xOdW1iZXJ9IFRoZSBzdHJlYW0gaW5kZXggb3IgbmFtZS5cbiAqIEBwYXJhbSB2YWx1ZSB7TnVtYmVyfFN0cmluZ30gVGhlIGxldmVsIHZhbHVlIChJTkZPKSBvciBhbGlhcyAoJ2luZm8nKS5cbiAqICAgIElmIG5vdCBnaXZlbiwgdGhpcyBpcyBhICdnZXQnIG9wZXJhdGlvbi5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBubyBzdHJlYW0gd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqL1xuTG9nZ2VyLnByb3RvdHlwZS5sZXZlbHMgPSBmdW5jdGlvbiBsZXZlbHMobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbXMubWFwKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5sZXZlbDtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgc3RyZWFtO1xuICAgIGlmICh0eXBlb2YgKG5hbWUpID09PSAnbnVtYmVyJykge1xuICAgICAgICBzdHJlYW0gPSB0aGlzLnN0cmVhbXNbbmFtZV07XG4gICAgICAgIGlmIChzdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHN0cmVhbSBpbmRleDogJyArIG5hbWUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuc3RyZWFtcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzID0gdGhpcy5zdHJlYW1zW2ldO1xuICAgICAgICAgICAgaWYgKHMubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIHN0cmVhbSA9IHM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdHJlYW0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ25vIHN0cmVhbSB3aXRoIG5hbWUgXCIlc1wiJywgbmFtZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdHJlYW0ubGV2ZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5ld0xldmVsID0gcmVzb2x2ZUxldmVsKHZhbHVlKTtcbiAgICAgICAgc3RyZWFtLmxldmVsID0gbmV3TGV2ZWw7XG4gICAgICAgIGlmIChuZXdMZXZlbCA8IHRoaXMuX2xldmVsKSB7XG4gICAgICAgICAgICB0aGlzLl9sZXZlbCA9IG5ld0xldmVsO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vKipcbiAqIEFwcGx5IHJlZ2lzdGVyZWQgc2VyaWFsaXplcnMgdG8gdGhlIGFwcHJvcHJpYXRlIGtleXMgaW4gdGhlIGdpdmVuIGZpZWxkcy5cbiAqXG4gKiBQcmUtY29uZGl0aW9uOiBUaGlzIGlzIG9ubHkgY2FsbGVkIGlmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBzZXJpYWxpemVyLlxuICpcbiAqIEBwYXJhbSBmaWVsZHMgKE9iamVjdCkgVGhlIGxvZyByZWNvcmQgZmllbGRzLlxuICogQHBhcmFtIGV4Y2x1ZGVGaWVsZHMgKE9iamVjdCkgT3B0aW9uYWwgbWFwcGluZyBvZiBrZXlzIHRvIGB0cnVlYCBmb3JcbiAqICAgIGtleXMgdG8gTk9UIGFwcGx5IGEgc2VyaWFsaXplci5cbiAqL1xuTG9nZ2VyLnByb3RvdHlwZS5fYXBwbHlTZXJpYWxpemVycyA9IGZ1bmN0aW9uIChmaWVsZHMsIGV4Y2x1ZGVGaWVsZHMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBDaGVjayBlYWNoIHNlcmlhbGl6ZXIgYWdhaW5zdCB0aGVzZSAocHJlc3VtaW5nIG51bWJlciBvZiBzZXJpYWxpemVyc1xuICAgIC8vIGlzIHR5cGljYWxseSBsZXNzIHRoYW4gbnVtYmVyIG9mIGZpZWxkcykuXG4gICAgT2JqZWN0LmtleXModGhpcy5zZXJpYWxpemVycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAoZmllbGRzW25hbWVdID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIChleGNsdWRlRmllbGRzICYmIGV4Y2x1ZGVGaWVsZHNbbmFtZV0pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpZWxkc1tuYW1lXSA9IHNlbGYuc2VyaWFsaXplcnNbbmFtZV0oZmllbGRzW25hbWVdKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfd2Fybihmb3JtYXQoJ2J1bnlhbjogRVJST1I6IEV4Y2VwdGlvbiB0aHJvd24gZnJvbSB0aGUgXCIlc1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAnQnVueWFuIHNlcmlhbGl6ZXIuIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbi4gVGhpcyBpcyBhIGJ1ZycgK1xuICAgICAgICAgICAgICAgICAgICAnaW4gdGhhdCBzZXJpYWxpemVyIGZ1bmN0aW9uLlxcbiVzJyxcbiAgICAgICAgICAgICAgICBuYW1lLCBlcnIuc3RhY2sgfHwgZXJyKSk7XG4gICAgICAgICAgICBmaWVsZHNbbmFtZV0gPSBmb3JtYXQoJyhFcnJvciBpbiBCdW55YW4gbG9nIFwiJXNcIiBzZXJpYWxpemVyIGJyb2tlIGZpZWxkLiBTZWUgc3RkZXJyIGZvciBkZXRhaWxzLiknLCBuYW1lKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuXG4vKipcbiAqIEVtaXQgYSBsb2cgcmVjb3JkLlxuICpcbiAqIEBwYXJhbSByZWMge2xvZyByZWNvcmR9XG4gKiBAcGFyYW0gbm9lbWl0IHtCb29sZWFufSBPcHRpb25hbC4gU2V0IHRvIHRydWUgdG8gc2tpcCBlbWlzc2lvblxuICogICAgICBhbmQganVzdCByZXR1cm4gdGhlIEpTT04gc3RyaW5nLlxuICovXG5Mb2dnZXIucHJvdG90eXBlLl9lbWl0ID0gZnVuY3Rpb24gKHJlYywgbm9lbWl0KSB7XG4gICAgdmFyIGk7XG5cbiAgICAvLyBMYXppbHkgZGV0ZXJtaW5lIGlmIHRoaXMgTG9nZ2VyIGhhcyBub24tJ3Jhdycgc3RyZWFtcy4gSWYgdGhlcmUgYXJlXG4gICAgLy8gYW55LCB0aGVuIHdlIG5lZWQgdG8gc3RyaW5naWZ5IHRoZSBsb2cgcmVjb3JkLlxuICAgIGlmICh0aGlzLmhhdmVOb25SYXdTdHJlYW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5oYXZlTm9uUmF3U3RyZWFtcyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zdHJlYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RyZWFtc1tpXS5yYXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhdmVOb25SYXdTdHJlYW1zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN0cmluZ2lmeSB0aGUgb2JqZWN0LiBBdHRlbXB0IHRvIHdhcm4vcmVjb3ZlciBvbiBlcnJvci5cbiAgICB2YXIgc3RyO1xuICAgIGlmIChub2VtaXQgfHwgdGhpcy5oYXZlTm9uUmF3U3RyZWFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RyID0gSlNPTi5zdHJpbmdpZnkocmVjLCBzYWZlQ3ljbGVzKCkpICsgJ1xcbic7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHZhciBkZWR1cEtleSA9IGUuc3RhY2suc3BsaXQoL1xcbi9nLCAyKS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgIF93YXJuKCdidW55YW46IEVSUk9SOiBFeGNlcHRpb24gaW4gJyArXG4gICAgICAgICAgICAgICAgICAgICdgSlNPTi5zdHJpbmdpZnkocmVjKWAuIFlvdSBjYW4gaW5zdGFsbCB0aGUgJyArXG4gICAgICAgICAgICAgICAgICAgICdcInNhZmUtanNvbi1zdHJpbmdpZnlcIiBtb2R1bGUgdG8gaGF2ZSBCdW55YW4gZmFsbGJhY2sgJyArXG4gICAgICAgICAgICAgICAgICAgICd0byBzYWZlciBzdHJpbmdpZmljYXRpb24uIFJlY29yZDpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgX2luZGVudChmb3JtYXQoJyVzXFxuJXMnLCByZWMsIGUuc3RhY2spKSxcbiAgICAgICAgICAgICAgICBkZWR1cEtleSk7XG4gICAgICAgICAgICBzdHIgPSBmb3JtYXQoJyhFeGNlcHRpb24gaW4gSlNPTi5zdHJpbmdpZnkocmVjKTogJWouIFNlZSBzdGRlcnIgZm9yIGRldGFpbHMuKVxcbicsIGUubWVzc2FnZSk7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2VtaXQpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cblxuICAgIHZhciBsZXZlbCA9IHJlYy5sZXZlbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zdHJlYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5zdHJlYW1zW2ldO1xuICAgICAgICBpZiAocy5sZXZlbCA8PSBsZXZlbCkge1xuICAgICAgICAgICAgcy5zdHJlYW0ud3JpdGUocy5yYXcgPyByZWMgOiBzdHIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiBCdWlsZCBhIGxvZyBlbWl0dGVyIGZ1bmN0aW9uIGZvciBsZXZlbCBtaW5MZXZlbC4gSS5lLiB0aGlzIGlzIHRoZVxuICogY3JlYXRvciBvZiBgbG9nLmluZm9gLCBgbG9nLmVycm9yYCwgZXRjLlxuICovXG5mdW5jdGlvbiBta0xvZ0VtaXR0ZXIobWluTGV2ZWwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbG9nID0gdGhpcztcblxuICAgICAgICBmdW5jdGlvbiBta1JlY29yZChhcmdzKSB7XG4gICAgICAgICAgICB2YXIgZXhjbHVkZUZpZWxkcztcbiAgICAgICAgICAgIGlmIChhcmdzWzBdIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBgbG9nLjxsZXZlbD4oZXJyLCAuLi4pYFxuICAgICAgICAgICAgICAgIGZpZWxkcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoaXMgTG9nZ2VyJ3MgZXJyIHNlcmlhbGl6ZXIsIGlmIGRlZmluZWQuXG4gICAgICAgICAgICAgICAgICAgIGVycjogKGxvZy5zZXJpYWxpemVycyAmJiBsb2cuc2VyaWFsaXplcnMuZXJyID8gbG9nLnNlcmlhbGl6ZXJzLmVycihhcmdzWzBdKSA6IExvZ2dlci5zdGRTZXJpYWxpemVycy5lcnIoYXJnc1swXSkpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleGNsdWRlRmllbGRzID0ge2VycjogdHJ1ZX07XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZ0FyZ3MgPSBbZmllbGRzLmVyci5tZXNzYWdlXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtc2dBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgKGFyZ3NbMF0pICE9PSAnb2JqZWN0JyAmJiBhcmdzWzBdICE9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgICAgICAgICAgIC8vIGBsb2cuPGxldmVsPihtc2csIC4uLilgXG4gICAgICAgICAgICAgICAgZmllbGRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICBtc2dBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG4gICAgICAgICAgICB9IGVsc2UgeyAgLy8gYGxvZy48bGV2ZWw+KGZpZWxkcywgbXNnLCAuLi4pYFxuICAgICAgICAgICAgICAgIGZpZWxkcyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgbXNnQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBCdWlsZCB1cCB0aGUgcmVjb3JkIG9iamVjdC5cbiAgICAgICAgICAgIHZhciByZWMgPSBvYmpDb3B5KGxvZy5maWVsZHMpO1xuICAgICAgICAgICAgcmVjLmxldmVsID0gbWluTGV2ZWw7XG4gICAgICAgICAgICB2YXIgcmVjRmllbGRzID0gKGZpZWxkcyA/IG9iakNvcHkoZmllbGRzKSA6IG51bGwpO1xuICAgICAgICAgICAgaWYgKHJlY0ZpZWxkcykge1xuICAgICAgICAgICAgICAgIGlmIChsb2cuc2VyaWFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLl9hcHBseVNlcmlhbGl6ZXJzKHJlY0ZpZWxkcywgZXhjbHVkZUZpZWxkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlY0ZpZWxkcykuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICAgICAgICByZWNba10gPSByZWNGaWVsZHNba107XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWMubGV2ZWxOYW1lID0gbmFtZUZyb21MZXZlbFttaW5MZXZlbF07XG4gICAgICAgICAgICByZWMubXNnID0gZm9ybWF0LmFwcGx5KGxvZywgbXNnQXJncyk7XG4gICAgICAgICAgICBpZiAoIXJlYy50aW1lKSB7XG4gICAgICAgICAgICAgICAgcmVjLnRpbWUgPSAobmV3IERhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgY2FsbCBzb3VyY2UgaW5mb1xuICAgICAgICAgICAgaWYgKGxvZy5zcmMgJiYgIXJlYy5zcmMpIHtcbiAgICAgICAgICAgICAgICByZWMuc3JjID0gZ2V0Q2FsbGVyM0luZm8oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYy52ID0gTE9HX1ZFUlNJT047XG5cbiAgICAgICAgICAgIHJldHVybiByZWM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmllbGRzID0gbnVsbDtcbiAgICAgICAgdmFyIG1zZ0FyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHZhciByZWMgPSBudWxsO1xuICAgICAgICBpZiAoIXRoaXMuX2VtaXQpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBTaG93IHRoaXMgaW52YWxpZCBCdW55YW4gdXNhZ2Ugd2FybmluZyAqb25jZSouXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogU2VlIDxodHRwczovL2dpdGh1Yi5jb20vdHJlbnRtL25vZGUtYnVueWFuL2lzc3Vlcy8xMDA+IGZvclxuICAgICAgICAgICAgICogYW4gZXhhbXBsZSBvZiBob3cgdGhpcyBjYW4gaGFwcGVuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZGVkdXBLZXkgPSAndW5ib3VuZCc7XG4gICAgICAgICAgICBpZiAoIV9oYXZlV2FybmVkW2RlZHVwS2V5XSkge1xuICAgICAgICAgICAgICAgIHZhciBjYWxsZXIgPSBnZXRDYWxsZXIzSW5mbygpO1xuICAgICAgICAgICAgICAgIF93YXJuKGZvcm1hdCgnYnVueWFuIHVzYWdlIGVycm9yOiAlczolczogYXR0ZW1wdCB0byBsb2cgd2l0aCBhbiB1bmJvdW5kIGxvZyBtZXRob2Q6IGB0aGlzYCBpczogJXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyLmZpbGUsIGNhbGxlci5saW5lLCB0aGlzLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICBkZWR1cEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgeyAgIC8vIGBsb2cuPGxldmVsPigpYFxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9sZXZlbCA8PSBtaW5MZXZlbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbGV2ZWwgPiBtaW5MZXZlbCkge1xuICAgICAgICAgICAgLyogcGFzcyB0aHJvdWdoICovXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWMgPSBta1JlY29yZChtc2dBcmdzKTtcbiAgICAgICAgICAgIHRoaXMuX2VtaXQocmVjKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cblxuLyoqXG4gKiBUaGUgZnVuY3Rpb25zIGJlbG93IGxvZyBhIHJlY29yZCBhdCBhIHNwZWNpZmljIGxldmVsLlxuICpcbiAqIFVzYWdlczpcbiAqICAgIGxvZy48bGV2ZWw+KCkgIC0+IGJvb2xlYW4gaXMtdHJhY2UtZW5hYmxlZFxuICogICAgbG9nLjxsZXZlbD4oPEVycm9yPiBlcnIsIFs8c3RyaW5nPiBtc2csIC4uLl0pXG4gKiAgICBsb2cuPGxldmVsPig8c3RyaW5nPiBtc2csIC4uLilcbiAqICAgIGxvZy48bGV2ZWw+KDxvYmplY3Q+IGZpZWxkcywgPHN0cmluZz4gbXNnLCAuLi4pXG4gKlxuICogd2hlcmUgPGxldmVsPiBpcyB0aGUgbG93ZXJjYXNlIHZlcnNpb24gb2YgdGhlIGxvZyBsZXZlbC4gRS5nLjpcbiAqXG4gKiAgICBsb2cuaW5mbygpXG4gKlxuICogQHBhcmFtcyBmaWVsZHMge09iamVjdH0gT3B0aW9uYWwgc2V0IG9mIGFkZGl0aW9uYWwgZmllbGRzIHRvIGxvZy5cbiAqIEBwYXJhbXMgbXNnIHtTdHJpbmd9IExvZyBtZXNzYWdlLiBUaGlzIGNhbiBiZSBmb2xsb3dlZCBieSBhZGRpdGlvbmFsXG4gKiAgICBhcmd1bWVudHMgdGhhdCBhcmUgaGFuZGxlZCBsaWtlXG4gKiAgICBbdXRpbC5mb3JtYXRdKGh0dHA6Ly9ub2RlanMub3JnL2RvY3MvbGF0ZXN0L2FwaS9hbGwuaHRtbCN1dGlsLmZvcm1hdCkuXG4gKi9cbkxvZ2dlci5wcm90b3R5cGUudHJhY2UgPSBta0xvZ0VtaXR0ZXIoVFJBQ0UpO1xuTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IG1rTG9nRW1pdHRlcihERUJVRyk7XG5Mb2dnZXIucHJvdG90eXBlLmluZm8gPSBta0xvZ0VtaXR0ZXIoSU5GTyk7XG5Mb2dnZXIucHJvdG90eXBlLndhcm4gPSBta0xvZ0VtaXR0ZXIoV0FSTik7XG5Mb2dnZXIucHJvdG90eXBlLmVycm9yID0gbWtMb2dFbWl0dGVyKEVSUk9SKTtcbkxvZ2dlci5wcm90b3R5cGUuZmF0YWwgPSBta0xvZ0VtaXR0ZXIoRkFUQUwpO1xuXG5cbi8vLS0tLSBTdGFuZGFyZCBzZXJpYWxpemVyc1xuLy8gQSBzZXJpYWxpemVyIGlzIGEgZnVuY3Rpb24gdGhhdCBzZXJpYWxpemVzIGEgSmF2YVNjcmlwdCBvYmplY3QgdG8gYVxuLy8gSlNPTiByZXByZXNlbnRhdGlvbiBmb3IgbG9nZ2luZy4gVGhlcmUgaXMgYSBzdGFuZGFyZCBzZXQgb2YgcHJlc3VtZWRcbi8vIGludGVyZXN0aW5nIG9iamVjdHMgaW4gbm9kZS5qcy1sYW5kLlxuXG5Mb2dnZXIuc3RkU2VyaWFsaXplcnMgPSB7fTtcblxuLypcbiAqIFRoaXMgZnVuY3Rpb24gZHVtcHMgbG9uZyBzdGFjayB0cmFjZXMgZm9yIGV4Y2VwdGlvbnMgaGF2aW5nIGEgY2F1c2UoKVxuICogbWV0aG9kLiBUaGUgZXJyb3IgY2xhc3NlcyBmcm9tXG4gKiBbdmVycm9yXShodHRwczovL2dpdGh1Yi5jb20vZGF2ZXBhY2hlY28vbm9kZS12ZXJyb3IpIGFuZFxuICogW3Jlc3RpZnkgdjIuMF0oaHR0cHM6Ly9naXRodWIuY29tL21jYXZhZ2Uvbm9kZS1yZXN0aWZ5KSBhcmUgZXhhbXBsZXMuXG4gKlxuICogQmFzZWQgb24gYGR1bXBFeGNlcHRpb25gIGluXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGF2ZXBhY2hlY28vbm9kZS1leHRzcHJpbnRmL2Jsb2IvbWFzdGVyL2xpYi9leHRzcHJpbnRmLmpzXG4gKi9cbmZ1bmN0aW9uIGdldEZ1bGxFcnJvclN0YWNrKGV4KSB7XG4gICAgdmFyIHJldCA9IGV4LnN0YWNrIHx8IGV4LnRvU3RyaW5nKCk7XG4gICAgaWYgKGV4LmNhdXNlICYmIHR5cGVvZiAoZXguY2F1c2UpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBjZXggPSBleC5jYXVzZSgpO1xuICAgICAgICBpZiAoY2V4KSB7XG4gICAgICAgICAgICByZXQgKz0gJ1xcbkNhdXNlZCBieTogJyArIGdldEZ1bGxFcnJvclN0YWNrKGNleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChyZXQpO1xufVxuXG4vLyBTZXJpYWxpemUgYW4gRXJyb3Igb2JqZWN0XG4vLyAoQ29yZSBlcnJvciBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhYmxlIGluIG5vZGUgMC40LCBub3QgaW4gMC42KS5cbkxvZ2dlci5zdGRTZXJpYWxpemVycy5lcnIgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAoIWVyciB8fCAhZXJyLnN0YWNrKSB7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgdmFyIG9iaiA9IHtcbiAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgIG5hbWU6IGVyci5uYW1lLFxuICAgICAgICBzdGFjazogZ2V0RnVsbEVycm9yU3RhY2soZXJyKSxcbiAgICAgICAgY29kZTogZXJyLmNvZGUsXG4gICAgICAgIHNpZ25hbDogZXJyLnNpZ25hbFxuICAgIH07XG4gICAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gQSBKU09OIHN0cmluZ2lmaWVyIHRoYXQgaGFuZGxlcyBjeWNsZXMgc2FmZWx5LlxuLy8gVXNhZ2U6IEpTT04uc3RyaW5naWZ5KG9iaiwgc2FmZUN5Y2xlcygpKVxuZnVuY3Rpb24gc2FmZUN5Y2xlcygpIHtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgaWYgKCF2YWwgfHwgdHlwZW9mICh2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Vlbi5pbmRleE9mKHZhbCkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICAgIHNlZW4ucHVzaCh2YWwpO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH07XG59XG5cbi8vLS0tLSBFeHBvcnRzXG5cbm1vZHVsZS5leHBvcnRzID0gTG9nZ2VyO1xuXG5tb2R1bGUuZXhwb3J0cy5UUkFDRSA9IFRSQUNFO1xubW9kdWxlLmV4cG9ydHMuREVCVUcgPSBERUJVRztcbm1vZHVsZS5leHBvcnRzLklORk8gPSBJTkZPO1xubW9kdWxlLmV4cG9ydHMuV0FSTiA9IFdBUk47XG5tb2R1bGUuZXhwb3J0cy5FUlJPUiA9IEVSUk9SO1xubW9kdWxlLmV4cG9ydHMuRkFUQUwgPSBGQVRBTDtcbm1vZHVsZS5leHBvcnRzLnJlc29sdmVMZXZlbCA9IHJlc29sdmVMZXZlbDtcbm1vZHVsZS5leHBvcnRzLmxldmVsRnJvbU5hbWUgPSBsZXZlbEZyb21OYW1lO1xubW9kdWxlLmV4cG9ydHMubmFtZUZyb21MZXZlbCA9IG5hbWVGcm9tTGV2ZWw7XG5cbm1vZHVsZS5leHBvcnRzLlZFUlNJT04gPSBWRVJTSU9OO1xubW9kdWxlLmV4cG9ydHMuTE9HX1ZFUlNJT04gPSBMT0dfVkVSU0lPTjtcblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlTG9nZ2VyID0gZnVuY3Rpb24gY3JlYXRlTG9nZ2VyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IExvZ2dlcihvcHRpb25zKTtcbn07XG5cbi8vIFVzZWZ1bCBmb3IgY3VzdG9tIGB0eXBlID09ICdyYXcnYCBzdHJlYW1zIHRoYXQgbWF5IGRvIEpTT04gc3RyaW5naWZpY2F0aW9uXG4vLyBvZiBsb2cgcmVjb3JkcyB0aGVtc2VsdmVzLiBVc2FnZTpcbi8vICAgIHZhciBzdHIgPSBKU09OLnN0cmluZ2lmeShyZWMsIGJ1bnlhbi5zYWZlQ3ljbGVzKCkpO1xubW9kdWxlLmV4cG9ydHMuc2FmZUN5Y2xlcyA9IHNhZmVDeWNsZXM7XG5cbi8vc3RyZWFtc1xubW9kdWxlLmV4cG9ydHMuQ29uc29sZUZvcm1hdHRlZFN0cmVhbSA9IENvbnNvbGVGb3JtYXR0ZWRTdHJlYW07XG5tb2R1bGUuZXhwb3J0cy5Db25zb2xlUmF3U3RyZWFtID0gQ29uc29sZVJhd1N0cmVhbTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYnJvd3Nlci1idW55YW4vbGliL2J1bnlhbi5qc1xuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBhbkluc3RhbmNlICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJylcbiAgLCBzdGVwICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgZmFzdEtleSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleVxuICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbih0aGF0LCBrZXkpe1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpLCBlbnRyeTtcbiAgaWYoaW5kZXggIT09ICdGJylyZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKXtcbiAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYoZW50cnkucCllbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5cbiAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZih0aGF0Ll9mID09IGVudHJ5KXRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmKHRoYXQuX2wgPT0gZW50cnkpdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKVxuICAgICAgICAgICwgZW50cnk7XG4gICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBkZWZpbmVkKHRoaXNbU0laRV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcbiAgICAgICwgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYoZW50cnkpe1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYoIXRoYXQuX2YpdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApe1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICB0aGlzLl90ID0gaXRlcmF0ZWQ7ICAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7IC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgLCBraW5kICA9IHRoYXQuX2tcbiAgICAgICAgLCBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpe1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanNcbi8vIG1vZHVsZSBpZCA9IDk2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgZnJvbSAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKXtcbiAgICBpZihjbGFzc29mKHRoaXMpICE9IE5BTUUpdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpe1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoKGUpe1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7XG4gIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuLy8gbW9kdWxlIGlkID0gMTA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgdmFyIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZlxuICAgICwgaXNFbnVtICAgICA9IHBJRS5mO1xuICB3aGlsZShhTGVuID4gaW5kZXgpe1xuICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpXG4gICwgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKXtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanNcbi8vIG1vZHVsZSBpZCA9IDEwN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gdHlwZW9mIGNvcmVbS0VZXSA9PSAnZnVuY3Rpb24nID8gY29yZVtLRVldIDogZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDEwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBpbnZva2UgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGh0bWwgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsXG4gICwgY291bnRlciAgICAgICAgICAgID0gMFxuICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9XG4gICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgaWQgPSArdGhpcztcbiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpe1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighc2V0VGFzayB8fCAhY2xlYXJUYXNrKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbil7XG4gICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXtcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCl7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYoTWVzc2FnZUNoYW5uZWwpe1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiAgIHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBNYWluIGVudHJ5IG9mIFNESywgYWNjZXNzaWJsZSBvbiB0aGUgYHdpbmRvd2AgZ2xvYmFsIGF0IGByZWQ1cHJvc2RrYC5cbiAqXG4gKiBAZmlsZSByZWQ1cHJvLm1pbi5qc1xuICogQG1vZHVsZSByZWQ1cHJvc2RrXG4gKlxuICpcbiAqL1xuXG4vLyBTREtfVkVSU0lPTiwgTE9HX0xFVkVMIGluamVjdGVkIGZyb20gd2VicGFjayBidWlsZC5cbmltcG9ydCB7IExFVkVMUywgZXN0YWJsaXNoTG9nZ2VyIH0gZnJvbSAnLi9sb2cnXG5pbXBvcnQgeyBnZXRMb2dnZXIgYXMgX2dldExvZ2dlciB9IGZyb20gJy4vbG9nJ1xuaW1wb3J0ICogYXMgc3Vic2NyaWJlckxpYiBmcm9tICcuL3N1YnNjcmliZXIvaW5kZXgnXG5pbXBvcnQgKiBhcyBwdWJsaXNoZXJMaWIgZnJvbSAnLi9wdWJsaXNoZXIvaW5kZXgnXG5pbXBvcnQgKiBhcyBzaGFyZWRPYmplY3RMaWIgZnJvbSAnLi9zaGFyZWRvYmplY3QvaW5kZXgnXG5pbXBvcnQgKiBhcyBwbGF5YmFja0VudW0gZnJvbSAnLi9lbnVtL3BsYXliYWNrJ1xuaW1wb3J0ICogYXMgd2VicnRjRW51bSBmcm9tICcuL2VudW0vd2VicnRjJ1xuaW1wb3J0ICogYXMgcHVibGlzaGVyRXZlbnQgZnJvbSAnLi9ldmVudC9wdWJsaXNoZXItZXZlbnQnXG5pbXBvcnQgKiBhcyBzdWJzY3JpYmVyRXZlbnQgZnJvbSAnLi9ldmVudC9zdWJzY3JpYmVyLWV2ZW50J1xuaW1wb3J0ICogYXMgc2hhcmVkb2JqZWN0RXZlbnQgZnJvbSAnLi9ldmVudC9zaGFyZWRvYmplY3QtZXZlbnQnXG5pbXBvcnQgUGxheWJhY2tWaWV3IGZyb20gJy4vdmlldy9wbGF5YmFjaydcbmltcG9ydCBQdWJsaXNoZXJWaWV3IGZyb20gJy4vdmlldy9wdWJsaXNoJ1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAqL1xuLyogU3Vic2NyaXB0aW9uIHJlbGF0ZWQgcmVmZXJlbmNlcy4gKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICovXG5cbi8qKlxuICogVGhlIGZhaWwtb3ZlciBlbmFibGVkIFN1YnNjcmliZXIgRmFjdG9yeS5cbiAqIEBzZWUgUmVkNVByb1N1YnNjcmliZXJcbiAqL1xuZXhwb3J0IGNvbnN0IFJlZDVQcm9TdWJzY3JpYmVyID0gc3Vic2NyaWJlckxpYi5SZWQ1UHJvU3Vic2NyaWJlclxuLyoqXG4gKiBUaGUgV2ViUlRDIGJhc2VkIFN1YnNjcmliZXIuXG4gKlxuICogQW4gaW5zdGFuY2Ugb2YgYFJUQ1N1YnNjcmliZXJgIGNhbiBiZSBjcmVhdGVkIGV4cGxpY2l0bHkgdXNpbmcgdGhpcyBjbGFzcywgb3IgYnkgdGhlIGBSZWQ1UHJvU3Vic2NyaWJlcmAgZmFpbC1vdmVyIGZhY3RvcnkuXG4gKiBAc2VlIFJUQ1N1YnNjcmliZXJcbiAqL1xuZXhwb3J0IGNvbnN0IFJUQ1N1YnNjcmliZXIgPSBzdWJzY3JpYmVyTGliLlJUQ1N1YnNjcmliZXJcbi8qKlxuICogVGhlIEZsYXNoICh1dGlsaXppbmcgUlRNUCBwcm90b2NvbCkgYmFzZWQgU3Vic2NyaWJlci5cbiAqXG4gKiBBbiBpbnN0YW5jZSBvZiBgUlRNUFN1YnNjcmliZXJgIGNhbiBiZSBjcmVhdGVkIGV4cGxpY2l0bHkgdXNpbmcgdGhpcyBjbGFzcywgb3IgYnkgdGhlIGBSZWQ1UHJvU3Vic2NyaWJlcmAgZmFpbC1vdmVyIGZhY3RvcnkuXG4gKiBAc2VlIFJUTVBTdWJzY3JpYmVyXG4gKi9cbmV4cG9ydCBjb25zdCBSVE1QU3Vic2NyaWJlciA9IHN1YnNjcmliZXJMaWIuUlRNUFN1YnNjcmliZXJcbi8qKlxuICogVGhlIEhMUyAoSFRUUCBMaXZlIFN0cmVhbSkgYmFzZWQgU3Vic2NyaWJlci5cbiAqXG4gKiBBbiBpbnN0YW5jZSBvZiBgSExTU3Vic2NyaWJlcmAgY2FuIGJlIGNyZWF0ZWQgZXhwbGljaXRseSB1c2luZyB0aGlzIGNsYXNzLCBvciBieSB0aGUgYFJlZDVQcm9TdWJzY3JpYmVyYCBmYWlsLW92ZXIgZmFjdG9yeS5cbiAqIEBzZWUgSExTU3Vic2NyaWJlclxuICovXG5leHBvcnQgY29uc3QgSExTU3Vic2NyaWJlciA9IHN1YnNjcmliZXJMaWIuSExTU3Vic2NyaWJlclxuLyoqXG4gKiBTdGlsbCB1c2VkLCBidXQgQVBJLWRlcHJlY2F0ZWQgVmlldyBpbnN0YW5jZSBmb3IgcGxheWJhY2suIEhhcyBkZWZhdWx0IHNldHVwIGluIHZlcnNpb24gNC4wLjAuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgeyBQbGF5YmFja1ZpZXcgfVxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAqL1xuLyogQnJvYWRjYXN0IHJlbGF0ZWQgcmVmZXJlbmNlcy4gKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICovXG5cbi8qKlxuICogVGhlIGZhaWwtb3ZlciBlbmFibGVkIFB1Ymxpc2hlciBGYWN0b3J5LlxuICogQHNlZSBSZWQ1UHJvUHVibGlzaGVyXG4gKi9cbmV4cG9ydCBjb25zdCBSZWQ1UHJvUHVibGlzaGVyID0gcHVibGlzaGVyTGliLlJlZDVQcm9QdWJsaXNoZXJcbi8qKlxuICogVGhlIFdlYlJUQyBiYXNlZCBQdWJsaXNoZXIuPGJyPkFuIGluc3RhbmNlIG9mIGBSVENQdWJsaXNoZXJgIGNhbiBiZSBjcmVhdGVkIGV4cGxpY2l0bHkgdXNpbmcgdGhpcyBjbGFzcywgb3IgYnkgdGhlIGBSZWQ1UHJvUHVibGlzaGVyYCBmYWlsLW92ZXIgZmFjdG9yeS5cbiAqIEBzZWUgUlRDUHVibGlzaGVyXG4gKi9cbmV4cG9ydCBjb25zdCBSVENQdWJsaXNoZXIgPSBwdWJsaXNoZXJMaWIuUlRDUHVibGlzaGVyXG4vKipcbiAqIFRoZSBGbGFzaCAodXRpbGl6aW5nIFJUTVAgcHJvdG9jb2wpIGJhc2VkIFB1Ymxpc2hlci5cbiAqXG4gKiBBbiBpbnN0YW5jZSBvZiBgUlRNUFB1Ymxpc2hlcmAgY2FuIGJlIGNyZWF0ZWQgZXhwbGljaXRseSB1c2luZyB0aGlzIGNsYXNzLCBvciBieSB0aGUgYFJlZDVQcm9QdWJsaXNoZXJgIGZhaWwtb3ZlciBmYWN0b3J5LlxuICogQHNlZSBSVE1QUHVibGlzaGVyXG4gKi9cbmV4cG9ydCBjb25zdCBSVE1QUHVibGlzaGVyID0gcHVibGlzaGVyTGliLlJUTVBQdWJsaXNoZXJcbi8qKlxuICogU3RpbGwgdXNlZCwgYnV0IEFQSS1kZXByZWNhdGVkIFZpZXcgaW5zdGFuY2UgZm9yIGJyb2FkY2FzdC9wcmV2aWV3LiBIYXMgZGVmYXVsdCBzZXR1cCBpbiB2ZXJzaW9uIDQuMC4wLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IHsgUHVibGlzaGVyVmlldyB9XG5cbi8qIFBsYXliYWNrIGNvbnRyb2xzIGludGVyZmFjZS4gKi9cbmV4cG9ydCB7IFBsYXliYWNrQ29udHJvbHMgYXMgUGxheWJhY2tDb250cm9scyB9IGZyb20gJy4vc3Vic2NyaWJlci9jb250cm9scy9pbmRleCdcblxuLyogU2hhcmVkIE9iamVjdCByZWZlcmVuY2VzLiAqL1xuLyoqXG4gKiBUaGUgU2hhcmRPYmplY3QgY2xhc3MuXG4gKiBAc2VlIFJlZDVQcm9TaGFyZWRPYmplY3RcbiAqL1xuZXhwb3J0IGNvbnN0IFJlZDVQcm9TaGFyZWRPYmplY3QgPSBzaGFyZWRPYmplY3RMaWIuUmVkNVByb1NoYXJlZE9iamVjdFxuXG4vKiBFdmVudHMgKi9cbi8qKlxuICogRW51bWVyYXRpb24gb2YgY29tbW9uIFB1Ymxpc2hlciBFdmVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBQdWJsaXNoZXJFdmVudFR5cGVzID0gcHVibGlzaGVyRXZlbnQuUHVibGlzaGVyRXZlbnRUeXBlc1xuLyoqXG4gKiBFbnVlcmF0aW9uIG9mIGV2ZW50cyBzcGVjaWZpYyB0byBXZWJSVEMtYmFzZWQgUHVibGlzaGVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IFJUQ1B1Ymxpc2hlckV2ZW50VHlwZXMgPSBwdWJsaXNoZXJFdmVudC5SVENQdWJsaXNoZXJFdmVudFR5cGVzXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIGV2ZW50cyBzcGVjaWZpYyB0byBmYWlsLW92ZXIgUHVibGlzaGVyIGZhY3RvcnkuXG4gKi9cbmV4cG9ydCBjb25zdCBGYWlsb3ZlclB1Ymxpc2hlckV2ZW50VHlwZXMgPSBwdWJsaXNoZXJFdmVudC5GYWlsb3ZlclB1Ymxpc2hlckV2ZW50VHlwZXNcbi8qKlxuICogRW51bWVyYWl0b24gb2YgY29tbW9uIFN1YnNjcmliZXIgRXZlbnRzLlxuICovXG5leHBvcnQgY29uc3QgU3Vic2NyaWJlckV2ZW50VHlwZXMgPSBzdWJzY3JpYmVyRXZlbnQuU3Vic2NyaWJlckV2ZW50VHlwZXNcbi8qKlxuICogRW51bWVyYXRpb24gb2YgZXZlbnRzIHNwZWNpZmljIHRvIFdlYlJUQy1iYXNlZCBTdWJzY3JpYmVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IFJUQ1N1YnNjcmliZXJFdmVudFR5cGVzID0gc3Vic2NyaWJlckV2ZW50LlJUQ1N1YnNjcmliZXJFdmVudFR5cGVzXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIGV2ZW50cyBzcGVjaWZpYyB0byBSVE1QLWJhc2VkIFN1YnNjcmliZXJzLlxuICovXG5leHBvcnQgY29uc3QgUlRNUFN1YnNjcmliZXJFdmVudFR5cGVzID0gc3Vic2NyaWJlckV2ZW50LlJUQ1N1YnNjcmliZXJFdmVudFR5cGVzXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIGV2ZW50cyBzcGVjaWZpYyB0byBmYWlsLW92ZXIgU3Vic2NyaWJlciBmYWN0b3J5LlxuICovXG5leHBvcnQgY29uc3QgRmFpbG92ZXJTdWJzY3JpYmVyRXZlbnRUeXBlcyA9IHN1YnNjcmliZXJFdmVudC5GYWlsb3ZlclN1YnNjcmliZXJFdmVudFR5cGVzXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIGV2ZW50cyBmb3IgU2hhcmVkIE9iamVjdHMuXG4gKi9cbmV4cG9ydCBjb25zdCBTaGFyZWRPYmplY3RFdmVudFR5cGVzID0gc2hhcmVkb2JqZWN0RXZlbnQuU2hhcmVkT2JqZWN0RXZlbnRUeXBlc1xuXG4vKiBFbnVtcyAqL1xuLyoqXG4gKiBFbnVtZXJhdGUgQXVkaW8gRW5jb2RlciBvcHRpb25zIGZvciBTdWJzY3JpYmVycy5cbiAqICAqIGBPUFVTYFxuICogICogYFBDTVVgXG4gKiAgKiBgUENNQWBcbiAqICAqIGBTUEVFWGBcbiAqICAqIGBOT05FYFxuICovXG5leHBvcnQgY29uc3QgUGxheWJhY2tBdWRpb0VuY29kZXIgPSBwbGF5YmFja0VudW0uUGxheWJhY2tBdWRpb0VuY29kZXJcbi8qKlxuICogRW51bWVyYXRlZCBWaWRlbyBFbmNvZGVyIG9wdGlvbnMgZm9yIFN1YnNjcmliZXJzLlxuICogICogYFZQOGBcbiAqICAqIGBIMjY0YFxuICogICogYE5PTkVgXG4gKi9cbmV4cG9ydCBjb25zdCBQbGF5YmFja1ZpZGVvRW5jb2RlciA9IHBsYXliYWNrRW51bS5QbGF5YmFja1ZpZGVvRW5jb2RlclxuXG4vKipcbiAqIEVudW1lcmF0ZSBJQ0UgVHJhbnNwb3J0IG9wdGlvbnMgZm9yIFB1Ymxpc2hlcnMgYW5kIFN1YnNjcmliZXJzLlxuICogKiBgVURQYFxuICogKiBgVENQYFxuICovXG5leHBvcnQgY29uc3QgSWNlVHJhbnNwb3J0VHlwZXMgPSB3ZWJydGNFbnVtLkljZVRyYW5zcG9ydFR5cGVzXG5cbmVzdGFibGlzaExvZ2dlcihgJHtMT0dfTEVWRUx9YCB8fCBMRVZFTFMuREVCVUcpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuLyoqXG4gKiBTZXRzIHRoZSBsb2cgbGV2ZWwgZm9yIGxvZ3MgZnJvbSB0aGUgU0RLXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxcbiAqICAgIFRoZSBzcGVjaWZpZWQgbG9nIGxldmVsLlxuICogQHNlZSBMT0dfTEVWRUxTXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRMb2dMZXZlbCA9IChsZXZlbCkgPT4ge1xuICBpZiAoTEVWRUxTLmhhc093blByb3BlcnR5KGxldmVsLnRvVXBwZXJDYXNlKCkpKSB7XG4gICAgZXN0YWJsaXNoTG9nZ2VyKGxldmVsKVxuICAgIGlmIChjb25zb2xlKSB7XG4gICAgICBjb25zb2xlLmxvZyhgUmVkNSBQcm8gU0RLIFZlcnNpb24gJHtTREtfVkVSU0lPTn1gKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmLG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgZW51bWVyYXRlZCBsb2cgbGV2ZWwgU3RyaW5ncy5cbiAqICAgICogYFRSQUNFYFxuICogICAgKiBgSU5GT2BcbiAqICAgICogYERFQlVHYFxuICogICAgKiBgV0FSTmBcbiAqICAgICogYEVSUk9SYFxuICogICAgKiBgRkFUQUxgXG4gKi9cbmV4cG9ydCBjb25zdCBMT0dfTEVWRUxTID0gTEVWRUxTXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgTG9nZ2VyIGluc3RhbmNlIHVzZWQgYnkgdGhlIFNESy5cbiAqXG4gKiBAcmV0dXJucyB7TG9nZ2VyfVxuICogICAgICAgICAgVGhlIGxvZ2dlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldExvZ2dlciA9IF9nZXRMb2dnZXJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9pbmRleC5qcyIsIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBqc29uQXR0ciA9IC9bJ1wiXSguKj8pWydcIl06L2dpXG5jb25zdCBqc29uVmFsID0gLzpbJ1wiXSguKj8pWydcIl0vZ2lcblxuLyoqXG4gKiBSZWFkcyB0aGUgVVRGIHN0cmluZyBvZiB0aGUgZGF0YSBwYXNzZWQgaW4uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFxuICogQHBhcmFtIHtOdW1iZXJ9IGxlblxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqICAgICAgICAgVGhlIFBhcnNlZCBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWFkVVRGIChkYXRhLHN0YXJ0LGxlbikge1xuICBsZXQgcmVzdWx0ID0gJycsIG9mZnNldCA9IHN0YXJ0LCBlbmQgPSBzdGFydCArIGxlblxuICBkbyB7XG4gICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtvZmZzZXQrK10pXG4gIH1cbiAgd2hpbGUob2Zmc2V0IDwgZW5kKVxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogUGFyc2VzIGFuZCBpbnRlcnByZXRzIHRoZSBvcmllbnRhdGlvbiBkYXRhIGZyb20gcGFzc2VkIGluIEpTT04gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICAgVGhlIHBhcnNlZCBvYmplY3Qgd2l0aCBhbiBgb3JpZW50YXRpb25gIHByb3BlcnR5IGlmIHBhcnNlZCBwcm9wZXJseS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZUpTT05Gb3JPcmllbnRhdGlvbiAodGV4dCkge1xuICB0cnkge1xuICAgIGxldCB2YWx1ZSA9IEpTT04ucGFyc2UodGV4dClcbiAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ29yaWVudGF0aW9uJykpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9yaWVudGF0aW9uOiBwYXJzZUludCh2YWx1ZS5vcmllbnRhdGlvbilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgbGV0IG1hdGNoID0ganNvbkF0dHIuZXhlYyh0ZXh0KVxuICAgIGxldCBtYXRjaDJcbiAgICBpZiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgbWF0Y2gyID0ganNvblZhbC5leGVjKHRleHQpXG4gICAgICBpZiAobWF0Y2hbMV0gPT09ICdvcmllbnRhdGlvbicgJiYgbWF0Y2gyICYmIG1hdGNoMi5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3JpZW50YXRpb246IHBhcnNlSW50KG1hdGNoMlsxXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuLyoqXG4gKiBFdmVudCBoYW5kbGVyIGZvciBtZXRhZGF0YSByZWxhdGVkIHRvIG9yaWVudGF0aW9uIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gcGxheWVyXG4gKiAgICAgICAgVGhlIG1lZGlhIGVsZW1lbnQgcmVsYXRlZCB0byB0aGUgbWV0YWRhdGEuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogICAgICAgIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2l0aCB0aGUgcGFyc2VkIG9yaWVudGF0aW9uIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBvbk9yaWVudGF0aW9uTWV0YWRhdGEgPSAocGxheWVyLCBjYWxsYmFjaykgPT4ge1xuXG4gIGNvbnN0IHRleHRUcmFja3MgPSB0eXBlb2YgcGxheWVyLnRleHRUcmFja3MgPT09ICdmdW5jdGlvbicgPyBwbGF5ZXIudGV4dFRyYWNrcygpIDogcGxheWVyLnRleHRUcmFja3NcblxuICBpZiAodGV4dFRyYWNrcykge1xuXG4gICAgcGxheWVyLmFkZFRleHRUcmFjaygnbWV0YWRhdGEnKVxuXG4gICAgdGV4dFRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIGFkZFRyYWNrRXZlbnQgPT4ge1xuXG4gICAgICBsZXQgdHJhY2sgPSBhZGRUcmFja0V2ZW50LnRyYWNrXG4gICAgICB0cmFjay5tb2RlID0gJ2hpZGRlbidcbiAgICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2N1ZWNoYW5nZScsIGN1ZUNoYW5nZUV2ZW50ID0+IHtcbiAgICAgICAgbGV0IGN1ZXNcbiAgICAgICAgbGV0IGlcbiAgICAgICAgLy8gTW9zdGx5IENocm9tZS5cbiAgICAgICAgaWYgKGN1ZUNoYW5nZUV2ZW50ICYmIGN1ZUNoYW5nZUV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICBjdWVzID0gY3VlQ2hhbmdlRXZlbnQuY3VycmVudFRhcmdldC5jdWVzXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5kZWZpbmVkID09PSB0aGlzKSB7XG4gICAgICAgICAgY3VlcyA9IHRyYWNrLmN1ZXNcbiAgICAgICAgICBjdWVzID0gY3VlcyAmJiBjdWVzLmxlbmd0aCA+IDAgPyBjdWVzIDogdHJhY2suYWN0aXZlQ3Vlc1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuZGVmaW5lZCAhPT0gdGhpcykge1xuICAgICAgICAgIC8vIE1vc3RseSBGaXJlZm94ICYgU2FmYXJpLlxuICAgICAgICAgIGN1ZXMgPSBjdWVzICYmIGN1ZXMubGVuZ3RoID4gMCA/IGN1ZXMgOiB0aGlzLmFjdGl2ZUN1ZXNcbiAgICAgICAgfVxuICAgICAgICAvLyBNb3N0bHkgZmFpbHVyZS5cbiAgICAgICAgY3VlcyA9IGN1ZXMgfHwgW11cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGN1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IGN1ZXNbaV1cbiAgICAgICAgICBpZiAoZGF0YS52YWx1ZSkge1xuICAgICAgICAgICAgbGV0IHRleHQgPSB0eXBlb2YgZGF0YS52YWx1ZS5kYXRhID09PSAnc3RyaW5nJyA/IGRhdGEudmFsdWUuZGF0YSA6IHJlYWRVVEYoIGRhdGEudmFsdWUuZGF0YSAsIDAgLCBkYXRhLnNpemUpXG4gICAgICAgICAgICBsZXQgb3JpZW50YXRpb24gPSBwYXJzZUpTT05Gb3JPcmllbnRhdGlvbih0ZXh0KVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcmllbnRhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2sob3JpZW50YXRpb24pXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgfSlcblxuICB9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9lbnYvbWV0YWRhdGEtdXRpbC5qcyIsIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIEV4Y2VwdGlvbiBmb3IgbWlzc2luZyBlbGVtZW50IHdoZW4gYXNzaWduaW5nIFByZXNlbnRhdGlvbiBDb250cm9sbGVycyBmb3IgUHVibGlzaGVycyBhbmQgU3Vic2NyaWJlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb0VsZW1lbnRGb3VuZEVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm5hbWUgPSAnTm9FbGVtZW50Rm91bmQnXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICB9XG59XG5cbi8qKlxuICogRXhjZXB0aW9uIHdoZW4gcmVxdWVzdGluZyBtZWRpYSB3aXRoIGEgYE1lZGlhQ29uc3RyYWludGAgdGhhdCB0aGUgYnJvd3NlciBjYW5ub3Qgc3VwcG9ydC5cbiAqIFdlYlJUQyBPbmx5LlxuICovXG5leHBvcnQgY2xhc3MgTm9TdXBwb3J0ZWRDYW1lcmFSZXNvbHV0aW9uc0Vycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm5hbWUgPSAnTm9TdXBwb3J0ZWRDYW1lcmFSZXNvbHV0aW9uc0Vycm9yJ1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2V4Y2VwdGlvbi9lcnJvcnMuanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IFNvY2tldEhlbHBlciBmcm9tICcuL3NvY2tldC1oZWxwZXInXG5pbXBvcnQgeyBpc09iamVjdEVtcHR5IH0gZnJvbSAnLi4vdXRpbC9vYmplY3QnXG5pbXBvcnQgeyB3YXJuLCBlcnJvciB9IGZyb20gJy4uL2xvZydcblxuY29uc3QgTkFNRSA9ICdSNVByb1B1Ymxpc2hlclNvY2tldCdcblxuLyoqXG4gKiBQdWJsaXNoZXItYmFzZWQgZXh0ZW5zaW9uIG9mIGBTb2NrZXRIZWxwZXJgLlxuICpcbiAqIEBleHRlbmRzIHtTb2NrZXRIZWxwZXJ9XG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUHVibGlzaGVyU29ja2V0SGVscGVyIGV4dGVuZHMgU29ja2V0SGVscGVyIHtcblxuICBjb25zdHJ1Y3RvciAocmVzcG9uZGVyKSB7XG4gICAgc3VwZXIocmVzcG9uZGVyLCBOQU1FKVxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRvIHJlc3BvbmQgdG8gbWVzc2FnZXMgY29taW5nIG92ZXIgV2ViU29ja2V0LlxuICAgKi9cbiAgcmVzcG9uZCAobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlLmRhdGEpIHtcbiAgICAgIGxldCBqc29uID0gdGhpcy5nZXRKc29uRnJvbVNvY2tldE1lc3NhZ2UobWVzc2FnZSlcbiAgICAgIGlmICghc3VwZXIucmVzcG9uZChtZXNzYWdlKSkge1xuICAgICAgICBpZiAoanNvbi5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoanNvbi5kYXRhLnNkcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoanNvbi5kYXRhLnNkcC50eXBlID09PSAnYW5zd2VyJykge1xuICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25TRFBBbnN3ZXIoanNvbi5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoanNvbi5kYXRhLmNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3RFbXB0eShqc29uLmRhdGEuY2FuZGlkYXRlKSkge1xuICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25FbXB0eUNhbmRpZGF0ZSgpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25BZGRJY2VDYW5kaWRhdGUoanNvbi5kYXRhLmNhbmRpZGF0ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGpzb24uZGF0YS50eXBlID09PSAnc3RhdHVzJykge1xuICAgICAgICAgICAgaWYgKGpzb24uZGF0YS5jb2RlID09PSAnTmV0Q29ubmVjdGlvbi5JQ0UuVHJpY2xlQ29tcGxldGVkJyB8fFxuICAgICAgICAgICAgICAganNvbi5kYXRhLmNvZGUgPT09ICdOZXRDb25uZWN0aW9uLklDRS5Ucmlja2xlQ29tcGxldGVkJykge1xuICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25Tb2NrZXRJY2VDYW5kaWRhdGVFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblB1Ymxpc2hlclN0YXR1cyhqc29uLmRhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqc29uLnR5cGUgIT09IHVuZGVmaW5lZCAmJiBqc29uLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ21ldGFkYXRhJykge1xuICAgICAgICAgICAgICAvLyBJdCBpcyBhIGBzZW5kYCBBUEkgaW52b2NhdGlvbi5cbiAgICAgICAgICAgICAgaWYgKGpzb24ubWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25TZW5kUmVjZWl2ZWQoanNvbi5tZXRob2QsIGpzb24uZGF0YSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBFbHNlIGl0IGlzIG5vcm1hbCBtZXRhZGF0YS5cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uTWV0YURhdGEoanNvbi5kYXRhKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oTkFNRSwgJ1t3cy5vbm1lc3NhZ2VdIC0gTm8gTWVzc2FnZSBEYXRhLicpXG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHVibGlzaGVyU29ja2V0SGVscGVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvaGVscGVyL3NvY2tldC1oZWxwZXItcHViLmpzIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBTb2NrZXRIZWxwZXIgZnJvbSAnLi9zb2NrZXQtaGVscGVyJ1xuaW1wb3J0IHsgaXNPYmplY3RFbXB0eSB9IGZyb20gJy4uL3V0aWwvb2JqZWN0J1xuaW1wb3J0IHsgd2FybiwgZXJyb3IgfSBmcm9tICcuLi9sb2cnXG5cbmNvbnN0IE5BTUUgPSAnUjVQcm9TdWJzY3JpcHRpb25Tb2NrZXQnXG5cbi8qKlxuICogU3Vic2NyaWJlci1iYXNlZCBleHRlbnNpb24gb2YgYFNvY2tldEhlbHBlcmAuXG4gKlxuICogQGV4dGVuZHMge1NvY2tldEhlbHBlcn1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBTdWJzY3JpcHRpb25Tb2NrZXRIZWxwZXIgZXh0ZW5kcyBTb2NrZXRIZWxwZXIge1xuXG4gIGNvbnN0cnVjdG9yIChyZXNwb25kZXIpIHtcbiAgICBzdXBlcihyZXNwb25kZXIsIE5BTUUpXG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdG8gcmVzcG9uZCB0byBtZXNzYWdlcyBjb21pbmcgb3ZlciBXZWJTb2NrZXQuXG4gICAqL1xuICByZXNwb25kIChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UuZGF0YSkge1xuICAgICAgbGV0IGpzb24gPSB0aGlzLmdldEpzb25Gcm9tU29ja2V0TWVzc2FnZShtZXNzYWdlKVxuICAgICAgaWYgKCFzdXBlci5yZXNwb25kKG1lc3NhZ2UpKSB7XG4gICAgICAgIGlmIChqc29uLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChqc29uLmRhdGEuc2RwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChqc29uLmRhdGEuc2RwLnR5cGUgPT09ICdvZmZlcicpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uU0RQT2ZmZXIoanNvbi5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoanNvbi5kYXRhLmNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3RFbXB0eShqc29uLmRhdGEuY2FuZGlkYXRlKSkge1xuICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25FbXB0eUNhbmRpZGF0ZSgpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25BZGRJY2VDYW5kaWRhdGUoanNvbi5kYXRhLmNhbmRpZGF0ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGpzb24uZGF0YS50eXBlID09PSAnc3RhdHVzJykge1xuICAgICAgICAgICAgaWYgKGpzb24uZGF0YS5jb2RlID09PSAnTmV0Q29ubmVjdGlvbi5JQ0UuVHJpY2xlQ29tcGxldGVkJyB8fFxuICAgICAgICAgICAgICAganNvbi5kYXRhLmNvZGUgPT09ICdOZXRDb25uZWN0aW9uLklDRS5Ucmlja2xlQ29tcGxldGVkJykge1xuICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25Tb2NrZXRJY2VDYW5kaWRhdGVFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoanNvbi5kYXRhLmNvZGUgPT09ICdOZXRTdHJlYW0uUGxheS5VbnB1Ymxpc2hOb3RpZnknKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblVucHVibGlzaCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChqc29uLmRhdGEuY29kZSA9PT0gJ05ldENvbm5lY3Rpb24uQ29ubmVjdC5DbG9zZWQnKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vbkNvbm5lY3Rpb25DbG9zZWQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblN1YnNjcmliZXJTdGF0dXMoanNvbi5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoanNvbi5kYXRhLmhhc093blByb3BlcnR5KCdzdGF0dXMnKSkge1xuICAgICAgICAgICAgaWYgKGpzb24uZGF0YS5zdGF0dXMgPT09ICdOZXRTdHJlYW0uUGxheS5VbnB1Ymxpc2hOb3RpZnknKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblVucHVibGlzaCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqc29uLnR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGpzb24udHlwZSA9PT0gJ21ldGFkYXRhJykge1xuICAgICAgICAgICAgICAvLyBJdCBpcyBhIGBzZW5kYCBBUEkgaW52b2NhdGlvbi5cbiAgICAgICAgICAgICAgaWYgKGpzb24ubWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25TZW5kUmVjZWl2ZWQoanNvbi5tZXRob2QsIGpzb24uZGF0YSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBFbHNlIGl0IGlzIG5vcm1hbCBtZXRhZGF0YS5cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uTWV0YURhdGEoanNvbi5kYXRhKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGpzb24udHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGpzb24udHlwZSA9PT0gJ21ldGFkYXRhJykge1xuICAgICAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uTWV0YURhdGEoanNvbi5tZXRhZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oTkFNRSwgJ1t3cy5vbm1lc3NhZ2VdIC0gTm8gTWVzc2FnZSBEYXRhLicpXG4gICAgfVxuICB9XG5cbn1cbmV4cG9ydCBkZWZhdWx0IFN1YnNjcmlwdGlvblNvY2tldEhlbHBlclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2hlbHBlci9zb2NrZXQtaGVscGVyLXN1Yi5qcyIsIid1c2Ugc3RyaWN0J1xuaW1wb3J0ICogYXMgd2VicnRjIGZyb20gJy4uL2FkYXB0ZXIvd2VicnRjJ1xuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4uL2Vudi9icm93c2VyJ1xuaW1wb3J0IHsgRGVmZXJyZWRQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9wcm9taXNlJ1xuaW1wb3J0IHsgZGVidWcsIHdhcm4gfSBmcm9tICcuLi9sb2cnXG5cbmNvbnN0IE5BTUUgPSAnUjVQcm9QdWJsaXNoUGVlcidcblxuLyoqXG4gKiBQcm94eSB0byBQZWVyIENvbm5lY3Rpb24gZm9yIFB1Ymxpc2hlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUHVibGlzaGVyUGVlckhlbHBlciB7XG5cbiAgY29uc3RydWN0b3IgKHJlc3BvbmRlcikge1xuICAgIHRoaXMuX3Jlc3BvbmRlciA9IHJlc3BvbmRlclxuICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uID0gdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBoYW5kbGVycyBhc3NpZ25lZCB0byB0aGUgcGVlciBjb25uZWN0aW9uIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JUQ1BlZXJDb25uZWN0aW9ufSBjb25uZWN0aW9uXG4gICAqL1xuICBfcmVtb3ZlQ29ubmVjdGlvbkhhbmRsZXJzIChjb25uZWN0aW9uKSB7XG4gICAgY29ubmVjdGlvbi5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IHVuZGVmaW5lZFxuICAgIGNvbm5lY3Rpb24ub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSB1bmRlZmluZWRcbiAgICBjb25uZWN0aW9uLm9uaWNlY2FuZGlkYXRlID0gdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyBoYW5kbGVycyB0byBldmVudHMgb24gdGhlIHBlZXIgY29ubmVjdGlvbiBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtSVENQZWVyQ29ubmVjdGlvbn0gY29ubmVjdGlvblxuICAgKiBAcGFyYW0ge1Byb21pc2V9IHByb21pc2VcbiAgICogICAgICAgIFRoZSBgUHJvbWlzZWAgdG8gcmVzb2x2ZSBvciByZWplY3Qgb24gc3VjY2VzcyBvZiBjb25uZWN0aW9uLlxuICAgKi9cbiAgX2FkZENvbm5lY3Rpb25IYW5kbGVycyAoY29ubmVjdGlvbiwgcHJvbWlzZSkge1xuXG4gICAgbGV0IHJlY29ubmVjdFRpbWVvdXRcbiAgICBjb25zdCB0aW1lb3V0TGltaXQgPSA1MDAwXG5cbiAgICBjb25uZWN0aW9uLm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgZGVidWcoTkFNRSwgYFtwZWVyLm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlXSAtIFN0YXRlOiAke2Nvbm5lY3Rpb24uY29ubmVjdGlvblN0YXRlfWApXG4gICAgICBpZiAoY29ubmVjdGlvbi5jb25uZWN0aW9uU3RhdGUgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgIGRlYnVnKE5BTUUsICdbcGVlcmNvbm5lY3Rpb246b3Blbl0nKVxuICAgICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZSh0aGlzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjb25uZWN0aW9uLmNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2ZhaWxlZCcgfHxcbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uU3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgICAgIHdhcm4oTkFNRSwgJ1twZWVyY29ubmVjdGlvbjplcnJvcl0nKVxuICAgICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UucmVqZWN0KClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRlYnVnKE5BTUUsIGBbcGVlcmNvbm5lY3Rpb246JHtjb25uZWN0aW9uLmNvbm5lY3Rpb25TdGF0ZX1dYClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25uZWN0aW9uLm9uaWNlY2FuZGlkYXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICBkZWJ1ZyhOQU1FLCBgW3BlZXIub25pY2VjYW5kaWRhdGVdIC0gUGVlciBDYW5kaWRhdGU6ICR7ZXZlbnQuY2FuZGlkYXRlfWApXG4gICAgICBpZiAoZXZlbnQuY2FuZGlkYXRlKSB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vbkljZUNhbmRpZGF0ZShldmVudC5jYW5kaWRhdGUpXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmNhbmRpZGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBudWxsIG1lYW5zIHRoZXkgaGF2ZSBmaW5pc2hlZCBzZW5kaW5nIGNhbmRpZGF0ZXMgYmFjayBhbmQgZm9ydGg/XG4gICAgICAgIC8vIE1vdmVkIHRvIG5vdGlmaWNhdGlvbiBmcm9tIHNlcnZlciBvbiB0cmlja2xlIGVuZCBldmVudC5cbiAgICAgICAgLy8gdGhpcy5fcmVzcG9uZGVyLm9uSWNlQ2FuZGlkYXRlVHJpY2tsZUVuZCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGlvbi5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3Qgc3RhdGUgPSBjb25uZWN0aW9uLmljZUNvbm5lY3Rpb25TdGF0ZVxuICAgICAgZGVidWcoTkFNRSwgYFtwZWVyLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXSAtIFN0YXRlOiAke3N0YXRlfWApXG4gICAgICBpZiAoc3RhdGUgPT09ICdjb25uZWN0ZWQnICYmIGVudmlyb25tZW50LmdldElzRWRnZSgpKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIE9SVEMgb3JkZXIgb2YgY2FuZGlkYXRlcy5cbiAgICAgICAgLy8gVHlwaWNhbGx5IHRoaXMgd2lsbCBiZSBpbnZva2VkIGZyb20gYSBgb25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZWAgZXZlbnQgb24gdGhlIENvbm5lY3Rpb24uXG4gICAgICAgIC8vIEVkZ2UgZG9lc24ndCBub3RpZnkgb24gdGhhdCBldmVudC5cbiAgICAgICAgZGVidWcoTkFNRSwgJ1tlZGdlL29ydGM6bm90aWZ5IGNvbXBsZXRlXScpXG4gICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblBlZXJHYXRoZXJpbmdDb21wbGV0ZSgpXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gJ2ZhaWxlZCcpIHtcbiAgICAgICAgaWYgKHJlY29ubmVjdFRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQocmVjb25uZWN0VGltZW91dClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNwb25kZXIub25QZWVyQ29ubmVjdGlvbkNsb3NlKGV2ZW50KVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgICAgIC8vIG1heSByZWNlaXZlIGEgZGlzY29ubmVjdCB0ZW1wb3JhcmlseSB0aGF0IHdpbGwgdGhlbiByZXR1cm4gdG8gYSBjb25uZWN0aW9uLlxuICAgICAgICByZWNvbm5lY3RUaW1lb3V0ID0gc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgICAgIGRlYnVnKE5BTUUsIGBbcGVlci5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZV0gLSBSZWNvbm5lY3QgdGltZW91dCByZWFjaGVkLiBDbG9zaW5nIFBlZXJDb25uZWN0aW9uLmApXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHJlY29ubmVjdFRpbWVvdXQpXG4gICAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uUGVlckNvbm5lY3Rpb25DbG9zZShldmVudClcbiAgICAgICAgfSwgdGltZW91dExpbWl0KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChyZWNvbm5lY3RUaW1lb3V0KSB7XG4gICAgICAgICAgZGVidWcoTkFNRSwgYFtwZWVyLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXSAtIENsZWFyaW5nIHRpbWVvdXQgZm9yIHJlY29ubmVjdC5gKVxuICAgICAgICAgIGNsZWFyVGltZW91dChyZWNvbm5lY3RUaW1lb3V0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGlvbi5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlID0gKGV2ZW50KSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGNvbnN0IHN0YXRlID0gY29ubmVjdGlvbi5zaWduYWxpbmdTdGF0ZVxuICAgICAgZGVidWcoTkFNRSwgYFtwZWVyLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2VdIC0gU3RhdGU6ICR7c3RhdGV9YClcbiAgICB9XG5cbiAgICBjb25uZWN0aW9uLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IGNvbm5lY3Rpb24uaWNlR2F0aGVyaW5nU3RhdGVcbiAgICAgIGRlYnVnKE5BTUUsIGBbcGVlci5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlXSAtIFN0YXRlOiAke3N0YXRlfWApXG4gICAgICBpZiAoc3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uUGVlckdhdGhlcmluZ0NvbXBsZXRlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25uZWN0aW9uLm9ucmVtb3Zlc3RyZWFtID0gKCkgPT4ge1xuICAgICAgZGVidWcoTkFNRSwgYFtwZWVyLm9ucmVtb3Zlc3RyZWFtXWApXG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBgZ2V0VXNlck1lZGlhYCBvbiBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29udHJhaW50c1xuICAgKiAgICAgICAgVGhlIGBNZWRpYUNvbnN0cmFpbnRzYCBvYmplY3QuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBnZXRVc2VyTWVkaWEgKGNvbnN0cmFpbnRzKSB7XG4gICAgcmV0dXJuIHdlYnJ0Yy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBmb3JjZSBgZ2V0VXNlck1lZGlhYCByZXF1ZXN0IHVzaW5nIHRoZSBwcm92aWRlZCBjb25zdHJhaW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnN0cmFpbnRzXG4gICAqICAgICAgICBUaGUgYE1lZGlhQ29uc3RyYWludHNgIHRvIGZvcmNlIGluIHJlcXVlc3Qgb24gYGdldFVzZXJNZWRpYWAuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmb3JjZVVzZXJNZWRpYSAoY29uc3RyYWludHMpIHtcbiAgICByZXR1cm4gd2VicnRjLmZvcmNlVXNlck1lZGlhKGNvbnN0cmFpbnRzKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY3JlYXRlIGFuIE9mZmVyIHRocm91Z2ggdGhlIFBlZXIgQ29ubmVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGJhbmR3aWR0aFxuICAgKiAgICAgICAgVGhlIG9wdGlvbmFsIGJhbmR3aWR0aCBjb25maWd1cmF0aW9uIHRvIHVzZSBpbiBtdW5naW5nIFNEUCBiZWZvcmUgc2VuZGluZyBvZmZlci5cbiAgICogQHBhcmFtIHtQcm9taXNlfSBwcm9taXNlXG4gICAqICAgICAgICBUaGUgYFByb21pc2VgIHRvIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3Mgb2Ygc2VuZGluZyBvZmZlciBvbiBQZWVyIENvbm5lY3Rpb24uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBjcmVhdGVPZmZlciAoYmFuZHdpZHRoID0gbnVsbCwgb2ZmZXJQcm9taXNlID0gbnVsbCkge1xuICAgIGRlYnVnKE5BTUUsICdbY3JlYXRlb2ZmZXJdJylcbiAgICBjb25zdCBwID0gb2ZmZXJQcm9taXNlIHx8IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uLmNyZWF0ZU9mZmVyKClcbiAgICAgIC50aGVuKChzZXNzaW9uRGVzY3JpcHRpb24pID0+IHtcbiAgICAgICAgdGhpcy5zZXRMb2NhbERlc2NyaXB0aW9uKHNlc3Npb25EZXNjcmlwdGlvbiwgYmFuZHdpZHRoKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChiYW5kd2lkdGgpIHtcbiAgICAgICAgICAgICAgc2Vzc2lvbkRlc2NyaXB0aW9uLnNkcCA9IHdlYnJ0Yy51cGRhdGVCYW5kd2lkdGgoYmFuZHdpZHRoLCBzZXNzaW9uRGVzY3JpcHRpb24uc2RwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uU0RQU3VjY2VzcygpXG4gICAgICAgICAgICBwLnJlc29sdmUoc2Vzc2lvbkRlc2NyaXB0aW9uKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblNEUEVycm9yKGVycilcbiAgICAgICAgICAgIHAucmVqZWN0KGVycilcbiAgICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBkZWJ1ZyhOQU1FLCAnW2NyZWF0ZW9mZmVyOmVycm9yXScpXG4gICAgICAgIHAucmVqZWN0KGVycilcbiAgICAgIH0pXG4gICAgcmV0dXJuIHAuaGFzT3duUHJvcGVydHkoJ3Byb21pc2UnKSA/IHAucHJvbWlzZSA6IHBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNldCBsb2NhbCBkZXNjcmlwdGlvbiBvbiB0aGUgUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2Vzc2lvbkRlc2NyaXB0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBzZXRMb2NhbERlc2NyaXB0aW9uIChzZXNzaW9uRGVzY3JpcHRpb24pIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3NldGxvY2FsZGVzY3JpcHRpb25dJylcbiAgICByZXR1cm4gdGhpcy5fcGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihzZXNzaW9uRGVzY3JpcHRpb24pXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2RwXG4gICAqICAgICAgICBUaGUgU2Vzc2lvbiBEZXNjcmlwdGlvbiB0b3Qgc2V0IG9uIHRoZSBQZWVyIENvbm5lY3Rpb24uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBzZXRSZW1vdGVEZXNjcmlwdGlvbiAoc2RwKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tzZXRyZW1vdGVkZXNjcmlwdGlvbl0nKVxuICAgIHJldHVybiB0aGlzLl9wZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihuZXcgd2VicnRjLlJUQ1Nlc3Npb25EZXNjcmlwdGlvbihzZHApKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gYWRkIElDRSBjYW5kaWRhdGUgdG8gUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FuZGlkYXRlXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBhZGRJY2VDYW5kaWRhdGUgKGNhbmRpZGF0ZSkge1xuICAgIGRlYnVnKE5BTUUsICdbYWRkY2FuZGlkYXRlXScpXG4gICAgcmV0dXJuIHRoaXMuX3BlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShjYW5kaWRhdGUpXG4gIH1cblxuICAvKipcbiAgICogRGVwcmVjYXRlZC5cbiAgICogUmVxdWVzdCB0byBzZXR1cCB0aGUgcHJveGllZCBQZWVyIENvbm5lY3Rpb24gaW5zdGFuY2UuXG4gICAqIFVzZSBlaXRoZXIgYHNldFVwYCBvciBgc2V0VXBXaXRoUGVlckNvbmZpZ3VyYXRpb25gLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBpY2VTZXJ2ZXJzXG4gICAqICAgICAgICBMaXN0IG9mIElDRSBzZXJ2ZXJzIHRvIHVzZSBpbiB0aGUgY29ubmVjdGlvbi5cbiAgICogQHBhcmFtIHtQcm9taXNlfSBzZXRVcFByb21pc2VcbiAgICogICAgICAgIFRoZSBgUHJvbWlzZWAgdG8gcmVzb2x2ZSBvciByZWplY3Qgb24gaW4gc3VjY2VzcyBpbiBzZXR0aW5nIHVwIHRoZSBQZWVyIENvbm5lY3Rpb24uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBydGNwTXV4UG9saWN5XG4gICAqICAgICAgICBUaGUgdHlwZSBvZiBtdXggcG9saWN5IHRvIHVzZS5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICpcbiAgICogQG5vdGUgTWFya2VkIGZvciBkZXByZWNhdGlvbiBhZnRlciA1LjQuMCByZWxlYXNlLlxuICAgKi9cbiAgc2V0VXAgKGljZVNlcnZlcnMsIHNldFVwUHJvbWlzZSA9IHVuZGVmaW5lZCwgcnRjcE11eFBvbGljeSA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMudGVhckRvd24oKVxuICAgIGNvbnN0IHAgPSBzZXRVcFByb21pc2UgfHwgbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgdHJ5IHtcbiAgICAgIGxldCBwZWVyQ29uZmlnID0ge1xuICAgICAgICBpY2VTZXJ2ZXJzOiBpY2VTZXJ2ZXJzLFxuICAgICAgICBpY2VDYW5kaWRhdGVQb29sU2l6ZTogMixcbiAgICAgICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZSdcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcnRjcE11eFBvbGljeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGVlckNvbmZpZy5ydGNwTXV4UG9saWN5ID0gcnRjcE11eFBvbGljeVxuICAgICAgfVxuICAgICAgZGVidWcoTkFNRSwgYFtwZWVyY29ubmVjdGlvbjpzZXR1cF06ICR7SlNPTi5zdHJpbmdpZnkocGVlckNvbmZpZywgbnVsbCwgMil9YClcbiAgICAgIGxldCBwZWVyID0gbmV3IHdlYnJ0Yy5SVENQZWVyQ29ubmVjdGlvbihwZWVyQ29uZmlnLFxuICAgICAgICB7XG4gICAgICAgICAgb3B0aW9uYWw6IFtcbiAgICAgICAgICAgIHtSdHBEYXRhQ2hhbm5lbHM6IGZhbHNlfSxcbiAgICAgICAgICAgIHtnb29nQ3B1T3ZlcnVzZURldGVjdGlvbjogdHJ1ZX1cbiAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgICB0aGlzLl9hZGRDb25uZWN0aW9uSGFuZGxlcnMocGVlcilcbiAgICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uID0gcGVlclxuICAgICAgcC5yZXNvbHZlKHBlZXIpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybihOQU1FLCBgQ291bGQgbm90IGVzdGFibGlzaCBhIFBlZXJDb25uZWN0aW9uLiAke2UubWVzc2FnZX1gKVxuICAgICAgcC5yZWplY3QoZS5tZXNzYWdlKVxuICAgIH1cbiAgICByZXR1cm4gcC5oYXNPd25Qcm9wZXJ0eSgncHJvbWlzZScpID8gcC5wcm9taXNlIDogcFxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gc2V0dXAgdGhlIHByb3hpZWQgUGVlciBDb25uZWN0aW9uIGluc3RhbmNlIHdpdGggZGVmaW5lZCBSVENDb25maWd1cmF0aW9uLlxuICAgKiBVc2UgZWl0aGVyIGBzZXRVcGAgb3IgYHNldFVwV2l0aFBlZXJDb25maWd1cmF0aW9uYC5cbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1JUQ1BlZXJDb25uZWN0aW9uL1JUQ1BlZXJDb25uZWN0aW9uI1JUQ0NvbmZpZ3VyYXRpb25fZGljdGlvbmFyeVxuICAgKlxuICAgKiBAcGFyYW0ge1JUQ0NvbmZpZ3VyYXRpb259IGNvbmZpZ3VyYXRpb25cbiAgICogICAgICAgIEEgY3VzdG9tIFJUQ0NvbmZpZ3VyYXRpb24uXG4gICAqIEBwYXJhbSB7UHJvbWlzZX0gc2V0VXBQcm9taXNlXG4gICAqICAgICAgICBUaGUgYFByb21pc2VgIHRvIHJlc29sdmUgb3IgcmVqZWN0IG9uIGluIHN1Y2Nlc3MgaW4gc2V0dGluZyB1cCB0aGUgUGVlciBDb25uZWN0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0VXBXaXRoUGVlckNvbmZpZ3VyYXRpb24gKGNvbmZpZ3VyYXRpb24sIHNldFVwUHJvbWlzZSA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMudGVhckRvd24oKVxuICAgIGNvbnN0IHAgPSBzZXRVcFByb21pc2UgfHwgbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgdHJ5IHtcbiAgICAgIGRlYnVnKE5BTUUsIGBbcGVlcmNvbm5lY3Rpb246c2V0VXBXaXRoUGVlckNvbmZpZ3VyYXRpb25dOiAke0pTT04uc3RyaW5naWZ5KGNvbmZpZ3VyYXRpb24sIG51bGwsIDIpfWApXG4gICAgICBsZXQgcGVlciA9IG5ldyB3ZWJydGMuUlRDUGVlckNvbm5lY3Rpb24oY29uZmlndXJhdGlvbixcbiAgICAgICAge1xuICAgICAgICAgIG9wdGlvbmFsOiBbXG4gICAgICAgICAgICB7UnRwRGF0YUNoYW5uZWxzOiBmYWxzZX0sXG4gICAgICAgICAgICB7Z29vZ0NwdU92ZXJ1c2VEZXRlY3Rpb246IHRydWV9XG4gICAgICAgICAgXVxuICAgICAgICB9KVxuICAgICAgdGhpcy5fYWRkQ29ubmVjdGlvbkhhbmRsZXJzKHBlZXIpXG4gICAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbiA9IHBlZXJcbiAgICAgIHAucmVzb2x2ZShwZWVyKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oTkFNRSwgYENvdWxkIG5vdCBlc3RhYmxpc2ggYSBQZWVyQ29ubmVjdGlvbi4gJHtlLm1lc3NhZ2V9YClcbiAgICAgIHAucmVqZWN0KGUubWVzc2FnZSlcbiAgICB9XG4gICAgcmV0dXJuIHAuaGFzT3duUHJvcGVydHkoJ3Byb21pc2UnKSA/IHAucHJvbWlzZSA6IHBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHRlYXIgZG93biBwcm94aWVkIFBlZXIgQ29ubmVjdGlvbiBpbnN0YW5jZS5cbiAgICovXG4gIHRlYXJEb3duICgpIHtcbiAgICBpZiAodGhpcy5fcGVlckNvbm5lY3Rpb24pIHtcbiAgICAgIGRlYnVnKE5BTUUsICdbdGVhcmRvd25dJylcbiAgICAgIHRoaXMuX3JlbW92ZUNvbm5lY3Rpb25IYW5kbGVycyh0aGlzLl9wZWVyQ29ubmVjdGlvbilcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uLmNsb3NlKClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgd2FybihOQU1FLCBgW3BlZXJjb25uZWN0aW9uLmNsb3NlXSBlcnJvcjogJHtlLm1lc3NhZ2V9YClcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFjY2Vzc29yIGZvciB0aGUgcHJveGllZCBSVENQZWVyQ29ubmVjdGlvbiBpbnN0YW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7UlRDUGVlckNvbm5lY3Rpb259XG4gICAqL1xuICBnZXQgY29ubmVjdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BlZXJDb25uZWN0aW9uXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQdWJsaXNoZXJQZWVySGVscGVyXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9oZWxwZXIvd2VicnRjLWhlbHBlci1wdWIuanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0ICogYXMgd2VicnRjIGZyb20gJy4uL2FkYXB0ZXIvd2VicnRjJ1xuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4uL2Vudi9icm93c2VyJ1xuaW1wb3J0IHsgRGVmZXJyZWRQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9wcm9taXNlJ1xuaW1wb3J0IHsgZGVidWcsIHdhcm4sIGVycm9yIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBOQU1FID0gJ1I1UHJvU3Vic2NyaXB0aW9uUGVlcidcblxuLyoqXG4gKiBVdGlsaXR5IHRvIGNoZWNrIGlmIGNhbmRpZGF0ZSBpcyBlbXB0eSwgYW5kIGNvbnNpZGVyZWQgdGhlIGVuZCBvZiB0aGUgdHJpY2tsZSBuZWdvdGlhdGlvbiBmb3IgYSBzdWJzY3JpYmVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYW5kaWRhdGVcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBpc0VtcHR5Q2FuZGlkYXRlID0gKGNhbmRpZGF0ZSkgPT4ge1xuICByZXR1cm4gdHlwZW9mIGNhbmRpZGF0ZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAodHlwZW9mIGNhbmRpZGF0ZSA9PT0gJ3N0cmluZycgJiYgY2FuZGlkYXRlLmxlbmd0aCA9PT0gMClcbn1cblxuLyoqXG4gKiBQcm94eSB0byBQZWVyIENvbm5lY3Rpb24gZm9yIFN1YnNjcmliZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFN1YnNjcmlwdGlvblBlZXJIZWxwZXIge1xuXG4gIGNvbnN0cnVjdG9yIChyZXNwb25kZXIpIHtcbiAgICB0aGlzLl9yZXNwb25kZXIgPSByZXNwb25kZXJcbiAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbiA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3BlbmRpbmdNZWRpYVN0cmVhbSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgaGFuZGxlcnMgYXNzaWduZWQgdG8gdGhlIHBlZXIgY29ubmVjdGlvbiBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtSVENQZWVyQ29ubmVjdGlvbn0gY29ubmVjdGlvblxuICAgKi9cbiAgX3JlbW92ZUNvbm5lY3Rpb25IYW5kbGVycyAoY29ubmVjdGlvbikge1xuICAgIGNvbm5lY3Rpb24ub25jb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSB1bmRlZmluZWRcbiAgICBjb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gdW5kZWZpbmVkXG4gICAgY29ubmVjdGlvbi5vbmljZWNhbmRpZGF0ZSA9IHVuZGVmaW5lZFxuLy8gICAgY29ubmVjdGlvbi5vbmFkZHN0cmVhbSA9IHVuZGVmaW5lZFxuICAgIGNvbm5lY3Rpb24ub250cmFjayA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2lnbnMgaGFuZGxlcnMgdG8gZXZlbnRzIG9uIHRoZSBwZWVyIGNvbm5lY3Rpb24gaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UlRDUGVlckNvbm5lY3Rpb259IGNvbm5lY3Rpb25cbiAgICogQHBhcmFtIHtQcm9taXNlfSBwcm9taXNlXG4gICAqICAgICAgICBUaGUgYFByb21pc2VgIHRvIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3Mgb2YgY29ubmVjdGlvbi5cbiAgICovXG4gIF9hZGRDb25uZWN0aW9uSGFuZGxlcnMgKGNvbm5lY3Rpb24sIHByb21pc2UpIHtcblxuICAgIGxldCByZWNvbm5lY3RUaW1lb3V0XG4gICAgY29uc3QgdGltZW91dExpbWl0ID0gNTAwMFxuXG4gICAgY29ubmVjdGlvbi5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChjb25uZWN0aW9uLmNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgZGVidWcoTkFNRSwgJ1twZWVyY29ubmVjdGlvbjpvcGVuXScpXG4gICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHRoaXMpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29ubmVjdGlvbi5jb25uZWN0aW9uU3RhdGUgPT09ICdmYWlsZWQnIHx8XG4gICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdGlvblN0YXRlID09PSAnZGlzY29ubmVjdGVkJykge1xuICAgICAgICB3YXJuKE5BTUUsICdbcGVlcmNvbm5lY3Rpb246ZXJyb3JdJylcbiAgICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgICBwcm9taXNlLnJlamVjdCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25uZWN0aW9uLm9uaWNlY2FuZGlkYXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICBkZWJ1ZyhOQU1FLCBgW3BlZXIub25pY2VjYW5kaWRhdGVdIC0gUGVlciBDYW5kaWRhdGU6ICR7ZXZlbnQuY2FuZGlkYXRlfWApXG4gICAgICBpZiAoZXZlbnQuY2FuZGlkYXRlKSB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vbkljZUNhbmRpZGF0ZShldmVudC5jYW5kaWRhdGUpXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmNhbmRpZGF0ZSA9PT0gbnVsbCAmJiB0aGlzLl9wZW5kaW5nTWVkaWFTdHJlYW0pIHtcbiAgICAgICAgLy8gbnVsbCBtZWFucyB0aGV5IGhhdmUgZmluaXNoZWQgc2VuZGluZyBjYW5kaWRhdGVzIGJhY2sgYW5kIGZvcnRoP1xuICAgICAgICB0aGlzLl9yZXNwb25kZXIub25JY2VDYW5kaWRhdGVUcmlja2xlRW5kKHRoaXMuX3BlbmRpbmdNZWRpYVN0cmVhbSlcbiAgICAgICAgdGhpcy5fcGVuZGluZ01lZGlhU3RyZWFtID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICBjb25uZWN0aW9uLm9uYWRkc3RyZWFtID0gKGV2ZW50KSA9PiB7XG4gICAgICBkZWJ1ZyhOQU1FLCBgKG9uYWRkc3RyZWFtKSBQZWVyIEFkZCBTdHJlYW06ICR7ZXZlbnQuc3RyZWFtfWApXG4gICAgICBpZiAoZXZlbnQuc3RyZWFtICYmIHRoaXMuX3BlbmRpbmdNZWRpYVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdNZWRpYVN0cmVhbSA9IGV2ZW50LnN0cmVhbVxuICAgICAgICB0aGlzLl9yZXNwb25kZXIub25BbnN3ZXJNZWRpYVN0cmVhbShldmVudC5zdHJlYW0pXG4gICAgICB9XG4gICAgfVxuICAgICovXG5cbiAgICAvLyBQaWNrZWQgdXAgYnkgRmlyZWZveCwgYWxsIG90aGVycyB1c2UgYG9uYWRkc3RyZWFtYCwgYnV0IGFkYXB0ZXIuanMgd2lsbCBjYWxsIGJvdGgsIHNvIHdlIGxpbWl0LlxuICAgIGNvbm5lY3Rpb24ub250cmFjayA9IChldmVudCkgPT4ge1xuICAgICAgZGVidWcoTkFNRSwgYChvbnRyYWNrKSBQZWVyIEFkZCBTdHJlYW06ICR7ZXZlbnQuc3RyZWFtc31gKVxuICAgICAgaWYgKGV2ZW50LnN0cmVhbXMgJiYgZXZlbnQuc3RyZWFtcy5sZW5ndGggPiAwICYmIHRoaXMuX3BlbmRpbmdNZWRpYVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdNZWRpYVN0cmVhbSA9IGV2ZW50LnN0cmVhbXNbMF1cbiAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uQW5zd2VyTWVkaWFTdHJlYW0oZXZlbnQuc3RyZWFtc1swXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IGNvbm5lY3Rpb24uaWNlQ29ubmVjdGlvblN0YXRlXG4gICAgICBkZWJ1ZyhOQU1FLCBgW3BlZXIub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VdIC0gU3RhdGU6ICR7c3RhdGV9YClcbiAgICAgIGlmIChzdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcgJiYgZW52aXJvbm1lbnQuZ2V0SXNFZGdlKCkpIHtcbiAgICAgICAgLy8gU3VwcG9ydCBmb3IgT1JUQyBvcmRlciBvZiBjYW5kaWRhdGVzLlxuICAgICAgICAvLyBUeXBpY2FsbHkgdGhpcyB3aWxsIGJlIGludm9rZWQgZnJvbSBhIGBvbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlYCBldmVudCBvbiB0aGUgQ29ubmVjdGlvbi5cbiAgICAgICAgLy8gRWRnZSBkb2Vzbid0IG5vdGlmeSBvbiB0aGF0IGV2ZW50LlxuICAgICAgICBkZWJ1ZyhOQU1FLCAnW2VkZ2Uvb3J0Yzpub3RpZnkgY29tcGxldGVdJylcbiAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uUGVlckdhdGhlcmluZ0NvbXBsZXRlKClcbiAgICAgICAgLy8gVHJpY2sgZm9yIGVkZ2UgdG8gcmVjZWl2ZSBudWxsIGNhbmRpZGF0ZSBhbmQgc3RhcnQgcGxheWJhY2suXG4gICAgICAgIC8vIFRPRE86IEZpeCBtZT9cbiAgICAgICAgY29ubmVjdGlvbi5vbmljZWNhbmRpZGF0ZSh7Y2FuZGlkYXRlOm51bGx9KVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhdGUgPT09ICdmYWlsZWQnKSB7XG4gICAgICAgIGlmIChyZWNvbm5lY3RUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHJlY29ubmVjdFRpbWVvdXQpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uUGVlckNvbm5lY3Rpb25DbG9zZShldmVudClcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAnZGlzY29ubmVjdGVkJykge1xuICAgICAgICAvLyBtYXkgcmVjZWl2ZSBhIGRpc2Nvbm5lY3QgdGVtcG9yYXJpbHkgdGhhdCB3aWxsIHRoZW4gcmV0dXJuIHRvIGEgY29ubmVjdGlvbi5cbiAgICAgICAgcmVjb25uZWN0VGltZW91dCA9IHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgICAgICBkZWJ1ZyhOQU1FLCBgW3BlZXIub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VdIC0gUmVjb25uZWN0IHRpbWVvdXQgcmVhY2hlZC4gQ2xvc2luZyBQZWVyQ29ubmVjdGlvbi5gKVxuICAgICAgICAgIGNsZWFyVGltZW91dChyZWNvbm5lY3RUaW1lb3V0KVxuICAgICAgICAgIHRoaXMuX3Jlc3BvbmRlci5vblBlZXJDb25uZWN0aW9uQ2xvc2UoZXZlbnQpXG4gICAgICAgIH0sIHRpbWVvdXRMaW1pdClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAocmVjb25uZWN0VGltZW91dCkge1xuICAgICAgICAgIGRlYnVnKE5BTUUsIGBbcGVlci5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZV0gLSBDbGVhcmluZyB0aW1lb3V0IGZvciByZWNvbm5lY3QuYClcbiAgICAgICAgICBjbGVhclRpbWVvdXQocmVjb25uZWN0VGltZW91dClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbm5lY3Rpb24ub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gY29ubmVjdGlvbi5pY2VHYXRoZXJpbmdTdGF0ZVxuICAgICAgZGVidWcoTkFNRSwgYFtwZWVyLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2VdIC0gU3RhdGU6ICR7c3RhdGV9YClcbiAgICAgIGlmIChzdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICB0aGlzLl9yZXNwb25kZXIub25QZWVyR2F0aGVyaW5nQ29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbm5lY3Rpb24ub25yZW1vdmVzdHJlYW0gPSAoKSA9PiB7XG4gICAgICBkZWJ1ZyhOQU1FLCBgW3BlZXIub25yZW1vdmVzdHJlYW1dYClcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGNyZWF0ZSBhbnN3ZXIgb24gUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2RwXG4gICAqICAgICAgICBUaGUgU2Vzc2lvbiBEZXNjcmlwdGlvbiB0byBzZXQgYXMgcmVtb3RlIGRlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgY3JlYXRlQW5zd2VyIChzZHApIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2NyZWF0ZWFuc3dlcl0nKVxuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG5cbiAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihzZHApXG4gICAgICAudGhlbih0aGlzLl9yZXNwb25kZXIub25TRFBTdWNjZXNzKVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgdGhpcy5fcmVzcG9uZGVyLm9uU0RQRXJyb3IoZXJyKVxuICAgICAgfSlcblxuICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uLmNyZWF0ZUFuc3dlcigpXG4gICAgICAudGhlbihzZXNzaW9uRGVzY3JpcHRpb24gPT4ge1xuICAgICAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKHNlc3Npb25EZXNjcmlwdGlvbilcbiAgICAgICAgICAudGhlbih0aGlzLl9yZXNwb25kZXIub25TRFBTdWNjZXNzKVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZXNwb25kZXIub25TRFBFcnJvcihlcnIpXG4gICAgICAgICAgfSlcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShzZXNzaW9uRGVzY3JpcHRpb24pXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGRlZmVycmVkLnJlamVjdClcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBhZGQgSUNFIGNhbmRpZGF0ZSB0byBQZWVyIENvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYW5kaWRhdGVcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGFkZEljZUNhbmRpZGF0ZSAoY2FuZGlkYXRlKSB7XG4gICAgZGVidWcoTkFNRSwgJ2NoZWNraW5nIGlmIGVtcHR5Li4uJylcbiAgICBpZiAoaXNFbXB0eUNhbmRpZGF0ZShjYW5kaWRhdGUpKSB7XG4gICAgICBkZWJ1ZyhOQU1FLCAnW2FkZGljZWNhbmRpZGF0ZV06OiBlbXB0eScpXG4gICAgfSBlbHNlIGlmIChjYW5kaWRhdGUgIT09IG51bGwpIHtcbiAgICAgIGRlYnVnKE5BTUUsICdbYWRkaWNlY2FuZGlkYXRlXSA6OiBub24tZW1wdHknKVxuICAgICAgbGV0IGljZUNhbmRpZGF0ZSA9IG5ldyB3ZWJydGMuUlRDSWNlQ2FuZGlkYXRlKHtcbiAgICAgICAgc2RwTUxpbmVJbmRleDogY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXgsXG4gICAgICAgIGNhbmRpZGF0ZTogY2FuZGlkYXRlLmNhbmRpZGF0ZVxuICAgICAgfSlcbiAgICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAvLyBuYWRhXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIGVycm9yKE5BTUUsIGBFcnJvciBpbiBhZGQgb2YgSUNFIENhbmRpZGlhdGUgKyAke2Vycn1gKVxuICAgICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZyhOQU1FLCAnW2FkZGljZWNhbmRpZGF0ZV0gOjogbnVsbCcpXG4gICAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbi5hZGRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgLy8gbmFkYVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBlcnJvcihOQU1FLCBgRXJyb3IgaW4gYWRkIG9mIElDRSBDYW5kaWRpYXRlICsgJHtlcnJ9YClcbiAgICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVwcmVjYXRlZC5cbiAgICogUmVxdWVzdCB0byBzZXR1cCB0aGUgcHJveGllZCBQZWVyIENvbm5lY3Rpb24gaW5zdGFuY2UuXG4gICAqIFVzZSBlaXRoZXIgYHNldFVwYCBvciBgc2V0VXBXaXRoUGVlckNvbmZpZ3VyYXRpb25gLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBpY2VTZXJ2ZXJzXG4gICAqICAgICAgICBMaXN0IG9mIElDRSBzZXJ2ZXJzIHRvIHVzZSBpbiB0aGUgY29ubmVjdGlvbi5cbiAgICogQHBhcmFtIHtQcm9taXNlfSBzZXRVcFByb21pc2VcbiAgICogICAgICAgIFRoZSBgUHJvbWlzZWAgdG8gcmVzb2x2ZSBvciByZWplY3Qgb24gaW4gc3VjY2VzcyBpbiBzZXR0aW5nIHVwIHRoZSBQZWVyIENvbm5lY3Rpb24uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBydGNwTXV4UG9saWN5XG4gICAqICAgICAgICBUaGUgdHlwZSBvZiBtdXggcG9saWN5IHRvIHVzZS5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICpcbiAgICogQG5vdGUgTWFya2VkIGZvciBkZXByZWNhdGlvbiBhZnRlciA1LjQuMCByZWxlYXNlLlxuICAgKi9cbiAgc2V0VXAgKGljZVNlcnZlcnMsIHNldFVwUHJvbWlzZSA9IHVuZGVmaW5lZCwgcnRjcE11eFBvbGljeSA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMudGVhckRvd24oKVxuICAgIGNvbnN0IHAgPSBzZXRVcFByb21pc2UgfHwgbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgdHJ5IHtcbiAgICAgIGxldCBwZWVyQ29uZmlnID0ge1xuICAgICAgICBpY2VTZXJ2ZXJzOiBpY2VTZXJ2ZXJzLFxuICAgICAgICBpY2VDYW5kaWRhdGVQb29sU2l6ZTogMixcbiAgICAgICAgYnVuZGxlUG9saWN5OiBcIm1heC1idW5kbGVcIlxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBydGNwTXV4UG9saWN5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwZWVyQ29uZmlnLnJ0Y3BNdXhQb2xpY3kgPSBydGNwTXV4UG9saWN5XG4gICAgICB9XG4gICAgICBkZWJ1ZyhOQU1FLCBgW3BlZXJjb25uZWN0aW9uOnNldHVwXTogJHtKU09OLnN0cmluZ2lmeShwZWVyQ29uZmlnLCBudWxsLCAyKX1gKVxuICAgICAgbGV0IHBlZXIgPSBuZXcgd2VicnRjLlJUQ1BlZXJDb25uZWN0aW9uKHBlZXJDb25maWcsXG4gICAgICAgIHtcbiAgICAgICAgICBvcHRpb25hbDogW1xuICAgICAgICAgICAge1J0cERhdGFDaGFubmVsczogZmFsc2V9LFxuICAgICAgICAgICAge2dvb2dDcHVPdmVydXNlRGV0ZWN0aW9uOiB0cnVlfVxuICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uID0gcGVlclxuICAgICAgdGhpcy5fYWRkQ29ubmVjdGlvbkhhbmRsZXJzKHBlZXIpXG4gICAgICBwLnJlc29sdmUoKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oTkFNRSwgYENvdWxkIG5vdCBjcmVhdGUgYSBSVENQZWVyQ29ubmVjdGlvbi4gRXJyb3I6ICR7ZS5tZXNzYWdlfWApXG4gICAgICBwLnJlamVjdChlLm1lc3NhZ2UpXG4gICAgfVxuICAgIHJldHVybiBwLmhhc093blByb3BlcnR5KCdwcm9taXNlJykgPyBwLnByb21pc2UgOiBwXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzZXR1cCB0aGUgcHJveGllZCBQZWVyIENvbm5lY3Rpb24gaW5zdGFuY2Ugd2l0aCBkZWZpbmVkIFJUQ0NvbmZpZ3VyYXRpb24uXG4gICAqIFVzZSBlaXRoZXIgYHNldFVwYCBvciBgc2V0VXBXaXRoUGVlckNvbmZpZ3VyYXRpb25gLlxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUlRDUGVlckNvbm5lY3Rpb24vUlRDUGVlckNvbm5lY3Rpb24jUlRDQ29uZmlndXJhdGlvbl9kaWN0aW9uYXJ5XG4gICAqXG4gICAqIEBwYXJhbSB7UlRDQ29uZmlndXJhdGlvbn0gY29uZmlndXJhdGlvblxuICAgKiAgICAgICAgQSBjdXN0b20gUlRDQ29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtQcm9taXNlfSBzZXRVcFByb21pc2VcbiAgICogICAgICAgIFRoZSBgUHJvbWlzZWAgdG8gcmVzb2x2ZSBvciByZWplY3Qgb24gaW4gc3VjY2VzcyBpbiBzZXR0aW5nIHVwIHRoZSBQZWVyIENvbm5lY3Rpb24uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBzZXRVcFdpdGhQZWVyQ29uZmlndXJhdGlvbiAoY29uZmlndXJhdGlvbiwgc2V0VXBQcm9taXNlID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy50ZWFyRG93bigpXG4gICAgY29uc3QgcCA9IHNldFVwUHJvbWlzZSB8fCBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICB0cnkge1xuICAgICAgZGVidWcoTkFNRSwgYFtwZWVyY29ubmVjdGlvbjpzZXRVcFdpdGhQZWVyQ29uZmlndXJhdGlvbl06ICR7SlNPTi5zdHJpbmdpZnkoY29uZmlndXJhdGlvbiwgbnVsbCwgMil9YClcbiAgICAgIGxldCBwZWVyID0gbmV3IHdlYnJ0Yy5SVENQZWVyQ29ubmVjdGlvbihjb25maWd1cmF0aW9uLFxuICAgICAgICB7XG4gICAgICAgICAgb3B0aW9uYWw6IFtcbiAgICAgICAgICAgIHtSdHBEYXRhQ2hhbm5lbHM6IGZhbHNlfSxcbiAgICAgICAgICAgIHtnb29nQ3B1T3ZlcnVzZURldGVjdGlvbjogdHJ1ZX1cbiAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgICB0aGlzLl9hZGRDb25uZWN0aW9uSGFuZGxlcnMocGVlcilcbiAgICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uID0gcGVlclxuICAgICAgcC5yZXNvbHZlKHBlZXIpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybihOQU1FLCBgQ291bGQgbm90IGVzdGFibGlzaCBhIFBlZXJDb25uZWN0aW9uLiAke2UubWVzc2FnZX1gKVxuICAgICAgcC5yZWplY3QoZS5tZXNzYWdlKVxuICAgIH1cbiAgICByZXR1cm4gcC5oYXNPd25Qcm9wZXJ0eSgncHJvbWlzZScpID8gcC5wcm9taXNlIDogcFxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gdGVhciBkb3duIHByb3hpZWQgUGVlciBDb25uZWN0aW9uIGluc3RhbmNlLlxuICAgKi9cbiAgdGVhckRvd24gKCkge1xuICAgIGlmICh0aGlzLl9wZWVyQ29ubmVjdGlvbikge1xuICAgICAgZGVidWcoTkFNRSwgJ1t0ZWFyZG93bl0nKVxuICAgICAgdGhpcy5fcmVtb3ZlQ29ubmVjdGlvbkhhbmRsZXJzKHRoaXMuX3BlZXJDb25uZWN0aW9uKVxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fcGVlckNvbm5lY3Rpb24uY2xvc2UoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3YXJuKE5BTUUsIGBbcGVlcmNvbm5lY3Rpb24uY2xvc2VdIGVycm9yOiAke2UubWVzc2FnZX1gKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9wZW5kaW5nTWVkaWFTdHJlYW0gPSB1bmRlZmluZWRcbiAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbiA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIEFjY2Vzc29yIGZvciB0aGUgcHJveGllZCBSVENQZWVyQ29ubmVjdGlvbiBpbnN0YW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7UlRDUGVlckNvbm5lY3Rpb259XG4gICAqL1xuICBnZXQgY29ubmVjdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BlZXJDb25uZWN0aW9uXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTdWJzY3JpcHRpb25QZWVySGVscGVyXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9oZWxwZXIvd2VicnRjLWhlbHBlci1zdWIuanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IHsgbmFtZUZyb21MZXZlbCB9IGZyb20gJ2Jyb3dzZXItYnVueWFuJ1xuXG4vKipcbiAqIEN1c3RvbSBsb2dnZXIgZm9yIGJ1bnlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgUmF3U3RyZWFtIHtcbiAgd3JpdGUgKHJlYykge1xuICAgIGNvbnNvbGUubG9nKCclcyAtIFslc10gJXM6ICVzJywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICByZWMudGltZS50b0lTT1N0cmluZygpLFxuICAgICAgcmVjLm5hbWUsXG4gICAgICBuYW1lRnJvbUxldmVsW3JlYy5sZXZlbF0sXG4gICAgICByZWMubXNnXG4gICAgKVxuICB9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9sb2cvYnVueWFuLXdyaXRlci5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgSW1wbEZhY3RvcnlPcmRlciBmcm9tICcuLi91dGlsL2ltcGwtZmFjdG9yeS1vcmRlcidcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vY29yZS9ldmVudC1lbWl0dGVyJ1xuaW1wb3J0IFJUTVBQdWJsaXNoZXIgZnJvbSAnLi9yZWQ1cHJvLXJ0bXAnXG5pbXBvcnQgUlRDUHVibGlzaGVyIGZyb20gJy4vcmVkNXByby1ydGMnXG5cbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcbmltcG9ydCB7IFB1Ymxpc2hUeXBlcyB9IGZyb20gJy4uL2VudW0vcHVibGlzaCdcbmltcG9ydCB7IGRlYnVnLCB3YXJuIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBOQU1FID0gJ1JlZDVQcm9QdWJsaXNoZXInXG5jb25zdCBwdWJsaXNoRmFjdG9yeSA9IG5ldyBJbXBsRmFjdG9yeU9yZGVyKClcbmNvbnN0IHB1Ymxpc2hlckltcGwgPSAoZnVuY3Rpb24gKCkge1xuICBsZXQgbWFwID0gbmV3IE1hcCgpXG4gIG1hcC5zZXQoUHVibGlzaFR5cGVzLlJUQywgUlRDUHVibGlzaGVyKVxuICBtYXAuc2V0KFB1Ymxpc2hUeXBlcy5SVE1QLCBSVE1QUHVibGlzaGVyKVxuICByZXR1cm4gbWFwXG59KCkpXG5cbi8qKlxuICogTWFpbiBlbnRyeSBmb3IgZmFpbG92ZXIgc3VwcG9ydCBvZiBhbGwgcHVibGlzaGVyIGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqL1xuY2xhc3MgUmVkNVByb1B1Ymxpc2hlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl9vcHRpb25zID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fb3JkZXIgPSBbXG4gICAgICBQdWJsaXNoVHlwZXMuUlRDLFxuICAgICAgUHVibGlzaFR5cGVzLlJUTVBcbiAgICBdXG4gIH1cblxuICAvKipcbiAgICogVXRpbGl6ZXMgRmFpbG92ZXIgUHVibGlzaGVyIEZhY3RvcnkgdG8gYXR0ZW1wdCBpbiBkZXRlcm1pbmluZyBicm93c2VyIHN1cHBvcnQgZm9yIFB1Ymxpc2hlciBmcm9tIGRlZmluZWQgb3JkZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UHVibGlzaGVyRnJvbU9yZGVyIChvcmRlciwgb3B0aW9ucykge1xuICAgIHJldHVybiBwdWJsaXNoRmFjdG9yeS5jcmVhdGUob3JkZXIsIHB1Ymxpc2hlckltcGwsIG9wdGlvbnMsICdpbml0JylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzcGVjaWZpZWQgb3JkZXIgZm9yIGF1dG8tZmFpbG92ZXIuXG4gICAqXG4gICAqICBAcmV0dXJuIHtBcnJheX1cbiAgICogICAgICAgICAgRGVmYXVsdDogYFsncnRjJywgJ3J0bXAnXWAuXG4gICAqL1xuICBnZXRQdWJsaXNoT3JkZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9vcmRlclxuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGRlc2lyZWQgYXV0by1mYWlsb3ZlciBvcmRlci5cbiAgICpcbiAgICogIEBwYXJhbSB7QXJyYXl9IG9yZGVyXG4gICAqICAgICAgICAgIFRoZSBkZXNpcmVkIG9yZGVyLiBlLmcsIGBbJ3J0YycsICdydG1wJ11gLlxuICAgKlxuICAgKiAgQHJldHVybiB7UmVkNVByb1B1Ymxpc2hlcn1cbiAgICogICAgICAgICAgVGhpcyBpbnN0YW5jZS5cbiAgICovXG4gIHNldFB1Ymxpc2hPcmRlciAob3JkZXIpIHtcbiAgICAvLyBBbGxvdyBmb3Igc3RyaW5nIHZhbHVlIHRvIGRlZmluZSBzaW5nbGUgaXRlbSBpbiBvcmRlci5cbiAgICBvcmRlciA9IHR5cGVvZiBvcmRlciA9PT0gJ3N0cmluZycgPyBbb3JkZXJdIDogb3JkZXJcblxuICAgIC8vIEZpbHRlciBvdXQgdmFsdWVzIG5vdCBhdmFpbGFibGUgaW4gZW51bWVyYXRpb24gb2YgcGxheWJhY2sgdHlwZXMuXG4gICAgY29uc3QgdCA9IG9yZGVyLmZpbHRlcihlbnRyeSA9PiB7XG4gICAgICBsZXQga2V5XG4gICAgICBmb3IgKGtleSBpbiBQdWJsaXNoVHlwZXMpIHtcbiAgICAgICAgaWYgKFB1Ymxpc2hUeXBlc1trZXldLnRvTG93ZXJDYXNlKCkgPT09IGVudHJ5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KS5tYXAoZW50cnkgPT4gZW50cnkudG9Mb3dlckNhc2UoKSlcblxuICAgIC8vIERlZmluZSBuZXcgb3JkZXIuXG4gICAgdGhpcy5fb3JkZXIgPSBbLi4ubmV3IFNldCh0KV1cbiAgICBkZWJ1ZyhOQU1FLCBgW29yZGVydXBkYXRlXTogJHt0aGlzLl9vcmRlcn1gKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBpbml0aWFsaXplIGFuZCBkZXRlcm1pbmUgdGhlIHByb3BlciBQdWJsaXNoZXIgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gY29uZmlndXJhdGlvbi5cbiAgICogVGhlIHJldHVybmVkIGBQcm9taXNlYCB3aWxsIGVpdGhlciByZXNvbHZlIHdpdGggdGhlIGRldGVybWluZWQgUHVibGlzaGVyIGluc3RhbmNlIG9yIHJlamVjdCB3aXRoIGFuIGVycm9yIFN0cmluZyBpbiBmYWlsdXJlIHRvIGRldGVybWluZSBQdWJsaXNoZXIgdHlwZS5cbiAgICpcbiAgICogIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgICAgICAgIFRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIG1hcCBmb3IgZWFjaCBkZXNpcmVkIGZhaWxvdmVyIHRlY2guXG4gICAqICBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgaW5pdCAob3B0aW9ucykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgZGVidWcoTkFNRSwgJ1twdWJsaXNoXScpXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLl9nZXRQdWJsaXNoZXJGcm9tT3JkZXIodGhpcy5fb3JkZXIsIHRoaXMuX29wdGlvbnMpXG4gICAgICAudGhlbihwdWJsaXNoZXIgPT4ge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHB1Ymxpc2hlcilcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgd2FybihOQU1FLCBgW3B1Ymxpc2hlcnJvcl06IENvdWxkIG5vdCBpbXBsZW1lbnQgYSBwdWJsaXNoZXI6ICR7ZXJyfWApXG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpXG4gICAgICB9KVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGVudW1lcmF0ZWQgdmFsdWUgUHVibGlzaGVyIHR5cGVzIHVzZWQgaW4gZmFpbG92ZXIgb3JkZXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXQgcHVibGlzaFR5cGVzICgpIHtcbiAgICByZXR1cm4gUHVibGlzaFR5cGVzXG4gIH1cblxufVxuXG5leHBvcnQgeyBSZWQ1UHJvUHVibGlzaGVyLCBSVE1QUHVibGlzaGVyLCBSVENQdWJsaXNoZXIgfVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3B1Ymxpc2hlci9pbmRleC5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgKiBhcyBlbWJlZCBmcm9tICcuLi9lbnYvZW1iZWQnXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi4vZW52L2Jyb3dzZXInXG5pbXBvcnQgUlRNUFNoYXJlZE9iamVjdEhhbmRsZXIgZnJvbSAnLi4vaGVscGVyL3NoYXJlZG9iamVjdC1oZWxwZXItcnRtcCdcbmltcG9ydCB7IHRvSW50IH0gZnJvbSAnLi4vdXRpbCdcbmltcG9ydCB7IGRlZXBDb3B5IH0gZnJvbSAnLi4vdXRpbC9vYmplY3QnXG5pbXBvcnQgeyBGdXR1cmUgfSBmcm9tICcuLi91dGlsL3Byb21pc2UnXG5pbXBvcnQgeyBkZWJ1Zywgd2FybiB9IGZyb20gJy4uL2xvZydcblxuY29uc3QgTkFNRSA9ICdSNVByb1B1Ymxpc2hlclNvdXJjZUhhbmRsZXInXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSB2aWRlbyBkaW1lbnNpb25zIHNldHRpbmcgdmFsdWUgYmFzZWQgb24gcG9zc2libGUgZGVmaW5pdGlvbiB1c2luZyBgTWVkaWFDb25zdHJhaW50YC5cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGNvbnZlcnREaW1lbnNpb25PcHRpb25zID0gKHZvKSA9PiB7XG4gIHJldHVybiB2by5leGFjdCB8fCB2by5pZGVhbCB8fCB2by5tYXggfHwgdm8ubWluIHx8IHZvXG59XG5cbi8qKlxuICogRGVmaW5lIHRoZSBhdWRpbyBhbmQgdmlkZW8gc2V0dGluZ3MgZm9yIEZsYXNoLlxuICogVGhlIGB3aWR0aGAgYW5kIGBoZWlnaHRgIGF0dHJpYnV0ZXMgcmVsYXRlIHRvIHZpZGVvLiBUaGUgYGF1ZGlvYCBhdHRyaWJ1dGUgaXMgYSBib29sZWFuIGZsYWcuXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBtZWRpYUNvbnN0cmFpbnRzVG9GbGFzaHZhcnMgPSAoY29uc3RyYWludHMsIGZsYXNodmFycykgPT4ge1xuICBsZXQgZnYgPSBkZWVwQ29weShmbGFzaHZhcnMpXG4gIGlmICh0eXBlb2YgY29uc3RyYWludHMudmlkZW8gPT09ICdib29sZWFuJykge1xuICAgIGZ2LnZpZGVvID0gY29uc3RyYWludHMudmlkZW9cbiAgfVxuICBlbHNlIHtcbiAgICBsZXQga2V5XG4gICAgZm9yIChrZXkgaW4gY29uc3RyYWludHMudmlkZW8pIHtcbiAgICAgIGZ2W2tleV0gPSBjb252ZXJ0RGltZW5zaW9uT3B0aW9ucyhjb25zdHJhaW50cy52aWRlb1trZXldKVxuICAgIH1cbiAgICBmdi52aWRlbyA9IHRydWVcbiAgfVxuICBmdi5hdWRpbyA9IHR5cGVvZiBjb25zdHJhaW50cy5hdWRpbyA9PT0gJ2Jvb2xlYW4nID8gY29uc3RyYWludHMuYXVkaW8gOiB0cnVlXG4gIHJldHVybiBmdlxufVxuXG4vKipcbiAqIFRoZSBpbnRlcm5hbCBQdWJsaXNoIFNvdXJjZSBIYW5kbGVyIGZvciBhbiBSVE1QUHVibGlzaGVyLlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUHVibGlzaGVyU291cmNlSGFuZGxlciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gdmlkZW9cbiAgICogICAgICAgIFRoZSB2aWRlbyBET00gRWxlbWVudC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogICAgICAgIFRoZSBwdWJsaXNoZXIgdHlwZTogbW9zdCBsaWtlbHksIGBSVE1QYC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHNvUmVzcG9uZGVyXG4gICAqICAgICAgICBPcHRpb25hbCByZXNwb25kZXIgdG8gU2hhcmVkT2JqZWN0IEFQSS4gSWYgbm90IHByb3ZpZGVkLCB3aWxsIGdlbmVyYXRlIGEgYFJUTVBTaGFyZWRPYmplY3RIYW5kbGVyYCBpbnN0YW5jZSBpbnRlcm5hbGx5LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHZpZGVvLCB0eXBlLCBzb1Jlc3BvbmRlciA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMudmlkZW8gPSB2aWRlb1xuICAgIHRoaXMuY2xvbmUgPSB0aGlzLnZpZGVvLmNsb25lTm9kZSh0cnVlKVxuICAgIHRoaXMuaG9sZGVyID0gdGhpcy52aWRlby5wYXJlbnROb2RlXG4gICAgdGhpcy5fcHVibGlzaGVyVHlwZSA9IHR5cGVcbiAgICB0aGlzLl9zd2ZJZCA9IG51bGxcbiAgICB0aGlzLl9lbWJlZEZ1dHVyZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3NvUmVzcG9uZGVyID0gc29SZXNwb25kZXIgfHwgbmV3IFJUTVBTaGFyZWRPYmplY3RIYW5kbGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0ZWQgYW5kIHVzZWQgYnkgUlRNUFB1Ymxpc2hlciBpbnN0YW5jZSBpbiByZWNvZ25pemluZyBjb21wbGV0aW9uIG9mIGVtYmVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0RW1iZWRPcGVyYXRpb24gKCkge1xuICAgIHRoaXMuX2VtYmVkRnV0dXJlID0gRnV0dXJlLmNyZWF0ZUlmTm90RXhpc3QodGhpcy5fZW1iZWRGdXR1cmUpXG4gICAgcmV0dXJuIHRoaXMuX2VtYmVkRnV0dXJlLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBvZiByZWZlcmVuY2VzIGFuZCBtb2RpZmllZCBkaXNwbGF5LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2xlYW5VcCAoKSB7XG4gICAgLy8gUmV0dXJuIHRvIHByaW9yIERPTSBtYW5pcHVsYXRpb24uXG4gICAgdGhpcy52aWRlby5yZW1vdmUoKVxuICAgIHRoaXMudmlkZW8gPSB0aGlzLmNsb25lLmNsb25lTm9kZSh0cnVlKVxuICAgIHRoaXMuaG9sZGVyLmFwcGVuZENoaWxkKHRoaXMudmlkZW8pXG4gICAgdGhpcy5fZW1iZWRGdXR1cmUgPSB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGRlZmluZSB0aGUgZW1iZWRkaW5nIG9wdGlvbnMgZm9yIGEgUlRNUFB1Ymxpc2hlci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN3ZklkXG4gICAqICAgICAgICBUaGUgdW5pcXVlIGlkIHRvIHVzZSBpbiBlbWJlZGRpbmcgZWxlbWVudC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIHRvIGRldGVybWluZSBmbGFzaHZhcnMgZnJvbS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHN3ZlVybFxuICAgKiAgICAgICAgT3B0aW9uYWwgbG9jYXRpb24gb2YgdGhlIFNXRiBmaWxlIHRvIGVtYmVkLiBEZWZhdWx0IGlzIHJlbGF0aXZlIHBhdGggdG8gYHJlZDVwcm8tc3Vic2NyaWJlci5zd2ZgLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWluRmxhc2hWZXJzaW9uXG4gICAqICAgICAgICBPcHRpb25hbCBzZW12ZXIgb2YgbWluaW11bSBGbGFzaCB2ZXJzaW9uIHRvIGRldGVybWluZSBzdXBwb3J0LiBEZWZhdWx0IGlzIGAxMC4wLjBgLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgVGhlIGBQcm9taXNlYCBlaXRoZXIgcmVzb2x2ZXMgb3IgcmVqZWN0cyB0aGUgc3VjY2VzcyBvZiBlbWJlZCBvbiBwYWdlIHVzaW5nIFNXRk9iamVjdC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFkZFNvdXJjZSAoc3dmSWQsIG9wdGlvbnMsIHN3ZlVybCA9IG51bGwsIG1pbkZsYXNoVmVyc2lvbiA9IG51bGwpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2FkZHNvdXJjZV0nKVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgdGhpcy5fc3dmSWQgPSBzd2ZJZDtcbiAgICB0aGlzLl9lbWJlZEZ1dHVyZSA9IEZ1dHVyZS5jcmVhdGVJZk5vdEV4aXN0KHRoaXMuX2VtYmVkRnV0dXJlKVxuICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy5fZW1iZWRGdXR1cmVcbiAgICBvcHRpb25zLnN3ZiA9IHN3ZlVybCB8fCBvcHRpb25zLnN3ZlxuICAgIG9wdGlvbnMubWluRmxhc2hWZXJzaW9uID0gbWluRmxhc2hWZXJzaW9uIHx8IG9wdGlvbnMubWluRmxhc2hWZXJzaW9uXG4gICAgZW1iZWQuZGVmaW5lRW1iZWRFbGVtZW50KHRoaXMudmlkZW8sIHRoaXMuaG9sZGVyKVxuICAgICAgLnRoZW4oZWxlbWVudElkID0+IHtcbiAgICAgICAgZGVidWcoTkFNRSwgJ1tlbGVtZW50OmNvbXBsZXRlXScpXG4gICAgICAgIGxldCBmbGFzaHZhcnMgPSB7XG4gICAgICAgICAgYnVmZmVyOiBvcHRpb25zLmJ1ZmZlciAhPSBudWxsID8gb3B0aW9ucy5idWZmZXIgOiAxLFxuICAgICAgICAgIHN0cmVhbU1vZGU6IG9wdGlvbnMuc3RyZWFtTW9kZSxcbiAgICAgICAgICBzdHJlYW1OYW1lOiBvcHRpb25zLnN0cmVhbU5hbWUsXG4gICAgICAgICAgYXBwTmFtZTogb3B0aW9ucy5hcHAsXG4gICAgICAgICAgaG9zdDogb3B0aW9ucy5ob3N0XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgZmxhc2h2YXJzLmJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGV4dCkge1xuICAgICAgICAgIGZsYXNodmFycy5yb29tTmFtZSA9IG9wdGlvbnMuY29udGV4dFxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVtYmVkV2lkdGggPT09ICcxMDAlJyB8fCBvcHRpb25zLmVtYmVkSGVpZ2h0ID09PSAnMTAwJScpIHtcbiAgICAgICAgICBmbGFzaHZhcnMuYXV0b3NpemUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbm5lY3Rpb25QYXJhbXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZmxhc2h2YXJzLmNvbm5lY3Rpb25QYXJhbXMgPSBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5jb25uZWN0aW9uUGFyYW1zKSlcbiAgICAgICAgfVxuICAgICAgICBmbGFzaHZhcnMgPSBtZWRpYUNvbnN0cmFpbnRzVG9GbGFzaHZhcnMob3B0aW9ucy5tZWRpYUNvbnN0cmFpbnRzLCBmbGFzaHZhcnMpXG4gICAgICAgIHJldHVybiBlbWJlZC5lbWJlZFN3Zk9iamVjdChzd2ZJZCwgb3B0aW9ucywgZmxhc2h2YXJzLCBlbnZpcm9ubWVudC5nZXRTd2ZPYmplY3QoKSwgZWxlbWVudElkKVxuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgZGVidWcoTkFNRSwgJ1tlbWJlZDpjb21wbGV0ZV0nKVxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHNlbGYpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiBkZWZlcnJlZC5yZWplY3QoZXJyKSlcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY29ubmVjdCB0byBzZXJ2ZXIgZm9yIGEgYnJvYWRjYXN0IHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwdWJsaXNoT3B0aW9uc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29ubmVjdCAocHVibGlzaE9wdGlvbnMpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2Nvbm5lY3RdJylcbiAgICBjb25zdCBlbCA9IGVudmlyb25tZW50LmdldEVtYmVkT2JqZWN0KHRoaXMuX3N3ZklkKVxuICAgIGlmIChlbCkge1xuICAgICAgZWwuY29ubmVjdChwdWJsaXNoT3B0aW9ucylcbiAgICAgIHRoaXMuX3NvUmVzcG9uZGVyLmNvbm5lY3QodGhpcy5fc3dmSWQpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgd2FybihOQU1FLCAnQ291bGQgbm90IGRldGVybWluZSBlbWJlZGRlZCBlbGVtZW50IHdpdGggc3dmIGlkOiAnICsgdGhpcy5fc3dmSWQgKyAnLicpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gZGlzY29ubmVjdCBmcm9tIHNlcnZlci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRpc2Nvbm5lY3QgKCkge1xuICAgIGRlYnVnKE5BTUUsICdbZGlzY29ubmVjdF0nKVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBlbCA9IGVudmlyb25tZW50LmdldEVtYmVkT2JqZWN0KHRoaXMuX3N3ZklkKVxuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmRpc2Nvbm5lY3QoKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5hZGEuXG4gICAgfVxuICAgIHRoaXMuY2xlYW5VcCgpXG4gICAgdGhpcy5fc29SZXNwb25kZXIuZGlzY29ubmVjdCgpXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzZW5kIGEgbWVzc2FnZSB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2ROYW1lXG4gICAqICAgICAgICBUaGUgbWV0aG9kIG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXNzYWdlIHRvIGJlIGFjY2VwdGVkIGJ5IGFsbCBzdWJzY3JpYmVycy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogICAgICAgIFRoZSBkYXRhIG9iamVjdCB0byBzZW5kIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWV0aG9kIG5hbWUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZW5kIChtZXRob2ROYW1lLCBkYXRhKSB7XG4gICAgY29uc3QgZWwgPSBlbnZpcm9ubWVudC5nZXRFbWJlZE9iamVjdCh0aGlzLl9zd2ZJZClcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnNlbmQobWV0aG9kTmFtZSwgZGF0YSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHJlc3BvbnNlIGhhbmRsZXIgb24gU2hhcmVkT2JqZWN0IGNoYW5uZWwgcmVzcG9uZGVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWRkU2hhcmVkT2JqZWN0UmVzcG9uc2VIYW5kbGVyIChoYW5kbGVyKSB7XG4gICAgdGhpcy5fc29SZXNwb25kZXIuYWRkUmVzcG9uc2VIYW5kbGVyKGhhbmRsZXIpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHJlc3BvbnNlIGhhbmRsZXIgb24gU2hhcmVkT2JqZWN0IGNoYW5uZWwgcmVzcG9uZGVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVtb3ZlU2hhcmVkT2JqZWN0UmVzcG9uc2VIYW5kbGVyIChoYW5kbGVyKSB7XG4gICAgdGhpcy5fc29SZXNwb25kZXIucmVtb3ZlUmVzcG9uc2VIYW5kbGVyKGhhbmRsZXIpXG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgbWVzc2FnZSBvbiBTaGFyZWRPYmplY3QgY2hhbm5lbCByZXNwb25kZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqICAgICAgICBUaGUgU2hhcmVkT2JqZWN0IG5hbWUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjYWxsTmFtZVxuICAgKiAgICAgICAgVGhlIG1ldGhvZCBuYW1lIHRvIGJlIGludm9rZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqICAgICAgICBUaGUgc3RydWN0dXJlZCB2YWx1ZSB0byBzZW5kLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2VuZFRvU2hhcmVkT2JqZWN0IChuYW1lLCBjYWxsTmFtZSwgbWVzc2FnZSkge1xuICAgIHRoaXMuX3NvUmVzcG9uZGVyLnNlbmRUb1NoYXJlZE9iamVjdChuYW1lLCBjYWxsTmFtZSwgbWVzc2FnZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBwcm9wZXJ0eSB1cGRhdGUgb24gU2hhcmVkT2JqZWN0IGNoYW5uZWwgcmVzcG9uZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIFNoYXJlZE9iamVjdCBuYW1lLlxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqICAgICAgICBUaGUgcHJvcGVydHkgbmFtZSBvbiB0aGUgU2hhcmVkT2JqZWN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIFRoZSBzdHJ1Y3R1cmVkIHByb3BlcnR5IHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2VuZFByb3BlcnR5VG9TaGFyZWRPYmplY3QgKG5hbWUsIGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9zb1Jlc3BvbmRlci5zZW5kUHJvcGVydHlUb1NoYXJlZE9iamVjdChuYW1lLCBrZXksIHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIHRvIGdldCBTaGFyZWRPYmplY3QgaW5zdGFuY2UgZnJvbSB0aGUgU2hhcmVkT2JqZWN0IGNoYW5uZWwgcmVzcG9uZGVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0UmVtb3RlU2hhcmVkT2JqZWN0IChzaGFyZWRPYmplY3ROYW1lKSB7XG4gICAgdGhpcy5fc29SZXNwb25kZXIuZ2V0UmVtb3RlU2hhcmVkT2JqZWN0KHNoYXJlZE9iamVjdE5hbWUpXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBjb25uZWN0IHRvIGEgc2hhcmVkIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNoYXJlZE9iamVjdE5hbWVcbiAgICogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBTaGFyZWRPYmplY3QuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25uZWN0VG9TaGFyZWRPYmplY3QgKHNoYXJlZE9iamVjdE5hbWUpIHtcbiAgICB0aGlzLl9zb1Jlc3BvbmRlci5jb25uZWN0VG9TaGFyZWRPYmplY3Qoc2hhcmVkT2JqZWN0TmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGNsb3NlIGNvbm5lY3Rpb24gdG8gYSBzaGFyZWQgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2hhcmVkT2JqZWN0TmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIFNoYXJlZE9iamVjdC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNsb3NlU2hhcmVkT2JqZWN0IChzaGFyZWRPYmplY3ROYW1lKSB7XG4gICAgdGhpcy5fc29SZXNwb25kZXIuY2xvc2VTaGFyZWRPYmplY3Qoc2hhcmVkT2JqZWN0TmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXByZWNhdGVkLiBSZXF1ZXN0IHRvIHVwZGF0ZSBicm9hZGNhc3QgZGltZW5zaW9ucyBiZWZvcmUgYSBicm9hZGNhc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBxdWFsaXR5XG4gICAqICAgICAgICBFeHBlY3RzIG9iamVjdCB3aXRoIGZvbGxvd2luZyBzdHJ1Y3R1cjogYHt2aWRlbzoge3dpZHRoOkludCwgaGVpZ2h0SW50fX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldE1lZGlhUXVhbGl0eSAocXVhbGl0eSkge1xuICAgIGNvbnN0IGVsID0gZW52aXJvbm1lbnQuZ2V0RW1iZWRPYmplY3QodGhpcy5fc3dmSWQpXG4gICAgaWYgKGVsKSB7XG4gICAgICBpZiAocXVhbGl0eS52aWRlbyAmJiB0eXBlb2YgcXVhbGl0eS52aWRlbyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGNvbnN0IHcgPSAhaXNOYU4ocXVhbGl0eS52aWRlby53aWR0aCkgPyB0b0ludChxdWFsaXR5LnZpZGVvLndpZHRoKSA6IE51bWJlci5pc05hTjtcbiAgICAgICAgY29uc3QgaCA9ICFpc05hTihxdWFsaXR5LnZpZGVvLmhlaWdodCkgPyB0b0ludChxdWFsaXR5LnZpZGVvLmhlaWdodCkgOiBOdW1iZXIuaXNOYU47XG4gICAgICAgIGVsLnVwZGF0ZVJlc29sdXRpb24odywgaClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHlwZSBvZiBpbXBsZW1lbnRhdGlvbjogYFJUTVBgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRUeXBlICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVibGlzaGVyVHlwZVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHVibGlzaGVyU291cmNlSGFuZGxlclxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvcHVibGlzaGVyL3B1Yi1zb3VyY2UtaGFuZGxlci5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4uL2NvcmUvZXZlbnQtZW1pdHRlcidcbmltcG9ydCAqIGFzIHdlYnJ0YyBmcm9tICcuLi9hZGFwdGVyL3dlYnJ0YydcbmltcG9ydCAqIGFzIHdlYnNvY2tldCBmcm9tICcuLi9hZGFwdGVyL3dlYnNvY2tldCdcbmltcG9ydCBlbnZpcm9ubWVudCBmcm9tICcuLi9lbnYvYnJvd3NlcidcbmltcG9ydCBQdWJsaXNoZXJTb2NrZXRIZWxwZXIgZnJvbSAnLi4vaGVscGVyL3NvY2tldC1oZWxwZXItcHViJ1xuaW1wb3J0IFB1Ymxpc2hlclBlZXJIZWxwZXIgZnJvbSAnLi4vaGVscGVyL3dlYnJ0Yy1oZWxwZXItcHViJ1xuaW1wb3J0IFB1Ymxpc2hWaWV3IGZyb20gJy4uL3ZpZXcvcHVibGlzaCdcbmltcG9ydCB7IFB1Ymxpc2hlckV2ZW50IH0gZnJvbSAnLi4vZXZlbnQnXG5pbXBvcnQgeyBQdWJsaXNoTW9kZVR5cGVzIH0gZnJvbSAnLi4vZW51bS9wdWJsaXNoJ1xuaW1wb3J0IHsgUHVibGlzaFR5cGVzIH0gZnJvbSAnLi4vZW51bS9wdWJsaXNoJ1xuaW1wb3J0IHsgSWNlVHJhbnNwb3J0VHlwZXMgfSBmcm9tICcuLi9lbnVtL3dlYnJ0YydcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSwgRnV0dXJlIH0gZnJvbSAnLi4vdXRpbC9wcm9taXNlJ1xuaW1wb3J0IHsgUHVibGlzaGVyRXZlbnRUeXBlcywgUlRDUHVibGlzaGVyRXZlbnRUeXBlcyB9IGZyb20gJy4uL2V2ZW50J1xuaW1wb3J0IHsgUlRDTWVkaWFDb25zdHJhaW50IH0gZnJvbSAnLi9jb25zdHJhaW50J1xuaW1wb3J0IHsgcnRjU29ja2V0RW5kcG9pbnRGcm9tT3B0aW9ucyBhcyBlbmRwb2ludEZyb21PcHRpb25zIH0gZnJvbSAnLi4vdXRpbC91cmwtZW5kcG9pbnQnXG5pbXBvcnQgeyBkZWJ1ZyBhcyBkZWJ1Z0xvZyB9IGZyb20gJy4uL2xvZydcbmltcG9ydCB7IGVycm9yIGFzIGVycm9yTG9nIH0gZnJvbSAnLi4vbG9nJ1xuaW1wb3J0IHsgd2FybiBhcyB3YXJuTG9nIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBwdWJTdGFydFJlZ2V4ID0gLyguKikgc3RhcnRpbmcvaVxuY29uc3QgcHViU3RvcFJlZ2V4ID0gLyguKikgc3RvcHBpbmcvaVxuY29uc3QgTkFNRSA9ICdSVENQdWJsaXNoZXInXG5jb25zdCBkZWJ1ZyA9IChtZXNzYWdlKSA9PiB7XG4gIGRlYnVnTG9nKE5BTUUsIG1lc3NhZ2UpXG59XG5jb25zdCB3YXJuID0gKG1lc3NhZ2UpID0+IHtcbiAgd2FybkxvZyhOQU1FLCBtZXNzYWdlKVxufVxuY29uc3QgZXJyb3IgPSAobWVzc2FnZSkgPT4ge1xuICBlcnJvckxvZyhOQU1FLCBtZXNzYWdlKVxufVxuXG4vLyBEZWZhdWx0IHRvIHNlY3VyZSBzZXR0aW5ncy5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBwcm90b2NvbDogJ3dzcycsXG4gIHBvcnQ6IDQ0MyxcbiAgYXBwOiAnbGl2ZScsXG4gIHN0cmVhbU1vZGU6IFB1Ymxpc2hNb2RlVHlwZXMuTElWRSxcbiAga2V5RnJhbWVyYXRlOiAzMDAwLFxuICBtZWRpYUVsZW1lbnRJZDogJ3JlZDVwcm8tcHVibGlzaGVyJyxcbiAgcnRjQ29uZmlndXJhdGlvbjoge1xuICAgIGljZVNlcnZlcnM6IFt7dXJsczogJ3N0dW46c3R1bjIubC5nb29nbGUuY29tOjE5MzAyJ31dLFxuICAgIGljZUNhbmRpZGF0ZVBvb2xTaXplOiAyLFxuICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnXG4gIH0sIC8vIEZhdm9yZWQgb3ZlciBpY2VTZXJ2ZXJzLlxuICBpY2VTZXJ2ZXJzOiB1bmRlZmluZWQsIC8vIERlcHJlY2F0ZWQuIFByZXNlcnZlZCBmb3IgYmFja3dhcmQtY29tcGF0aWJpbGl0eS5cbiAgaWNlVHJhbnNwb3J0OiBJY2VUcmFuc3BvcnRUeXBlcy5VRFAsXG4gIGJhbmR3aWR0aDoge1xuICAgIGF1ZGlvOiA1NixcbiAgICB2aWRlbzogNTEyXG4gIH0sXG4gIG1lZGlhQ29uc3RyYWludHM6IG5ldyBSVENNZWRpYUNvbnN0cmFpbnQoKSxcbiAgb25HZXRVc2VyTWVkaWE6IHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIE1haW4gZW50cnkgZm9yIFdlYlJUQy1iYXNlZCBQdWJsaXNoZXIuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKi9cbmNsYXNzIFJUQ1B1Ymxpc2hlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl9vcHRpb25zID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fdmlldyA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3BlZXJIZWxwZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9zb2NrZXRIZWxwZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9tZWRpYVN0cmVhbSA9IHVuZGVmaW5lZFxuXG4gICAgdGhpcy5fc3RyZWFtRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fYXZhaWxhYmxlRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fcGVlckZ1dHVyZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX29mZmVyRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fc2VuZE9mZmVyRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fdHJpY2tsZUVuZEZ1dHVyZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3B1Ymxpc2hGdXR1cmUgPSB1bmRlZmluZWRcbiAgICB0aGlzLl91bnB1Ymxpc2hGdXR1cmUgPSB1bmRlZmluZWRcblxuICAgIHRoaXMuX29uT3JpZW50YXRpb25DaGFuZ2UgPSB0aGlzLl9vbk9yaWVudGF0aW9uQ2hhbmdlLmJpbmQodGhpcylcbiAgfVxuXG4gIF9nZXRNZWRpYVN0cmVhbSAoKSB7XG4gICAgdGhpcy5fc3RyZWFtRnV0dXJlID0gRnV0dXJlLmNyZWF0ZUlmTm90RXhpc3QodGhpcy5fc3RyZWFtRnV0dXJlKVxuICAgIHJldHVybiB0aGlzLl9zdHJlYW1GdXR1cmUucHJvbWlzZVxuICB9XG5cbiAgX2dldFRyaWNrbGVFbmQgKCkge1xuICAgIHJldHVybiBGdXR1cmUuY3JlYXRlSWZOb3RFeGlzdCh0aGlzLl90cmlja2xlRW5kRnV0dXJlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgaW50ZXJuYWwgYGdldFVzZXJNZWRpYWAgbG9naWMgdG8gZGV0ZXJtaW5lIGJyb2FkY2FzdCBjb25zdHJhaW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBpbml0aWFsaXphdGlvbiBvcHRpb25zIHByb3ZpZGVkIGluIGBpbml0KClgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2d1bSAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLm9uR2V0VXNlck1lZGlhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlYnVnKCdSZXF1ZXN0aW5nIGdVTSBmcm9tIHVzZXItZGVmaW5lZCBjb25maWd1cmF0aW9uOm9uR2V0VXNlck1lZGlhLicpXG4gICAgICBvcHRpb25zLm9uR2V0VXNlck1lZGlhKClcbiAgICAgICAgLnRoZW4obWVkaWEgPT4ge1xuICAgICAgICAgIHRoaXMuX3N0cmVhbUZ1dHVyZS5yZXNvbHZlKG1lZGlhKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBlcnJvcihgQ291bGQgbm90IHJlc29sdmUgTWVkaWFBc3NldCBmcm9tIHByb3ZpZGVkIGdVTS4gRXJyb3IgLSAke2Vycn1gKVxuICAgICAgICAgIHRoaXMuX3N0cmVhbUZ1dHVyZS5yZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGRlYnVnKGBSZXF1ZXN0aW5nIGdVTSB1c2luZyBtZWRpYUNvbnN0cmFpbnRzOiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMubWVkaWFDb25zdHJhaW50cywgbnVsbCwgMil9YClcbiAgICAgIHRoaXMuX3BlZXJIZWxwZXIuZ2V0VXNlck1lZGlhKG9wdGlvbnMubWVkaWFDb25zdHJhaW50cylcbiAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICBkZWJ1ZyhgRm91bmQgdmFsaWQgY29uc3RyYWludHM6ICR7SlNPTi5zdHJpbmdpZnkocmVzLmNvbnN0cmFpbnRzLCBudWxsLCAyKX1gKVxuICAgICAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5ESU1FTlNJT05fQ0hBTkdFLCB0aGlzLCByZXMuY29uc3RyYWludHMpKVxuICAgICAgICAgIHRoaXMuX3N0cmVhbUZ1dHVyZS5yZXNvbHZlKHJlcy5tZWRpYSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKHJlaiA9PiB7XG4gICAgICAgICAgZGVidWcoYENvdWxkIG5vdCBmaW5kIHZhbGlkIGNvbnN0cmFpbnQgcmVzb2x1dGlvbnMgZnJvbTogJHtKU09OLnN0cmluZ2lmeShyZWouY29uc3RyYWludHMsIG51bGwsIDIpfWApXG4gICAgICAgICAgZXJyb3IoYENvdWxkIG5vdCByZXNvbHZlIE1lZGlhQXNzZXQgZnJvbSBwcm92aWRlZCBtZWRpYUNvbnN0cmFpbnRzLiBFcnJvciAtICR7cmVqLmVycm9yfWApXG4gICAgICAgICAgZGVidWcoYEF0dGVtcHRpbmcgdG8gZmluZCByZXNvbHV0aW9ucyBmcm9tIG9yaWdpbmFsIHByb3ZpZGVkIGNvbnN0cmFpbnRzOiAke0pTT04uc3RyaW5naWZ5KHJlai5jb25zdHJhaW50cywgbnVsbCwgMil9YClcbiAgICAgICAgICAvLyBhbGxvd2luZyB0byB0cnkgb3JpZ2luYWwgY29uc3RyYWludCByZXF1ZXN0ZWQuXG4gICAgICAgICAgb3B0aW9ucy5vbkdldFVzZXJNZWRpYSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZWVySGVscGVyLmZvcmNlVXNlck1lZGlhKHJlai5jb25zdHJhaW50cylcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fZ3VtKG9wdGlvbnMpXG4gICAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgdXBvbiBgb25vcmllbnRhdGlvbmNoYW5nZWAgb2YgdGhlIGJyb3dzZXIuIE1vYmlsZSBicm93c2VycyBvbmx5LlxuICAgKlxuICAgKiBAcGFyYW0ge2ludH0gb3JpZW50YXRpb25cbiAgICogICAgICAgIFRoZSBvcmllbnRhdGlvbiB2YWx1ZSBvZiB0aGUgZGV2aWNlIGJyb3dzZXIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAgIF9vbk9yaWVudGF0aW9uQ2hhbmdlIChvcmllbnRhdGlvbikge1xuICAgICAgaWYgKHRoaXMuX3NvY2tldEhlbHBlcikge1xuICAgICAgICB0aGlzLl9zb2NrZXRIZWxwZXIucG9zdCh7XG4gICAgICAgICAgc2VuZDoge1xuICAgICAgICAgICAgbWV0aG9kOiAnb25NZXRhRGF0YScsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGRldmljZU9yaWVudGF0aW9uOiBvcmllbnRhdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgdXBvbiByZWNlaXB0IGZyb20gYF9ndW1gIHdpdGggTWVkaWFTdHJlYW0gaW5zdGFuY2UgcmV0dXJuZWQgZnJvbSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge01lZGlhU3RyZWFtfSBtZWRpYVN0cmVhbVxuICAgKiAgICAgICAgVGhlIGBNZWRpYVN0cmVhbWAgb2JqZWN0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uTWVkaWFTdHJlYW1SZWNlaXZlZCAobWVkaWFTdHJlYW0pIHtcbiAgICAvLyAgICBpZiAodGhpcy5fc29ja2V0SGVscGVyICYmICF0aGlzLl9zb2NrZXRIZWxwZXIuaXNUZXJtaW5hdGVkKSB7XG4gICAgICB0aGlzLl9tZWRpYVN0cmVhbSA9IG1lZGlhU3RyZWFtXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFJUQ1B1Ymxpc2hlckV2ZW50VHlwZXMuTUVESUFfU1RSRUFNX0FWQUlMQUJMRSwgdGhpcywgbWVkaWFTdHJlYW0pKVxuICAgICAgaWYgKHRoaXMuX3ZpZXcpIHtcbiAgICAgICAgdGhpcy5fdmlldy5wcmV2aWV3KHRoaXMuX21lZGlhU3RyZWFtKVxuICAgICAgfVxuICAgICAgLy8gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0aWxsIGluIHVzZSwgYnV0IGhvbGQtb3ZlciBvZiBwcmV2aW91cyAzLnggU0RLIHZlcnNpb25zIGRlc2lnbmVkIHRvIHBhaXIgdmlld3MgYW5kIHB1Ymxpc2hlcnMuIEluIDQuMC4wIGl0IGhhcyBiZWVuIGludGVybmFsaXplZC5cbiAgICogQVBJIGRlcHJlY2F0ZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0Vmlld0lmTm90RXhpc3QgKGN1cnJlbnRWaWV3LCBtZWRpYUVsZW1lbnRJZCA9IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBjdXJyZW50VmlldyA9PT0gJ3VuZGVmaW5lZCcgJiYgbWVkaWFFbGVtZW50SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdmlldyA9IG5ldyBQdWJsaXNoVmlldyhtZWRpYUVsZW1lbnRJZClcbiAgICAgICAgdmlldy5hdHRhY2hQdWJsaXNoZXIodGhpcylcbiAgICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IGF2YWlsYWJpbGl0eSBiYXNlZCBvbiB1bmlxdWUgYHN0cmVhbU5hbWVgLlxuICAgKiBUaGUgcmV0dXJuIGZyb20gdGhlIFdlYlNvY2tldCByZXF1ZXN0IHdpbGwgZWl0aGVyIGludm9rZSBgb25TdHJlYW1BdmFpbGFibGVgIG9yIGBvblN0cmVhbVVuYXZhaWxhYmxlYC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmVhbU5hbWVcbiAgICogICAgICAgIFRoZSB1bmlxdWUgc3RyZWFtIG5hbWUgdG8gY2hlY2sgaWYgaXQgaXMgX3VuYXZhaWxhYmxlXyAtIG1lYW5pbmcgZnJlZSB0byBwdWJsaXNoIGFnYWluc3QuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqICAgICAgICBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmUvcmVqZWN0IHRoZSBgX2F2YWlsYWJsZUZ1dHVyZWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVxdWVzdEF2YWlsYWJpbGl0eSAoc3RyZWFtTmFtZSkge1xuICAgIGRlYnVnKCdbcmVxdWVzdGF2YWlsYWJpbGl0eV0nKVxuICAgIC8vdGhpcy5fYXZhaWxhYmxlRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fYXZhaWxhYmxlRnV0dXJlID0gRnV0dXJlLmNyZWF0ZUlmTm90RXhpc3QodGhpcy5fYXZhaWxhYmxlRnV0dXJlKVxuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIGlzQXZhaWxhYmxlOiBzdHJlYW1OYW1lLFxuICAgICAgYnVuZGxlOiBmYWxzZVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuX2F2YWlsYWJsZUZ1dHVyZS5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzZXR1cCBSVENQZWVyQ29ubmVjdGlvbiBpbnN0YW5jZSBmb3IgZXhjaGFuZ2Ugb2YgU0RQIGxvY2FsbHkgYW5kIHJlbW90ZWx5LlxuICAgKlxuICAgKiBAcGFyYW0ge1JUQ0NvbmZpZ3VyYXRpb259IHJ0Y0NvbmZpZ3VyYXRpb25cbiAgICogICAgICAgIEEgY3VzdG9tIFJUQ0NvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIHtBcnJheX0gaWNlU2VydmVyc1xuICAgKiAgICAgICAgTGlzdCBvZiBJQ0Ugc2VydmVyc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlL3JlamVjdCB0aGUgYF9wZWVyRnV0dXJlYC5cbiAgICpcbiAgICogQG5vdGUgRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGtlZXBpbmcgYXJndW1lbnRzIGFzIG9wdGlvbmFsLCB3aXRoIGF0IGxlYXN0IG9uZSBiZWluZyBmdWxmaWxsZWQuIFRoZSBgY29uZmlndXJhdGlvbmAgcGFyYW0gd2lsbCBiZSBmYXZvcmVkIGFmdGVyIDUuNC4wLCBgaWNlU2VydmVyc2AgaXMgdXAgZm9yIGRlcHJlY2F0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZVBlZXJDb25uZWN0aW9uIChjb25maWd1cmF0aW9uLCBpY2VTZXJ2ZXJzID0gdW5kZWZpbmVkKSB7XG4gICAgZGVidWcoJ1tjcmVhdGVwZWVlcl0nKVxuICAgIHRoaXMuX3BlZXJGdXR1cmUgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9wZWVyRnV0dXJlID0gRnV0dXJlLmNyZWF0ZUlmTm90RXhpc3QodGhpcy5fcGVlckZ1dHVyZSlcblxuICAgIGlmIChpY2VTZXJ2ZXJzICYmIGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgIHdhcm4oJ1RoZSBpY2VTZXJ2ZXJzIGNvbmZpZ3VyYXRpb24gcHJvcGVydHkgaXMgY29uc2lkZXJlZCBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRoZSBydGNDb25maWd1cmF0aW9uIGNvbmZpZ3VyYXRpb24gcHJvcGVydHkgdXBvbiB3aGljaCB5b3UgY2FuIGFzc2lnbiBpY2VTZXJ2ZXJzLiBSZWZlcmVuY2U6IGh0dHBzOi8vd3d3LnJlZDVwcm8uY29tL2RvY3Mvc3RyZWFtaW5nL21pZ3JhdGlvbmd1aWRlLmh0bWwnKTtcbiAgICAgIGNvbmZpZ3VyYXRpb24uaWNlU2VydmVycyA9IGljZVNlcnZlcnNcbiAgICB9XG4gICAgbGV0IHBcbiAgICBpZiAoY29uZmlndXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwID0gdGhpcy5fcGVlckhlbHBlci5zZXRVcFdpdGhQZWVyQ29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uLCB0aGlzLl9wZWVyRnV0dXJlKVxuICAgIH0gZWxzZSB7XG4gICAgICBwID0gdGhpcy5fcGVlckhlbHBlci5zZXRVcChpY2VTZXJ2ZXJzLCB0aGlzLl9wZWVyRnV0dXJlLCB0aGlzLl9vcHRpb25zLnJ0Y3BNdXhQb2xpY3kpXG4gICAgfVxuICAgIHJldHVybiBwXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBnZW5lcmF0ZSBvZmZlciBvbiBQZWVyIENvbm5lY3Rpb24gaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBiYW5kd2lkdGhcbiAgICogICAgICAgIE9wdGlvbmFsIGJhbmR3aWR0aCBjb25maWd1cmF0aW9uIG9iamVjdCB0byBtdW5nZSBTRFAuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqICAgICAgICBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmUvcmVqZWN0IGEgc3VjY2VzcyBpbiBjcmVhdGlvbiBvZiB0aGUgb2ZmZXIgdGhyb3VnaCB0aGUgUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZU9mZmVyIChiYW5kd2lkdGggPSBudWxsKSB7XG4gICAgZGVidWcoJ1tjcmVhdGVvZmZlcl0nKVxuICAgIHRoaXMuX29mZmVyRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fb2ZmZXJGdXR1cmUgPSBGdXR1cmUuY3JlYXRlSWZOb3RFeGlzdCh0aGlzLl9vZmZlckZ1dHVyZSlcbiAgICB0aGlzLl9wZWVySGVscGVyLmNyZWF0ZU9mZmVyKGJhbmR3aWR0aCwgdGhpcy5fb2ZmZXJGdXR1cmUpXG4gICAgcmV0dXJuIHRoaXMuX29mZmVyRnV0dXJlLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNldCBhIHJlbW90ZSBkZXNjcmlwdGlvbiBvbiBQZWVyIENvbm5lY3Rpb24gaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZHBcbiAgICogICAgICAgIE9iamVjdCBkZXNjcmliaW5nIHRoZSBTZXNzaW9uIERlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlL3JlamVjdCBpbiBhIHN1Y2Nlc3MgaW4gc2V0dGluZyB0aGUgcmVtb3RlIFNEUCBvbiB0aGUgUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFJlbW90ZURlc2NyaXB0aW9uIChzZHApIHtcbiAgICBkZWJ1ZygnW3NldHJlbW90ZWRlc2NyaXB0aW9uXScpXG4gICAgcmV0dXJuIHRoaXMuX3BlZXJIZWxwZXIuc2V0UmVtb3RlRGVzY3JpcHRpb24oc2RwKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gc2VuZCBvZmZlciBvbiBXZWJTb2NrZXQgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZHBcbiAgICogICAgICAgIE9iamVjdCBkZXNjcmliaW5nIHRoZSBTZXNzaW9uIERlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyZWFtTmFtZVxuICAgKiAgICAgICAgVGhlIHVuaXF1ZSBzdHJlYW0gbmFtZSBvZiB0aGUgYnJvYWRjYXN0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlL3JlamVjdCBvbiB0aGUgc3VjY2VzcyBvZiBkZWxpdmVyaW5nIGFuIG9mZmVyIG92ZXIgdGhlIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZW5kT2ZmZXIgKHNkcCwgc3RyZWFtTmFtZSwgdHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ1tzZW5kb2ZmZXJdJylcbiAgICB0aGlzLl9zZW5kT2ZmZXJGdXR1cmUgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9zZW5kT2ZmZXJGdXR1cmUgPSBGdXR1cmUuY3JlYXRlSWZOb3RFeGlzdCh0aGlzLl9zZW5kT2ZmRnV0dXJlKVxuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIGhhbmRsZU9mZmVyOiBzdHJlYW1OYW1lLFxuICAgICAgdHJhbnNwb3J0OiB0cmFuc3BvcnQsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHNkcDogc2RwXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5fc2VuZE9mZmVyRnV0dXJlLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNlbmQgSUNFIGNhbmRpZGF0ZSBvdmVyIHRoZSBXZWJTb2NrZXQuXG4gICAqIFRoaXMgY2FuIGhhcHBlbiBzZXZlcmFsIHRpbWVzIGluIHRoZSBJQ0UgbmVnb3RpYXRpb24gcHJvY2Vzcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhbmRpZGF0ZVxuICAgKiAgICAgICAgVGhlIENhbmRpZGF0ZSB0byBzZW5kLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyZWFtTmFtZVxuICAgKiAgICAgICAgVGhlIGFzc29jaWF0ZWQgdW5pcXVlIHN0cmVhbSBuYW1lIG9mIHRoZSBicm9hZGNhc3QuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VuZENhbmRpZGF0ZSAoY2FuZGlkYXRlLCBzdHJlYW1OYW1lKSB7XG4gICAgZGVidWcoJ1tzZW5kY2FuZGlkYXRlXScpXG4gICAgdGhpcy5fc29ja2V0SGVscGVyLnBvc3Qoe1xuICAgICAgaGFuZGxlQ2FuZGlkYXRlOiBzdHJlYW1OYW1lLFxuICAgICAgZGF0YToge1xuICAgICAgICBjYW5kaWRhdGU6IGNhbmRpZGF0ZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBvbiBXZWJTb2NrZXQgdG8gYmVnaW4gcHVibGlzaGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmVhbU5hbWVcbiAgICogICAgICAgIFRoZSB1bmlxdWUgc3RyZWFtIG5hbWUgb2YgdGhlIGJyb2FkY2FzdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVcbiAgICogICAgICAgIFRoZSBicm9hZGNhc3QgbW9kZTogYGxpdmVgLCBgcmVjb3JkYCBvciBgYXBwZW5kYC5cbiAgICogQHBhcmFtIHtpbnR9IGZyYW1lcmF0ZVxuICAgKiAgICAgICAgVGhlIGtleSBmcmFtZXJhdGUgdG8gYnJvYWRjYXN0IGF0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlL3JlamVjdCBpbiB0aGUgcmVxdWVzdCB0byBiZWluZyBhIGJyb2FkY2FzdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXF1ZXN0UHVibGlzaCAoc3RyZWFtTmFtZSwgc3RyZWFtTW9kZSwgZnJhbWVyYXRlKSB7XG4gICAgZGVidWcoJ1tyZXF1ZXN0cHVibGlzaF0nKVxuICAgIHRoaXMuX3B1Ymxpc2hGdXR1cmUgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9wdWJsaXNoRnV0dXJlID0gRnV0dXJlLmNyZWF0ZUlmTm90RXhpc3QodGhpcy5fcHVibGlzaEZ1dHVyZSlcbiAgICB0aGlzLl9zb2NrZXRIZWxwZXIucG9zdCh7XG4gICAgICBwdWJsaXNoOiBzdHJlYW1OYW1lLFxuICAgICAgbW9kZTogc3RyZWFtTW9kZSxcbiAgICAgIGtleUZyYW1lcmF0ZTogZnJhbWVyYXRlXG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5fcHVibGlzaEZ1dHVyZS5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzdG9wIGEgY3VycmVudCBicm9hZGNhc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJlYW1OYW1lXG4gICAqICAgICAgICBUaGUgdW5pcXVlIHN0cmVhbSBuYW1lIGJlaW5nIGJyb2FkY2FzdCBvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogICAgICAgIFRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZS9yZWplY3Qgb24gc3VjY2VzcyBvZiBwcm9wZXJseSBzdG9wcGluZyBhIGJyb2FkY2FzdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXF1ZXN0VW5wdWJsaXNoIChzdHJlYW1OYW1lKSB7XG4gICAgdGhpcy5fdW5wdWJsaXNoRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fdW5wdWJsaXNoRnV0dXJlID0gRnV0dXJlLmNyZWF0ZUlmTm90RXhpc3QodGhpcy5fdW5wdWJsaXNoRnV0dXJlKVxuICAgIC8vIElmIHdlIGdldCBhIGZhbHNlIHJlc3BvbnNlIGZyb20gdHJ5aW5nIHRvIHNlbmQgYSBjbG9zZSBQT1NULFxuICAgIC8vICBpdCBtZWFucyB0aGF0IHRoZSBzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnkgYW5vdGhlciBpbXBldHVzIC1cbiAgICAvLyAgbW9zdCBsaWtsZXkgbG9zcyBvZiBuZXR3b3JrIG9yIHNlcnZlciBmYWlsdXJlLlxuICAgIGlmICghdGhpcy5fc29ja2V0SGVscGVyLnBvc3Qoe1xuICAgICAgICAgIHVucHVibGlzaDogc3RyZWFtTmFtZVxuICAgICAgICB9KSkge1xuICAgICAgdGhpcy5fdW5wdWJsaXNoRnV0dXJlLnJlc29sdmUoKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdW5wdWJsaXNoRnV0dXJlLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGluaXRpYWxpemUgdGhlIFdlYlJUQy1iYXNlZCBQdWJsaXNoZXIgYmFzZWQgb24gY29uZmlndXJhdGlvbi5cbiAgICogVGhlIHJldHVybmVkIGBQcm9taXNlYCB3aWxsIGVpdGhlciByZXNvbHZlIHdpdGggYSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZSBvciByZWplY3Qgd2l0aCBhbiBlcnJvciBgU3RyaW5nYCBpbiBmYWlsdXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gbWFwLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgaW5pdCAob3B0aW9ucykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgaWYgKCF3ZWJydGMuaXNTdXBwb3J0ZWQoKSB8fCAhd2Vic29ja2V0LmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdCgnQ2Fubm90IGNyZWF0ZSBXZWJSVEMgcGxheWJhY2sgaW5zdGFuY2UuIFlvdXIgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBXZWJSVEMgYW5kL29yIFdlYlNvY2tldHMuJylcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICB0aGlzLl9wZWVySGVscGVyID0gbmV3IFB1Ymxpc2hlclBlZXJIZWxwZXIodGhpcylcbiAgICAgIHRoaXMuX3NvY2tldEhlbHBlciA9IG5ldyBQdWJsaXNoZXJTb2NrZXRIZWxwZXIodGhpcylcbiAgICAgIHRoaXMuX2dldE1lZGlhU3RyZWFtKClcbiAgICAgICAgLnRoZW4odGhpcy5fb25NZWRpYVN0cmVhbVJlY2VpdmVkLmJpbmQodGhpcykpXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgd2FybihgW2d1bV06ICR7ZXJyb3J9YClcbiAgICAgICAgfSlcbiAgICAgIHRoaXMuX2d1bSh0aGlzLl9vcHRpb25zKVxuICAgICAgLy8gYXV0byBwcmV2aWV3LlxuICAgICAgdGhpcy5fc2V0Vmlld0lmTm90RXhpc3QodGhpcy5fdmlldywgdGhpcy5fb3B0aW9ucy5tZWRpYUVsZW1lbnRJZClcbiAgICAgIGRlZmVycmVkLnJlc29sdmUodGhpcylcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGlsbCBpbiB1c2UgZm9yIGFzc2lnbmluZyBkb2N1bWVudCBlbGVtZW50IHZpZXcgbWFuYWdlbWVudCB0byB0aGlzIGluc3RhbmNlLlxuICAgKiBBUEkgZGVwcmVjYXRlZCBpbiA0LjAuMC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldFZpZXcgKHZpZXcpIHtcbiAgICB0aGlzLl92aWV3ID0gdmlld1xuICAgIGlmICh0aGlzLl9tZWRpYVN0cmVhbSAmJiB0aGlzLl92aWV3KSB7XG4gICAgICB0aGlzLl92aWV3LnByZXZpZXcodGhpcy5fbWVkaWFTdHJlYW0pXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU3RpbGwgaW4gdXNlIGZvciBhc3NpZ25pbmcgZG9jdW1lbnQgZWxlbWVudCB2aWV3IG1hbmFnZW1lbnQgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICogQVBJIGRlcHJlY2F0ZWQgaW4gNC4wLjAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcmV2aWV3ICgpIHtcbiAgICBkZWJ1ZygnW3ByZXZpZXddJylcbiAgICBjb25zdCBwID0gbmV3IFByb21pc2UoKHJlcykgPT4ge1xuICAgICAgcmVzKHRoaXMpXG4gICAgfSlcbiAgICB0aGlzLl9zZXRWaWV3SWZOb3RFeGlzdCh0aGlzLl92aWV3LCB0aGlzLl9vcHRpb25zLm1lZGlhRWxlbWVudElkKVxuICAgIHJldHVybiBwXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBiZWdpbiBhIGJyb2FkY2FzdCBzZXNzaW9uIGFmdGVyIGluaXRpbGl6YXRpb24gaGFzIG9jY3VyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJlYW1OYW1lXG4gICAqICAgICAgICBPcHRpb25hbCBzdHJlYW0gbmFtZSB0byBicm9hZGNhc3Qgb24sIG90aGVyd2lzZSBkZWZhdWx0aW5nIHRvIHRoZSBgc3RyZWFtTmFtZWAgcHJvdmlkZWQgaW4gYGluaXQoKWAgY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtQcm9taXNlfSBwcm9taXNlXG4gICAqICAgICAgICBPcHRpb25hbCBgUHJvbWlzZWAgb2JqZWN0IHRvIHJlc29sdmUvcmVqZWN0IG9uIGJhc2VkIG9uIHNlcXVlbmNlIG9mIGV2ZW50cyBpbiBlc3RhYmxpc2hpbmcgYSBicm9hZGNhc3QsIG90aGVyd2lzZSBkZWZhdWx0aW5nIHRvIGBQcm9taXNlYCBjcmVhdGVkIGludGVybmFsbHkgYW5kIHJldHVybmVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgVGhlIHJldHVybmVkIGBQcm9taXNlYCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3NmdWwgc3RhcnQgb2YgYSBicm9hZGNhc3QuPGJyPlxuICAgKiAgICAgICAgVGhlcmUgYXJlIHNldmVyYWwgcHJvY2Vzc2VzIHRoYXQgb2NjdXIgaW4gb3JkZXIgdG8gZXN0YWJsaXNoIGEgV2ViUlRDIGJyb2FkY2FzdCB0aGF0IGludm9sdmUgLSBidXQgYXJlIG5vdCBsaW1pdGVkIHRvIC0gSUNFIGNvbW11bmljYXRpb24gYW5kIGFzc2lnbmluZyBvZiBsb2NhbCBhbmQgcmVtb3RlIFNEUHMgb24gcGVlciBjb25uZWN0aW9ucy5cbiAgICovXG4gIHB1Ymxpc2ggKHN0cmVhbU5hbWUgPSBudWxsLCBwcm9taXNlID0gbnVsbCkge1xuICAgIGRlYnVnKCdbcHVibGlzaF0nKVxuICAgIHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSA9IHN0cmVhbU5hbWUgfHwgdGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lXG4gICAgY29uc3QgcCA9IHByb21pc2UgfHwgbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgY29uc3Qgc29ja2V0UHJvbWlzZSA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIGNvbnN0IHNvY2tldHVybCA9IGVuZHBvaW50RnJvbU9wdGlvbnModGhpcy5fb3B0aW9ucywge1xuICAgICAgaWQ6IHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZVxuICAgIH0pXG4gICAgdGhpcy5fdHJpY2tsZUVuZEZ1dHVyZSA9IHRoaXMuX2dldFRyaWNrbGVFbmQoKVxuICAgIHRoaXMuX3NvY2tldEhlbHBlci5jbGVhclJldHJ5KClcbiAgICB0aGlzLl9zb2NrZXRIZWxwZXIuc2V0VXAoc29ja2V0dXJsLCBzb2NrZXRQcm9taXNlKVxuXG4vLyAwLiBFc3RhYmxpc2ggc29ja2V0IGNvbm5lY3Rpb24uXG4gICAgc29ja2V0UHJvbWlzZS5wcm9taXNlXG4vLyAxLiBXYWl0IGZvciBzdHJlYW0gYXR0YWNoXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5DT05ORUNUX1NVQ0NFU1MsIHRoaXMpKVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWVkaWFTdHJlYW0oKVxuICAgICAgfSlcbi8vIDIuIFJlcXVlc3QgYXZhaWxhYmxlIHN0cmVhbSB0byBwdWJsaXNoIG9uXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QXZhaWxhYmlsaXR5KHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSwgdGhpcy5fb3B0aW9ucy5zdHJlYW1UeXBlKVxuICAgICAgfSlcbi8vIDMuIENyZWF0ZSBQZWVyIENvbm5lY3Rpb25cbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZVBlZXJDb25uZWN0aW9uKHRoaXMuX29wdGlvbnMucnRjQ29uZmlndXJhdGlvbiwgdGhpcy5fb3B0aW9ucy5pY2VTZXJ2ZXJzKVxuICAgICAgfSlcbi8vIDQuIE1ha2UgT2ZmZXIgb24gUGVlciBDb25uZWN0aW9uXG4gICAgICAudGhlbihjb25uZWN0aW9uID0+IHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChSVENQdWJsaXNoZXJFdmVudFR5cGVzLlBFRVJfQ09OTkVDVElPTl9BVkFJTEFCTEUsIHRoaXMsIGNvbm5lY3Rpb24pKVxuICAgICAgICBjb25uZWN0aW9uLmFkZFN0cmVhbSh0aGlzLl9tZWRpYVN0cmVhbSlcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZU9mZmVyKHRoaXMuX29wdGlvbnMuYmFuZHdpZHRoKVxuICAgICAgfSlcbi8vIDUuIFNlbmQgT2ZmZXJcbiAgICAgIC50aGVuKHNlc3Npb25EZXNjcmlwdGlvbiA9PiB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUlRDUHVibGlzaGVyRXZlbnRUeXBlcy5PRkZFUl9TVEFSVCwgdGhpcywgc2Vzc2lvbkRlc2NyaXB0aW9uKSlcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRPZmZlcihzZXNzaW9uRGVzY3JpcHRpb24sIHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSwgdGhpcy5fb3B0aW9ucy5pY2VUcmFuc3BvcnQpXG4gICAgICB9KVxuLy8gNi4gU2V0IHRoZSBzZXNzaW9uIGRlc2NyaXB0aW9uIHJlbW90ZWx5XG4gICAgICAudGhlbihzZHAgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0UmVtb3RlRGVzY3JpcHRpb24oc2RwLnNkcClcbiAgICAgIH0pXG4vLyA3LiBXYWl0IHVudGlsIGljZSB0cmlja2xlIGVuZFxuICAgICAgLnRoZW4oc2RwID0+IHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChSVENQdWJsaXNoZXJFdmVudFR5cGVzLk9GRkVSX0VORCwgdGhpcywgc2RwKSlcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRyaWNrbGVFbmQoKS5wcm9taXNlXG4gICAgICB9KVxuLy8gOC4gUmVxdWVzdCB0byBwdWJsaXNoIHN0cmVhbVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFJUQ1B1Ymxpc2hlckV2ZW50VHlwZXMuSUNFX1RSSUNLTEVfQ09NUExFVEUsIHRoaXMpKVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdFB1Ymxpc2godGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lLCB0aGlzLl9vcHRpb25zLnN0cmVhbU1vZGUsIHRoaXMuX29wdGlvbnMua2V5RnJhbWVyYXRlKVxuICAgICAgfSlcbi8vIDkuIFJlc3VsdHMgaW4gc29ja2V0IG1lc3NhZ2Ugb2YgcHVibGlzaCAoc2VlIDpvblB1Ymxpc2hTdGF0dXMpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGVudmlyb25tZW50LmFkZE9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcih0aGlzLl9vbk9yaWVudGF0aW9uQ2hhbmdlKVxuICAgICAgICBwLnJlc29sdmUodGhpcylcbiAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChQdWJsaXNoZXJFdmVudFR5cGVzLlBVQkxJU0hfU1RBUlQsIHRoaXMpKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgZW52aXJvbm1lbnQucmVtb3ZlT3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKHRoaXMuX29uT3JpZW50YXRpb25DaGFuZ2UpXG4gICAgICAgIHAucmVqZWN0KGVycm9yKVxuICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuQ09OTkVDVF9GQUlMVVJFLCB0aGlzLCBlcnJvcikpXG4gICAgICB9KVxuICAgIHJldHVybiBwLmhhc093blByb3BlcnR5KCdwcm9taXNlJykgPyBwLnByb21pc2UgOiBwXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzdG9wIGEgYnJvYWRjYXN0LlxuICAgKiBUaGUgcmV0dXJuZWQgYFByb21pc2VgIHdpbGwgZWl0aGVyIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3NmdWwgc3RvcCBvZiBicm9hZGNhc3QuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICB1bnB1Ymxpc2ggKCkge1xuICAgIGRlYnVnKE5BTUUsICdbdW5wdWJsaXNoXScpXG4gICAgY29uc3QgY2xlYXJIZWxwZXJzID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3NvY2tldEhlbHBlcikge1xuICAgICAgICBkZWJ1ZyhOQU1FLCAnW3VucHVibGlzaDp0ZWFyZG93bl0nKVxuICAgICAgICB0aGlzLl9zb2NrZXRIZWxwZXIudGVhckRvd24oKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3BlZXJIZWxwZXIpIHtcbiAgICAgICAgdGhpcy5fcGVlckhlbHBlci50ZWFyRG93bigpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2F2YWlsYWJsZUZ1dHVyZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3BlZXJGdXR1cmUgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9vZmZlckZ1dHVyZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3NlbmRPZmZlckZ1dHVyZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3RyaWNrbGVFbmRGdXR1cmUgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9wdWJsaXNoRnV0dXJlID0gdW5kZWZpbmVkXG4gICAgY29uc3QgZiA9IHRoaXMuX3JlcXVlc3RVbnB1Ymxpc2godGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lKVxuICAgIGYudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLl91bnB1Ymxpc2hGdXR1cmUgPSB1bmRlZmluZWRcbiAgICAgIC8vICAgICAgdGhpcy5fbWVkaWFTdHJlYW0gPSB1bmRlZmluZWRcbiAgICAgIGNsZWFySGVscGVycygpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuVU5QVUJMSVNIX1NVQ0NFU1MsIHRoaXMpKVxuICAgIH0pXG4gICAgIGVudmlyb25tZW50LnJlbW92ZU9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcih0aGlzLl9vbk9yaWVudGF0aW9uQ2hhbmdlKVxuICAgIHJldHVybiBmXG4gIH1cblxuICAvKipcbiAgICogRGVwcmVjYXRlZC4gVXNlIGBtdXRlQXVkaW9gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbXV0ZSAoKSB7XG4gICAgLy8gYmFja3dhcmQgY29tYXRpYmlsaXR5IC0gdG8gYmUgZGVwcmVjYXRlZC5cbiAgICB0aGlzLm11dGVBdWRpbygpXG4gIH1cblxuICAvKipcbiAgICogRGVwcmVjYXRlZC4gVXNlIGB1bm11dGVBdWRpb2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1bm11dGUgKCkge1xuICAgIC8vIGJhY2t3YXJkIGNvbWF0aWJpbGl0eSAtIHRvIGJlIGRlcHJlY2F0ZWQuXG4gICAgdGhpcy51bm11dGVBdWRpbygpXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBtdXRlIHRoZSBhdWRpbyBvZiB0aGUgYnJvYWRjYXN0LlxuICAgKiBDYW4gb25seSBiZSBjYWxsZWQgb25jZSB0aGUgYnJvYWRjYXN0IGhhcyBiZWd1bi5cbiAgICovXG4gIG11dGVBdWRpbyAoKSB7XG4gICAgdGhpcy5fc29ja2V0SGVscGVyLnBvc3Qoe1xuICAgICAgbXV0ZToge1xuICAgICAgICBtdXRlQXVkaW86IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gdW5tdXRlIHRoZSBhdWRpbyBvZiBhIGJyb2FkY2FzdCB0aGF0IGhhcyBiZWVuIHByZXZpb3VzbHkgbXV0ZWQuXG4gICAqL1xuICB1bm11dGVBdWRpbyAoKSB7XG4gICAgdGhpcy5fc29ja2V0SGVscGVyLnBvc3Qoe1xuICAgICAgbXV0ZToge1xuICAgICAgICBtdXRlQXVkaW86IGZhbHNlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKiBSZXF1ZXN0IHRvIG11dGUgKG5vdCBzZW5kKSB0aGUgdmlkZW8gb2YgdGhlIGJyb2FkY2FzdC5cbiAgICogQ2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UgdGhlIGJyb2FkY2FzdCBoYXMgYmVndW4uXG4gICAqL1xuICBtdXRlVmlkZW8gKCkge1xuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIG11dGU6IHtcbiAgICAgICAgbXV0ZVZpZGVvOiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHVubXV0ZSAocmVzdW1lIHNlbmRpbmcpIHRoZSB2aWRlbyBvZiBhIHByZXZpb3VzbHkgdmlkZW8tbXV0ZWQgYnJvYWRjYXN0LlxuICAgKi9cbiAgdW5tdXRlVmlkZW8gKCkge1xuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIG11dGU6IHtcbiAgICAgICAgbXV0ZVZpZGVvOiBmYWxzZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzZW5kIGEgbWVzc2FnZSB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2ROYW1lXG4gICAqICAgICAgICBUaGUgbWV0aG9kIG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXNzYWdlIHRvIGJlIGFjY2VwdGVkIGJ5IGFsbCBzdWJzY3JpYmVycy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogICAgICAgIFRoZSBkYXRhIG9iamVjdCB0byBzZW5kIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWV0aG9kIG5hbWUuXG4gICAqL1xuICBzZW5kIChtZXRob2ROYW1lLCBkYXRhKSB7XG4gICAgdGhpcy5fc29ja2V0SGVscGVyLnBvc3Qoe1xuICAgICAgc2VuZDoge1xuICAgICAgICBtZXRob2Q6IG1ldGhvZE5hbWUsXG4gICAgICAgIGRhdGE6ICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpID8gSlNPTi5wYXJzZShkYXRhKSA6IGRhdGFcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gaW52b2tlIGEgbWV0aG9kIG9uIHRoZSBBcHBsaWNhdGlvbiBBZGFwdGVyIHJlbGF0ZWQgdG8gdGhlIGBhcHBgIGNvbmZpZyBzZXR0aW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kTmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb24gdGh3IEFwcGxpY2F0aW9uIEFkYXB0ZXJcbiAgICogQHBhcmFtIHtBcnJheX0gYXJnc1xuICAgKiAgICAgICAgVGhlIG9yZGVyZWQgbGlzdCBvZiBhcmd1bWVudHMgdG8gaW52b2tlIG9uIHRoZSBtZXRob2QuIERvIG5vdCBwcm92aWRlIGFueXRoaW5nIGlmIHRoZSBtZXRob2QgdGFrZXMgbm8gYXJndW1lbnRzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgY2FsbFNlcnZlciAobWV0aG9kTmFtZSwgYXJncykge1xuICAgIHJldHVybiB0aGlzLl9zb2NrZXRIZWxwZXIucG9zdEFzeW5jKHtcbiAgICAgIGNhbGxBZGFwdGVyOiB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kTmFtZSxcbiAgICAgICAgYXJndW1lbnRzOiBhcmdzXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBhdmFpbGFiaWxpdHkgb2Ygc3RyZWFtIG9uIHJlcXVlc3Qgb3ZlciB0aGUgc29ja2V0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25TdHJlYW1BdmFpbGFibGUgKHJlY2VpcHQpIHtcbiAgICBkZWJ1ZygnW29uc3RyZWFtYXZhaWxhYmxlXTogJyArIEpTT04uc3RyaW5naWZ5KHJlY2VpcHQsIG51bGwsIDIpKVxuICAgIHRoaXMuX2F2YWlsYWJsZUZ1dHVyZSA9IEZ1dHVyZS5jcmVhdGVJZk5vdEV4aXN0KHRoaXMuX2F2YWlsYWJsZUZ1dHVyZSlcbiAgICB0aGlzLl9hdmFpbGFibGVGdXR1cmUucmVqZWN0KGBTdHJlYW0gd2l0aCBuYW1lICR7dGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lfSBhbHJlYWR5IGhhcyBhIGJyb2FkY2FzdCBzZXNzaW9uLmApXG4gICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChQdWJsaXNoZXJFdmVudFR5cGVzLlBVQkxJU0hfSU5WQUxJRF9OQU1FLCB0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciB1bmF2YWlsYWJpbGl0eSBvZiBzdHJlYW0gb24gcmVxdWVzdCBvdmVyIHRoZSBzb2NrZXQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblN0cmVhbVVuYXZhaWxhYmxlIChyZWNlaXB0KSB7XG4gICAgLy8gQmVpbmcgdW5hdmFpbGFibGUsIGlzIGEgZ29vZCB0aGluZyBmb3IgYWxsb3dpbmcgdG8gcHVibGlzaCB1c2luZyBgb3B0aW9ucy5zdHJlYW1OYW1lYFxuICAgIGRlYnVnKGBTdHJlYW0gJHt0aGlzLl9vcHRpb25zLnN0cmVhbU5hbWV9IGRvZXMgbm90IGV4aXN0LmApXG4gICAgZGVidWcoJ1tvbnN0cmVhbXVuYXZhaWxhYmxlXTogJyArIEpTT04uc3RyaW5naWZ5KHJlY2VpcHQsIG51bGwsIDIpKVxuICAgIHRoaXMuX2F2YWlsYWJsZUZ1dHVyZSA9IEZ1dHVyZS5jcmVhdGVJZk5vdEV4aXN0KHRoaXMuX2F2YWlsYWJsZUZ1dHVyZSlcbiAgICB0aGlzLl9hdmFpbGFibGVGdXR1cmUucmVzb2x2ZSh0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIFdlYlNvY2tldCBlcnJvcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblNvY2tldE1lc3NhZ2VFcnJvciAobWVzc2FnZSwgZGV0YWlsID0gbnVsbCkge1xuICAgIGVycm9yKGBFcnJvciBpbiBzdHJlYW0gcHVibGlzaDogJHttZXNzYWdlfS5cXG5bT3B0aW9uYWwgZGV0YWlsXTogJHtkZXRhaWx9YClcbiAgICBpZiAodGhpcy5fcHVibGlzaEZ1dHVyZSkge1xuICAgICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChQdWJsaXNoZXJFdmVudFR5cGVzLlBVQkxJU0hfRkFJTCwgdGhpcykpXG4gICAgICB0aGlzLl9wdWJsaXNoRnV0dXJlLnJlamVjdChtZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBjbG9zZSBvZiBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblNvY2tldENsb3NlIChjbG9zZUV2ZW50KSB7XG4gICAgZGVidWcoTkFNRSwgJ1tvbnNvY2tldGNsb3NlXScpXG4gICAgaWYgKHRoaXMuX3BlZXJIZWxwZXIpIHtcbiAgICAgIHRoaXMuX3BlZXJIZWxwZXIudGVhckRvd24oKVxuICAgIH1cbiAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuQ09OTkVDVElPTl9DTE9TRUQsIHRoaXMsIGNsb3NlRXZlbnQpKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGNsb3NlIG9mIFBlZXIgQ29ubmVjdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uUGVlckNvbm5lY3Rpb25DbG9zZSAoZXZlbnQpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW29ucGVlcmNvbm5lY3Rpb25jbG9zZV0nKVxuICAgIGlmICh0aGlzLl9zb2NrZXRIZWxwZXIpIHtcbiAgICAgIGRlYnVnKE5BTUUsICdbb25wZWVyY29ubmVjdGlvbmNsb3NlOnRlYXJkb3duXScpXG4gICAgICB0aGlzLl9zb2NrZXRIZWxwZXIudGVhckRvd24oKVxuICAgIH1cbiAgICB0aGlzLm9uU29ja2V0Q2xvc2UoZXZlbnQpXG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3Igc3VjY2VzcyBvZiBTRFAgb2ZmZXIgb3ZlciBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblNEUFN1Y2Nlc3MgKHJlY2VpcHQpIHtcbiAgICBsZXQgaW5mbyA9IHJlY2VpcHQgPyAnOiAnICsgSlNPTi5zdHJpbmdpZnkocmVjZWlwdCwgbnVsbCwgMikgOiAnJ1xuICAgIGRlYnVnKGBbb25zZHBzdWNjZXNzXSR7aW5mb31gKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGVycm9yIGluIFNEUCBvZmZlciBvdmVyIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uU0RQRXJyb3IgKHJlY2VpcHQpIHtcbiAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuUFVCTElTSF9GQUlMLCB0aGlzKSlcbiAgICBsZXQgZXJyb3IgPSByZWNlaXB0ID8gJzogJyArIEpTT04uc3RyaW5naWZ5KHJlY2VpcHQsIG51bGwsIDIpIDogJydcbiAgICBlcnJvcihgW29uc2RwZXJyb3JdJHtlcnJvcn1gKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIHN1Y2Nlc3MgaW4gU0RQIGFuc3dlciBvdmVyIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uU0RQQW5zd2VyIChzZHApIHtcbiAgICBkZWJ1ZygnW3NkcGFuc3dlcl06OiAnICsgSlNPTi5zdHJpbmdpZnkoc2RwLCBudWxsLCAyKSlcbiAgICB0aGlzLl9zZW5kT2ZmZXJGdXR1cmUgPSBGdXR1cmUuY3JlYXRlSWZOb3RFeGlzdCh0aGlzLl9zZW5kT2ZmZXJGdXR1cmUpXG4gICAgdGhpcy5fc2VuZE9mZmVyRnV0dXJlLnJlc29sdmUoc2RwKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIHJlcXVlc3QgdG8gYWRkIElDRSBjYW5kaWRhdGUgb24gUGVlciBDb25uZWN0aW9uIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25BZGRJY2VDYW5kaWRhdGUgKGNhbmRpZGF0ZSkge1xuICAgIGRlYnVnKCdbYWRkaWNlY2FuZGlkYXRlXScpXG4gICAgdGhpcy5fcGVlckhlbHBlci5hZGRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBkZWJ1ZygnW2FkZGljZWNhbmRpZGF0ZTpzdWNjZXNzXScpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHdhcm4oYFthZGRpY2VjYW5kaWRhdGU6ZXJyb3JdIC0gJHtlcnJ9YClcbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgcmVjZWlwdCBhbmQgcmVxdWVzdCB0byBzZW5kIElDRSBjYW5kaWRhdGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkljZUNhbmRpZGF0ZSAoY2FuZGlkYXRlKSB7XG4gICAgZGVidWcoJ1tpY2VjYW5kaWRhdGV0cmlja2xlXScpXG4gICAgdGhpcy5fc2VuZENhbmRpZGF0ZShjYW5kaWRhdGUsIHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBlbmQgb2YgSUNFIHRyaWNrbGUgbmVnb3RpYXRpb24uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkljZUNhbmRpZGF0ZVRyaWNrbGVFbmQgKCkge1xuICAgIGRlYnVnKCdbaWNlY2FuZGlkYXRldHJpY2tsZTplbmRdJylcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciByZWNlaXB0IG9mIGVtcHR5IGNhbmRpZGF0ZSBkdXJpbmcgSUNFIG5lZ290aWF0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25FbXB0eUNhbmRpZGF0ZSAoKSB7XG4gICAgZGVidWcoJ1tpY2VjYW5kaWRhdGV0cmlja2xlOmVtcHR5XScpXG4gICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChSVENQdWJsaXNoZXJFdmVudFR5cGVzLlBFRVJfQ0FORElEQVRFX0VORCkpXG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgY29tcGxldGlvbiBvZiBwZWVyIGljZSBjYW5kaWRhdGUgZ2F0aGVyaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25QZWVyR2F0aGVyaW5nQ29tcGxldGUgKCkge1xuICAgIGRlYnVnKCdbaWNlY2FuZGlkYXRlZ2F0aGVyaW5nOmVuZF0nKVxuICAgIGlmICh0aGlzLl9zb2NrZXRIZWxwZXIpIHtcbiAgICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0RW5kT2ZDYW5kaWRhdGVzKHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgZW5kIG9mIElDRSBjYW5kaWRhdGUgbm90aWZpY2F0aW9uIG92ZXIgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Tb2NrZXRJY2VDYW5kaWRhdGVFbmQgKCkge1xuICAgIGRlYnVnKCdbc29ja2V0aWNlY2FuZGlkYXRlOmVuZF0nKVxuICAgIHRoaXMuX2dldFRyaWNrbGVFbmQoKS5yZXNvbHZlKClcbiAgICAvLyB0aGlzLl90cmlja2xlRW5kRnV0dXJlID0gdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogUHVibGlzaGVyIHN0YXR1cyBldmVudCBoYW5kbGVyIGZvciBzdGFydCBhbmQgc3RvcCBvZiB0aGlzIFB1Ymxpc2hlciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uUHVibGlzaGVyU3RhdHVzIChzdGF0dXMpIHtcbiAgICBkZWJ1ZygnW3B1Ymxpc2hlcnN0YXR1c10gLSAnICsgSlNPTi5zdHJpbmdpZnkoc3RhdHVzLCBudWxsLCAyKSlcbiAgICBjb25zdCBzdG9wUmVzdWx0ID0gcHViU3RvcFJlZ2V4LmV4ZWMoc3RhdHVzLm1lc3NhZ2UpXG4gICAgY29uc3Qgc3RhcnRSZXN1bHQgPSBwdWJTdGFydFJlZ2V4LmV4ZWMoc3RhdHVzLm1lc3NhZ2UpXG4gICAgaWYgKHN0b3BSZXN1bHQgJiYgc3RvcFJlc3VsdFsxXSA9PT0gdGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lKSB7XG4gICAgICB0aGlzLl91bnB1Ymxpc2hGdXR1cmUucmVzb2x2ZSgpXG4gICAgfSBlbHNlIGlmIChzdGFydFJlc3VsdCAmJiBzdGFydFJlc3VsdFsxXSA9PT0gdGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lKSB7XG4gICAgICB0aGlzLl9wdWJsaXNoRnV0dXJlLnJlc29sdmUoKVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKCdQdWJsaXNoZXIgc3RhdHVzIHJlY2VpdmVkLCBidXQgY291bGQgbm90IGhhbmRsZS4nKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RpZmljYXRpb24gZnJvbSBzZXJ2ZXIgb24gc2VuZCBtZXRob2QgZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uU2VuZFJlY2VpdmVkIChtZXRob2ROYW1lLCBkYXRhKSB7XG4gICAgaWYgKG1ldGhvZE5hbWUgPT09ICdvbk1ldGFEYXRhJykge1xuICAgICAgdGhpcy5vbk1ldGFEYXRhKGRhdGEpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gZW52aXJvbm1lbnQuaW52b2tlKG1ldGhvZE5hbWUsIGRhdGEpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuUFVCTElTSF9TRU5EX0lOVk9LRSwgdGhpcywge1xuICAgICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTm90aWZpY2F0aW9uIGZyb20gc2VydmVyIG9uIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25NZXRhRGF0YSAoZGF0YSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChQdWJsaXNoZXJFdmVudFR5cGVzLlBVQkxJU0hfTUVUQURBVEEsIHRoaXMsIGRhdGEpKVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gb3ZlcmxheSBvcHRpb25zIG92ZXIgY3VycmVudCBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb3ZlcmxheU9wdGlvbnMgKG5ld09wdGlvbnMpIHtcbiAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLl9vcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFdlYlNvY2tldCBjb25uZWN0aW9uIGhlbHBlciBpZiBlc3RhYmxpc2hlZC5cbiAgICogVXNlZCBpbiBTaGFyZWRPYmplY3QgY29tbXVuaWNhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7UHVibGlzaGVyU29ja2V0SGVscGVyfVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0Q29ubmVjdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldEhlbHBlclxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgUlRDUGVlckNvbm5lY3Rpb24gaGVscGVyIGlmIGVzdGFibGlzaGVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSVENQZWVyQ29ubmVjdGlvbn1cbiAgICovXG4gIGdldFBlZXJDb25uZWN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGVlckhlbHBlciA/IHRoaXMuX3BlZXJIZWxwZXIuY29ubmVjdGlvbiA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGBNZWRpYVN0cmVhbWAgaW5zdGFuY2UgaWYgZ2VuZXJhdGVkIHRocm91Z2ggYGdldFVzZXJNZWRpYWAgYW5kIGV4aXN0cyBmb3IgYnJvYWRjYXN0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtNZWRpYVN0cmVhbX1cbiAgICovXG4gIGdldE1lZGlhU3RyZWFtICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVkaWFTdHJlYW1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIHVzZWQgaW4gYGluaXQoKWAuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldE9wdGlvbnMgKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHlwZSBvZiBpbXBsZW1lbnRhdGlvbjogYFJUQ2AuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGdldFR5cGUgKCkge1xuICAgIHJldHVybiBQdWJsaXNoVHlwZXMuUlRDLnRvVXBwZXJDYXNlKClcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJUQ1B1Ymxpc2hlclxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvcHVibGlzaGVyL3JlZDVwcm8tcnRjLmpzIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vY29yZS9ldmVudC1lbWl0dGVyJ1xuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4uL2Vudi9icm93c2VyJ1xuaW1wb3J0IFB1Ymxpc2hlclNvdXJjZUhhbmRsZXIgZnJvbSAnLi9wdWItc291cmNlLWhhbmRsZXInXG5pbXBvcnQgUHVibGlzaFZpZXcgZnJvbSAnLi4vdmlldy9wdWJsaXNoJ1xuaW1wb3J0IHsgUHVibGlzaGVyRXZlbnQgfSBmcm9tICcuLi9ldmVudCdcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcbmltcG9ydCB7IFB1Ymxpc2hUeXBlcyB9IGZyb20gJy4uL2VudW0vcHVibGlzaCdcbmltcG9ydCB7IFB1Ymxpc2hlckV2ZW50VHlwZXMsIFJUTVBQdWJsaXNoZXJFdmVudFR5cGVzIH0gZnJvbSAnLi4vZXZlbnQnXG5pbXBvcnQgeyBSVE1QTWVkaWFDb25zdHJhaW50IH0gZnJvbSAnLi9jb25zdHJhaW50J1xuaW1wb3J0IHsgZGVidWcsIGVycm9yIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBOQU1FID0gJ1JUTVBQdWJsaXNoZXInXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgcHJvdG9jb2w6ICdydG1wJyxcbiAgcG9ydDogMTkzNSxcbiAgc3RyZWFtTW9kZTogJ2xpdmUnLFxuICBtZWRpYUVsZW1lbnRJZDogJ3JlZDVwcm8tcHVibGlzaGVyJyxcbiAgZW1iZWRXaWR0aDogJzEwMCUnLCAvLyBET00gZGlzcGxheSBzdHlsZVxuICBlbWJlZEhlaWdodDogJzEwMCUnLCAvLyBET00gZGlzcGxheSBzdHlsZVxuICBtaW5GbGFzaFZlcnNpb246ICcxMC4wLjAnLFxuICBzd2Y6ICdsaWIvcmVkNXByby9yZWQ1cHJvLXB1Ymxpc2hlci5zd2YnLFxuICBzd2ZvYmplY3RVUkw6ICdsaWIvc3dmb2JqZWN0L3N3Zm9iamVjdC5qcycsXG4gIHByb2R1Y3RJbnN0YWxsVVJMOiAnbGliL3N3Zm9iamVjdC9wbGF5ZXJQcm9kdWN0SW5zdGFsbC5zd2YnLFxuICBtZWRpYUNvbnN0cmFpbnRzOiBuZXcgUlRNUE1lZGlhQ29uc3RyYWludCgpXG59XG5cbi8qKlxuICogTWFpbiBlbnRyeSBmb3IgRmxhc2gtYmFzZWQgUHVibGlzaGVyLlxuICpcbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICovXG5jbGFzcyBSVE1QUHVibGlzaGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX29wdGlvbnMgPSB1bmRlZmluZWRcbiAgICB0aGlzLl92aWV3ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fc291cmNlSGFuZGxlciA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2VsZW1lbnRJZCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2Nvbm5lY3RGdXR1cmUgPSB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGlsbCBpbiB1c2UgZm9yIGFzc2lnbmluZyBkb2N1bWVudCBlbGVtZW50IHZpZXcgbWFuYWdlbWVudCB0byB0aGlzIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFZpZXdJZk5vdEV4aXN0IChjdXJyZW50VmlldywgbWVkaWFFbGVtZW50SWQgPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgY3VycmVudFZpZXcgPT09ICd1bmRlZmluZWQnICYmIG1lZGlhRWxlbWVudElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHZpZXcgPSBuZXcgUHVibGlzaFZpZXcobWVkaWFFbGVtZW50SWQpXG4gICAgICAgIHZpZXcuYXR0YWNoUHVibGlzaGVyKHRoaXMpXG4gICAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RpbGwgaW4gdXNlIGZvciBhc3NpZ25pbmcgZG9jdW1lbnQgZWxlbWVudCB2aWV3IG1hbmFnZW1lbnQgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICogQVBJIGRlcHJlY2F0ZWQgaW4gNC4wLjAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZXRWaWV3ICh2aWV3LCBlbGVtZW50SWQpIHtcbiAgICB0aGlzLl92aWV3ID0gdmlld1xuICAgIHRoaXMuX2VsZW1lbnRJZCA9IGVsZW1lbnRJZFxuICAgIGlmICh0aGlzLl9zb3VyY2VIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIuZGlzY29ubmVjdCgpXG4gICAgICB0aGlzLl9zb3VyY2VIYW5kbGVyID0gdW5kZWZpbmVkXG4gICAgfVxuICAgIGlmICh0aGlzLl92aWV3KSB7XG4gICAgICB0aGlzLl9zb3VyY2VIYW5kbGVyID0gbmV3IFB1Ymxpc2hlclNvdXJjZUhhbmRsZXIodGhpcy5fdmlldy52aWV3LCB0aGlzLmdldFR5cGUoKSlcbiAgICB9XG4gICAgaWYgKHRoaXMuX29wdGlvbnMgJiYgdGhpcy5fc291cmNlSGFuZGxlcikge1xuICAgICAgdGhpcy5fc291cmNlSGFuZGxlci5hZGRTb3VyY2UodGhpcy5fZWxlbWVudElkLCB0aGlzLl9vcHRpb25zKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBlcnJvcihOQU1FLCBgQ291bGQgbm90IGVzdGFibGlzaCBwcm9wZXIgUlRNUCBwdWJsaXNoZXI6ICR7ZXJyfWApXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChSVE1QUHVibGlzaGVyRXZlbnRUeXBlcy5FTUJFRF9GQUlMVVJFLCB0aGlzKSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgYSB3aW5kb3cgZ2xvYmFsIGNhbGxiYWNrIHVzZWQgYnkgRmxhc2ggcHVibGlzaGVyIHRvIHJlY29nbml6ZSBlbWJlZCBjb21wbGV0ZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRVcENvbm5lY3RDYWxsYmFjayAocHJvbWlzZSkge1xuICAgIHdpbmRvdy5zZXRBY3RpdmVJZCA9IChzdWNjZXNzSWQpID0+IHtcbiAgICAgIC8vIHN1Y2Nlc3NJZCA9PT0gX29wdGlvbnMuc3RyZWFtTmFtZVxuICAgICAgZGVidWcoTkFNRSwgYEVtYmVkIGFuZCBjb25uZWN0KCkgY29tcGxldGUgZm9yIHB1Ymxpc2hlciBzd2YuIHN1Y2Nlc3NJZCgke3N1Y2Nlc3NJZH0pLmApXG4gICAgICBwcm9taXNlLnJlc29sdmUodGhpcylcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUlRNUFB1Ymxpc2hlckV2ZW50VHlwZXMuRU1CRURfU1VDQ0VTUywgdGhpcykpXG4gICAgICB0aGlzLl90ZWFyRG93bkNvbm5lY3RDYWxsYmFjaygpXG4gICAgfVxuICAgIC8vIFRPRE86IFNldHVwIHRpbWVvdXQgdG8gcmVqZWN0P1xuICB9XG5cbiAgLyoqXG4gICAqIFRlYXIgZG93biBnbG9iYWwgY2FsbGJhY2sgdXNlZCBpbiBGbGFzaCBwdWJsaXNoZXIgcmVjb2duaXplIG9mIGVtYmVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3RlYXJEb3duQ29ubmVjdENhbGxiYWNrICgpIHtcbiAgICB3aW5kb3cuc2V0QWN0aXZlSWQgPSB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgZ2xvYmFsIGZ1bmN0aW9uIGhhbmRsZXJzIGZvciBFeHRlcm5hbEludGVyZmFjZSB0byBpbnZva2UgZm9yIEFQSSBjb21tdW5pY2F0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2VzdGFibGlzaEV4dEludEhhbmRsZXJzICgpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZVxuICAgIGNvbnN0IGludm9rZUZuID0gKGxhYmVsKSA9PiB7XG4gICAgICByZXR1cm4gWydwdWJsaXNoZXInLCBsYWJlbCwgaWQuc3BsaXQoJy0nKS5qb2luKCdfJyldLmpvaW4oJ18nKVxuICAgIH1cbiAgICB3aW5kb3dbaW52b2tlRm4oJ3I1cHJvQ29ubmVjdENsb3NlZCcpXSA9ICgpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5DT05ORUNUSU9OX0NMT1NFRCwgdGhpcykpXG4gICAgfVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9Db25uZWN0U3VjY2VzcycpXSA9ICgpID0+IHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5DT05ORUNUX1NVQ0NFU1MsIHRoaXMpKVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9VbnB1Ymxpc2hTdWNjZXNzJyldID0gKCkgPT4gdGhpcy50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChQdWJsaXNoZXJFdmVudFR5cGVzLlVOUFVCTElTSF9TVUNDRVNTLCB0aGlzKSlcbiAgICB3aW5kb3dbaW52b2tlRm4oJ3I1cHJvUHVibGlzaFN0YXJ0JyldID0gKCkgPT4ge1xuICAgICAgdGhpcy5fY29ubmVjdEZ1dHVyZS5yZXNvbHZlKHRoaXMpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuUFVCTElTSF9TVEFSVCwgdGhpcykpXG4gICAgfVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9QdWJsaXNoTWV0YWRhdGEnKV0gPSAobWV0YWRhdGEpID0+IHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5QVUJMSVNIX01FVEFEQVRBLCB0aGlzLCBtZXRhZGF0YSkpXG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb0Nvbm5lY3RGYWlsdXJlJyldID0gKCkgPT4ge1xuICAgICAgdGhpcy5fY29ubmVjdEZ1dHVyZS5yZWplY3QoUHVibGlzaGVyRXZlbnRUeXBlcy5DT05ORUNUX0ZBSUxVUkUpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuQ09OTkVDVF9GQUlMVVJFLCB0aGlzKSlcbiAgICB9XG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb1B1Ymxpc2hGYWlsJyldID0gKCkgPT4ge1xuICAgICAgdGhpcy5fY29ubmVjdEZ1dHVyZS5yZWplY3QoUHVibGlzaGVyRXZlbnRUeXBlcy5QVUJMSVNIX0ZBSUwpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFB1Ymxpc2hlckV2ZW50KFB1Ymxpc2hlckV2ZW50VHlwZXMuUFVCTElTSF9GQUlMLCB0aGlzKSlcbiAgICB9XG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb1B1Ymxpc2hJbnZhbGlkTmFtZScpXSA9KCkgPT4ge1xuICAgICAgdGhpcy5fY29ubmVjdEZ1dHVyZS5yZWplY3QoUHVibGlzaGVyRXZlbnRUeXBlcy5QVUJMSVNIX0lOVkFMSURfTkFNRSlcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5QVUJMSVNIX0lOVkFMSURfTkFNRSwgdGhpcykpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gaW5pdGlhbGl6ZSB0aGUgRmxhc2gtYmFzZWQgUHVibGlzaGVyIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb24uXG4gICAqIFRoZSByZXR1cm5lZCBgUHJvbWlzZWAgd2lsbCBlaXRoZXIgcmVzb2x2ZSB3aXRoIGEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2Ugb3IgcmVqZWN0IHdpdGggYW4gZXJyb3IgYFN0cmluZ2AgaW4gZmFpbHVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIG1hcC5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGluaXQgKG9wdGlvbnMpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgY29uc3QgdmVyc2lvbiA9IG9wdGlvbnMubWluRmxhc2hWZXJzaW9uIHx8IGRlZmF1bHRPcHRpb25zLm1pbkZsYXNoVmVyc2lvblxuICAgIGlmICghZW52aXJvbm1lbnQuc3VwcG9ydHNGbGFzaFZlcnNpb24odmVyc2lvbikpIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChgQ291bGQgbm90IHJlc29sdmUgUlRNUFB1Ymxpc2hlciBpbnN0YW5jZS4gUmVxdWlyZXMgbWluaW11bSBGbGFzaCBQbGF5ZXIgaW5zdGFsbCBvZiAke3ZlcnNpb259YClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICB0cnkge1xuICAgICAgICBlbnZpcm9ubWVudC5pbmplY3RTY3JpcHQodGhpcy5fb3B0aW9ucy5zd2ZvYmplY3RVUkwpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZGVidWcoTkFNRSwgJ1NXRk9iamVjdCBlbWJlZGRlZC4nKVxuICAgICAgICAgICAgaWYgKHNlbGYuX3NvdXJjZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgZGVidWcoTkFNRSwgJ1B1Ymxpc2ggaGFuZGxlciBlc3RhYmxpc2hlZC4nKVxuICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fc291cmNlSGFuZGxlci5hZGRTb3VyY2Uoc2VsZi5fZWxlbWVudElkLCBzZWxmLl9vcHRpb25zKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVidWcoTkFNRSwgJ1B1Ymxpc2ggaGFuZGxlciBub3QgZXN0YWJsaXNoZWQuJylcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHNlbGYuX3NldFZpZXdJZk5vdEV4aXN0KHNlbGYuX3ZpZXcsIHNlbGYuX29wdGlvbnMubWVkaWFFbGVtZW50SWQpXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHNlbGYpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGVycm9yKE5BTUUsIGBDb3VsZCBub3QgZW1iZWQgRmxhc2gtYmFzZWQgUlRNUCBQdWJsaXNoZXIuIFJlYXNvbjogJHtlcnJ9YClcbiAgICAgICAgICAgIGlmIChzZWxmLl9zb3VyY2VIYW5kbGVyKSB7XG4gICAgICAgICAgICAgIHNlbGYuX3NvdXJjZUhhbmRsZXIuZGlzY29ubmVjdCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKVxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChSVE1QUHVibGlzaGVyRXZlbnRUeXBlcy5FTUJFRF9GQUlMVVJFLCBzZWxmKSlcbiAgICAgICAgICB9KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoYENvdWxkIG5vdCBpbmplY3QgRmxhc2gtYmFzZWQgUHVibGlzaGVyIGludG8gdGhlIHBhZ2UuIFJlYXNvbjogJHtlLm1lc3NhZ2V9YClcbiAgICAgICAgc2VsZi50cmlnZ2VyKG5ldyBQdWJsaXNoZXJFdmVudChSVE1QUHVibGlzaGVyRXZlbnRUeXBlcy5FTUJFRF9GQUlMVVJFLCBzZWxmKSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGJlaW5nIGEgYnJvYWRjYXN0IHNlc3Npb24gYWZ0ZXIgaW5pdGlsaXphdGlvbiBoYXMgb2NjdXJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmVhbU5hbWVcbiAgICogICAgICAgIE9wdGlvbmFsIHN0cmVhbSBuYW1lIHRvIGJyb2FkY2FzdCBvbiwgb3RoZXJ3aXNlIGRlZmF1bHRpbmcgdG8gdGhlIGBzdHJlYW1OYW1lYCBwcm92aWRlZCBpbiBgaW5pdCgpYCBjb25maWd1cmF0aW9uLlxuICAgKiBAcGFyYW0ge1Byb21pc2V9IHByb21pc2VcbiAgICogICAgICAgIE9wdGlvbmFsIGBQcm9taXNlYCBvYmplY3QgdG8gcmVzb2x2ZS9yZWplY3Qgb24gYmFzZWQgb24gc2VxdWVuY2Ugb2YgZXZlbnRzIGluIGVzdGFibGlzaGluZyBhIGJyb2FkY2FzdCwgb3RoZXJ3aXNlIGRlZmF1bHRpbmcgdG8gYFByb21pc2VgIGNyZWF0ZWQgaW50ZXJuYWxseSBhbmQgcmV0dXJuZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqICAgICAgICBUaGUgcmV0dXJuZWQgYFByb21pc2VgIHdpbGwgcmVzb2x2ZSBvciByZWplY3Qgb24gc3VjY2Vzc2Z1bCBzdGFydCBvZiBhIGJyb2FkY2FzdC48YnI+XG4gICAqICAgICAgICBUaGVyZSBhcmUgc2V2ZXJhbCBwcm9jZXNzZXMgdGhhdCBvY2N1ciBpbiBvcmRlciB0byBlc3RhYmxpc2ggYSBGbGFzaC1iYXNlZCBicm9hZGNhc3QgdGhhdCBpbnZvbHZlIC0gYnV0IGFyZSBub3QgbGltaXRlZCB0byAtIHByb3BlciBlbWJlZCBvZiBGbGFzaCBvYmplY3Qgb24gcGFnZSB3aXRoIGZsYXNodmFycyB1c2VkIGluIGVzdGFibGlzaGluZyBSVE1QLWJhc2VkIE5ldENvbm5lY3Rpb24uXG4gICAqL1xuICBwdWJsaXNoIChzdHJlYW1OYW1lID0gdW5kZWZpbmVkLCBwcm9taXNlID0gdW5kZWZpbmVkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCBkZmQgPSBwcm9taXNlIHx8IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIHRoaXMuX3NldFVwQ29ubmVjdENhbGxiYWNrKGRmZClcbiAgICB0aGlzLl9vcHRpb25zLnN0cmVhbU5hbWUgPSBzdHJlYW1OYW1lIHx8IHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZVxuICAgIGNvbnN0IHB1Ymxpc2hPcHRpb25zID0gdGhpcy5fb3B0aW9uc1xuICAgIHRyeSB7XG4gICAgICBsZXQgc3JjSGFuZGxlciA9IHRoaXMuX3NvdXJjZUhhbmRsZXJcbiAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIuZ2V0RW1iZWRPcGVyYXRpb24oKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgZGVidWcoTkFNRSwgJ1toYW5kbGVyOmVtYmVkOmNvbXBsZXRlXScpXG4gICAgICAgICAgY29uc3QgZWwgPSBlbnZpcm9ubWVudC5nZXRFbWJlZE9iamVjdCh0aGlzLl9lbGVtZW50SWQpXG4gICAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICB0aGlzLl9lc3RhYmxpc2hFeHRJbnRIYW5kbGVycygpXG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBjb3VudCA9IDBcbiAgICAgICAgICBjb25zdCBsaW1pdCA9IDEwMFxuICAgICAgICAgIGxldCB0cnlDb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IHRpbWVvdXRcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICAgICAgICAgICAgICBzcmNIYW5kbGVyLmNvbm5lY3QoSlNPTi5zdHJpbmdpZnkocHVibGlzaE9wdGlvbnMpKVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50KysgPiBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0cnlDb25uZWN0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDMwMClcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5Q29ubmVjdCgpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIGRmZC5yZWplY3QoZXJyKVxuICAgICAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5DT05ORUNUX0ZBSUxVUkUsIHRoaXMpKVxuICAgICAgICB9KVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yKE5BTUUsICdbaGFuZGxlcjplbWJlZDplcnJvcl0nKVxuICAgICAgZGZkLnJlamVjdChgQ291bGQgbm90IGluaXRpYXRlIGNvbm5lY3Rpb24gc2VxdWVuY2UuIFJlYXNvbjogJHtlLm1lc3NhZ2V9YClcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgUHVibGlzaGVyRXZlbnQoUHVibGlzaGVyRXZlbnRUeXBlcy5DT05ORUNUX0ZBSUxVUkUsIHRoaXMpKVxuICAgICAgdGhpcy5fdGVhckRvd25Db25uZWN0Q2FsbGJhY2soKVxuICAgIH1cbiAgICB0aGlzLl9jb25uZWN0RnV0dXJlID0gZGZkXG4gICAgcmV0dXJuIGRmZC5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzdG9wIGEgYnJvYWRjYXN0LlxuICAgKiBUaGUgcmV0dXJuZWQgYFByb21pc2VgIHdpbGwgZWl0aGVyIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3NmdWwgc3RvcCBvZiBicm9hZGNhc3QuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICB1bnB1Ymxpc2ggKCkge1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgdHJ5IHtcbiAgICAgIGVudmlyb25tZW50LmdldEVtYmVkT2JqZWN0KHRoaXMuX2VsZW1lbnRJZCkudW5wdWJsaXNoKClcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IoTkFNRSwgYENvdWxkIG5vdCBpbml0aWF0ZSBwdWJsaXNoIHNlcXVlbmNlLiBSZWFzb246ICR7ZS5tZXNzYWdlfWApXG4gICAgICBkZWZlcnJlZC5yZWplY3QoZS5tZXNzYWdlKVxuICAgIH1cbiAgICB0aGlzLl9jb25uZWN0RnV0dXJlID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNlbmQgYSBtZXNzYWdlIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZE5hbWVcbiAgICogICAgICAgIFRoZSBtZXRob2QgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIG1lc3NhZ2UgdG8gYmUgYWNjZXB0ZWQgYnkgYWxsIHN1YnNjcmliZXJzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKiAgICAgICAgVGhlIGRhdGEgb2JqZWN0IHRvIHNlbmQgYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXRob2QgbmFtZS5cbiAgICovXG4gIHNlbmQgKG1ldGhvZE5hbWUsIGRhdGEpIHtcbiAgICB0aGlzLl9zb3VyY2VIYW5kbGVyLnNlbmQobWV0aG9kTmFtZSwgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICB9XG5cbiAgLyoqXG4gICAqIERlcHJlY2F0ZWQuIFJlcXVlc3QgdG8gdXBkYXRlIGJyb2FkY2FzdCBkaW1lbnNpb25zIGJlZm9yZSBhIGJyb2FkY2FzdC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHF1YWxpdHlcbiAgICogICAgICAgIEV4cGVjdHMgb2JqZWN0IHdpdGggZm9sbG93aW5nIHN0cnVjdHVyOiBge3ZpZGVvOiB7d2lkdGg6SW50LCBoZWlnaHRJbnR9fVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2V0TWVkaWFRdWFsaXR5IChxdWFsaXR5KSB7XG4gICAgaWYgKHRoaXMuX3NvdXJjZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIuc2V0TWVkaWFRdWFsaXR5KHF1YWxpdHkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gb3ZlcmxheSBvcHRpb25zIG92ZXIgY3VycmVudCBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gbmV3T3B0aW9uc1xuICAgKiAgICAgICAgVGhlIG9wdGlvbnMgdG8gb3ZlcmxheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG92ZXJsYXlPcHRpb25zIChuZXdPcHRpb25zKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBGbGFzaC9SVE1QIGNvbm5lY3Rpb24gaGVscGVyIGlmIGVzdGFibGlzaGVkLlxuICAgKiBVc2VkIGluIFNoYXJlZE9iamVjdCBjb21tdW5pY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQdWJsaXNoZXJTb3VyY2VIYW5kbGVyfVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0Q29ubmVjdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZUhhbmRsZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIHVzZWQgaW4gYGluaXQoKWAuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldE9wdGlvbnMgKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHlwZSBvZiBpbXBsZW1lbnRhdGlvbjogYFJUTVBgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBnZXRUeXBlICgpIHtcbiAgICByZXR1cm4gUHVibGlzaFR5cGVzLlJUTVAudG9VcHBlckNhc2UoKVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUlRNUFB1Ymxpc2hlclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3B1Ymxpc2hlci9yZWQ1cHJvLXJ0bXAuanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi9jb3JlL2V2ZW50LWVtaXR0ZXInXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi4vZW52L2Jyb3dzZXInXG5pbXBvcnQgeyBTaGFyZWRPYmplY3RFdmVudCB9IGZyb20gJy4uL2V2ZW50L2luZGV4J1xuaW1wb3J0IHsgU2hhcmVkT2JqZWN0RXZlbnRUeXBlcyB9IGZyb20gJy4uL2V2ZW50L3NoYXJlZG9iamVjdC1ldmVudCdcblxuaW1wb3J0IHsgZGVidWcgYXMgZGVidWdMb2cgfSBmcm9tICcuLi9sb2cnXG5pbXBvcnQgeyB3YXJuIGFzIHdhcm5Mb2cgfSBmcm9tICcuLi9sb2cnXG5pbXBvcnQgeyBlcnJvciBhcyBlcnJvckxvZyB9IGZyb20gJy4uL2xvZydcblxuY29uc3QgTkFNRSA9ICdSZWQ1UHJvU2hhcmVkT2JqZWN0J1xuY29uc3QgU09fU1VCVFlQRV9QUk9QRVJUWSA9IDRcbmNvbnN0IFNPX1NVQlRZUEVfTUVUSE9EID0gNlxuXG5jb25zdCBkZWJ1ZyA9IChzb05hbWUsIG1lc3NhZ2UpID0+IHtcbiAgZGVidWdMb2coW05BTUUsIHNvTmFtZV0uam9pbignOicpLCBtZXNzYWdlKVxufVxuY29uc3Qgd2FybiA9IChzb05hbWUsIG1lc3NhZ2UpID0+IHtcbiAgd2FybkxvZyhbTkFNRSwgc29OYW1lXS5qb2luKCc6JyksIG1lc3NhZ2UpXG59XG5jb25zdCBlcnJvciA9IChzb05hbWUsIG1lc3NhZ2UpID0+IHtcbiAgZXJyb3JMb2coW05BTUUsIHNvTmFtZV0uam9pbignOicpLCBtZXNzYWdlKVxufVxuXG5jb25zdCBkZWNvZGVNZXNzYWdlSWZKU09OU3RyaW5nID0gKG1lc3NhZ2UpID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UobWVzc2FnZSkgOiBtZXNzYWdlXG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgc3RydWN0dXJlIG9mIGEgUHJvcGVydHkgRGF0YSBub3RpZmljYXRpb24gb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFByb3BlcnR5RGF0YSB7XG5cbiAgY29uc3RydWN0b3IgKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLmtleSA9IGtleVxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICB9XG5cbiAgdG9PYmplY3QgKCkge1xuICAgIGxldCBvYmogPSAge31cbiAgICBvYmpbdGhpcy5rZXldID0gdGhpcy52YWx1ZVxuICAgIHJldHVybiBvYmpcbiAgfVxuXG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgc3RydWN0dXJlIG9mIGEgTWV0aG9kIERhdGEgbm90aWZpY2F0aW9uIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBNZXRob2REYXRhIHtcblxuICBjb25zdHJ1Y3RvciAobWV0aG9kTmFtZSwgbWVzc2FnZSkge1xuICAgIHRoaXMubWV0aG9kTmFtZSA9IG1ldGhvZE5hbWVcbiAgICBsZXQgbWVzc2FnZUxpc3RcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICBsZXQgaVxuICAgICAgbGV0IG1zZ1xuICAgICAgbGV0IGxlbmd0aCA9IG1lc3NhZ2UubGVuZ3RoXG4gICAgICBtZXNzYWdlTGlzdCA9IFtdXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbXNnID0gZGVjb2RlTWVzc2FnZUlmSlNPTlN0cmluZyhtZXNzYWdlW2ldKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgICAgbWVzc2FnZUxpc3QgPSBtZXNzYWdlTGlzdC5jb25jYXQobXNnKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2VMaXN0LnB1c2gobXNnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbWVzc2FnZUxpc3QgPSBbZGVjb2RlTWVzc2FnZUlmSlNPTlN0cmluZyhtZXNzYWdlKV1cbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZUxpc3QubGVuZ3RoID09PSAxID8gbWVzc2FnZUxpc3RbMF0gOiBtZXNzYWdlTGlzdFxuICB9XG5cbiAgdG9PYmplY3QgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2ROYW1lOiB0aGlzLm1ldGhvZE5hbWUsXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2VcbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIE1haW4gZW50cnkgZm9yIFNoYXJlZCBPYmplY3QgYXNzb2NpYXRlZCB3aXRoIFB1Ymxpc2hlcnMgYW5kIFN1YnNjcmliZXJzLlxuICpcbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICovXG5jbGFzcyBSZWQ1UHJvU2hhcmVkT2JqZWN0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblxuICAvKipcbiAgICogVGhlIEFQSSBvbiB0aGlzIG9iamVjdCBpcyBsaW1pdGVkIGFzIGl0IGNvbW11bmljYXRlcyBhbG9uZyB3aXRoIG1lc3NhZ2UgY2hhbm5lbCBjb25uZWN0aW9uIG9mIGEgcHJldmlvdXNseSBlc3RhYmxpc2hlZCBQdWJsaXNoZXIgb3IgU3Vic2NyaWJlciwgb2Ygd2hpY2ggeW91IHByb3ZpZGUgaW4gdGhlIGNvbnN0dWN0b3IuXG4gICAqXG4gICAqIEV2ZW50IGhhbmRsZXJzIHNob3VsZCBiZSBhc3NpZ25lZCB0byBuZXcgYFJlZDVQcm9TaGFyZWRPYmplY3RgIGluc3RhbmNlcyBpbiBvcmRlciB0byBoYW5kbGUgbm90aWZpY2F0aW9ucyBvdmVyIHRoZSBjb21tdW5pY2F0aW9uIGNoYW5uZWwuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqICAgICAgICBUaGUgbmFtZSBvZiB0aGUgU2hhcmVkIE9iamVjdCB0byBjb25uZWN0IHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29ubmVjdGlvblxuICAgKiAgICAgICAgVGhlIGNvbm5lY3Rpb24gZGVsZWdhdGUgdG8gc2VuZCBhbmQgcmVjZWl2ZSBTaGFyZWQgT2JqZWN0IG5vdGlmaWNhdGlvbnMgb24uXG4gICAqICAgICAgICBUaGlzIHdpbGwgZWl0aGVyIGJlIGEgcHJldmlvdXNseSBlc3RhYmxpc2hlZCBQdWJsaXNoZXIgb3IgU3Vic2NyaWJlciBpbnN0YW5jZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yIChuYW1lLCBjb25uZWN0aW9uKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX25hbWUgPSBuYW1lXG4gICAgdGhpcy5fc29ja2V0ID0gY29ubmVjdGlvbi5nZXRDb25uZWN0aW9uKClcbiAgICB0aGlzLl9zb2NrZXQuYWRkU2hhcmVkT2JqZWN0UmVzcG9uc2VIYW5kbGVyKHRoaXMpXG4gICAgdGhpcy5fb25jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKVxuICAgIHRyeSB7XG4gICAgICBkZWJ1Zyh0aGlzLl9uYW1lLCAnW3NoYXJlZG9iamVjdDpjb25uZWN0OmF0dGVtcHRdJylcbiAgICAgIC8vIEltbWVkaWF0ZWx5IGludm9rZSByZXF1ZXN0IG9uIHNoYXJlZCBvYmplY3QgdGhyb3VnaCB0aGUgYGdldENvbm5lY3Rpb24oKWBcbiAgICAgIC8vICBpbnN0YW5jZSBvZiBhIFB1Ymxpc2hlciBvciBTdWJzY3JpYmVyICh3aG9tZXZlciBpbnZva2VkIHRoaXMgY29uc3RydWN0b3IpLlxuICAgICAgdGhpcy5fc29ja2V0LmdldFJlbW90ZVNoYXJlZE9iamVjdCh0aGlzLl9uYW1lKVxuICAgICAgZW52aXJvbm1lbnQuYWRkQ2xvc2VIYW5kbGVyKHRoaXMuX29uY2xvc2UsIDApXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBlcnJvcih0aGlzLl9uYW1lLCAnW3NoYXJlZG9iamVjdDpjb25uZWN0OmVycm9yXTogJyArIGUubWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdCB0byBwYXJzZSBtZXNzYWdlIGludG8gYSBPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtZXNzYWdlXG4gICAqICAgICAgICBFaXRoZXIgYSBKU09OIHN0cmluZyBvciBvYmplY3QuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0SnNvbkZyb21Tb2NrZXRNZXNzYWdlIChtZXNzYWdlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0eXBlb2YgbWVzc2FnZS5kYXRhID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UobWVzc2FnZS5kYXRhKSA6IG1lc3NhZ2UuZGF0YVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgd2Fybih0aGlzLl9uYW1lLCAnQ291bGQgbm90IHBhcnNlIG1lc3NhZ2UgYXMgSlNPTi4gTWVzc2FnZT0gJyArIG1lc3NhZ2UuZGF0YSArICcuIEVycm9yPSAnICsgZS5tZXNzYWdlKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIG9mIFBST1BFUlRZX1VQREFURSB3aXRoIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVPYmplY3RcbiAgICogICAgICAgIE9wdGlvbmFsIHZhbHVlIG9iamVjdCB0byBzZW5kIGluIG5vdGlmaWNhdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ub3RpZnlPZlByb3BlcnR5VmFsdWVzICh2YWx1ZU9iamVjdCkge1xuICAgIGlmIChPYmplY3Qua2V5cyh2YWx1ZU9iamVjdCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihuZXcgU2hhcmVkT2JqZWN0RXZlbnQoU2hhcmVkT2JqZWN0RXZlbnRUeXBlcy5QUk9QRVJUWV9VUERBVEUsIHRoaXMuX25hbWUsIHt9KSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsZXQga2V5XG4gICAgICBmb3IgKGtleSBpbiB2YWx1ZU9iamVjdCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFNoYXJlZE9iamVjdEV2ZW50KFNoYXJlZE9iamVjdEV2ZW50VHlwZXMuUFJPUEVSVFlfVVBEQVRFLCB0aGlzLl9uYW1lLCBuZXcgUHJvcGVydHlEYXRhKGtleSwgdmFsdWVPYmplY3Rba2V5XSkudG9PYmplY3QoKSkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIG9mIFBST1BFUlRZX1VQREFURSBvciBNRVRIT0RfVVBEQVRFIGJhc2VkIG9uIGV2ZW50KHMpLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBldmVudHNcbiAgICogICAgICAgIEEgbGlzdCBvZiBldmVudHMgdG8gaXRlcmF0ZSB0aHJvdWdoIGFuZCBkaXNwYXRjaCBub3RpZmljYXRpb25zIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbm90aWZ5T2ZFdmVudHMgKGV2ZW50cykge1xuICAgIGxldCBpLCBldmVudFxuICAgIGxldCBoYW5kbGVkID0gZmFsc2VcbiAgICBjb25zdCBsZW5ndGggPSBldmVudHMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBldmVudCA9IGV2ZW50c1tpXVxuICAgICAgc3dpdGNoIChldmVudC5zdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgU09fU1VCVFlQRV9QUk9QRVJUWTpcbiAgICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFNoYXJlZE9iamVjdEV2ZW50KFNoYXJlZE9iamVjdEV2ZW50VHlwZXMuUFJPUEVSVFlfVVBEQVRFLCB0aGlzLl9uYW1lLCBuZXcgUHJvcGVydHlEYXRhKGV2ZW50LmF0dHJpYnV0ZSwgZXZlbnQudmFsdWUpLnRvT2JqZWN0KCkpKVxuICAgICAgICAgIGhhbmRsZWQgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBTT19TVUJUWVBFX01FVEhPRDpcbiAgICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFNoYXJlZE9iamVjdEV2ZW50KFNoYXJlZE9iamVjdEV2ZW50VHlwZXMuTUVUSE9EX1VQREFURSwgdGhpcy5fbmFtZSwgbmV3IE1ldGhvZERhdGEoZXZlbnQubWV0aG9kLCBldmVudC52YWx1ZSkudG9PYmplY3QoKSkpXG4gICAgICAgICAgaGFuZGxlZCA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlZFxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgYnkgY29ubmVjdGlvbiBjaGFubmVsIHRvIGhhbmRsZSBtZXNzYWdlIGFuZCBkaXNwYXRjaCBhcHByb3ByaWF0ZSBub3RpZmljYXRpb25zLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVzcG9uZCAobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlLmRhdGEpIHtcbiAgICAgIGxldCBqc29uID0gdGhpcy5fZ2V0SnNvbkZyb21Tb2NrZXRNZXNzYWdlKG1lc3NhZ2UpXG4gICAgICBpZiAoanNvbiA9PT0gbnVsbCkge1xuICAgICAgICB3YXJuKHRoaXMuX25hbWUsICdEZXRlcm1pbmVkIHdlYnNvY2tldCByZXNwb25zZSBub3QgaW4gY29ycmVjdCBmb3JtYXQuIEFib3J0aW5nIG1lc3NhZ2UgaGFuZGxlLicpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGpzb24uZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChqc29uLmRhdGEubmFtZSA9PT0gdGhpcy5fbmFtZSkge1xuICAgICAgICAgIGRlYnVnKHRoaXMuX25hbWUsICdbc2hhcmVkb2JqZWN0LXJlc3BvbnNlXTogJyArIEpTT04uc3RyaW5naWZ5KGpzb24sIG51bGwsIDIpKVxuICAgICAgICAgIGlmIChqc29uLmRhdGEuc3RhdHVzID09PSAnU2hhcmVkT2JqZWN0LlN0YXR1cy5HZXRSZW1vdGUnICYmXG4gICAgICAgICAgICAgIGpzb24uZGF0YS5tZXNzYWdlID09PSAnU3VjY2VzcycpIHtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5jb25uZWN0VG9TaGFyZWRPYmplY3QodGhpcy5fbmFtZSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGpzb24uZGF0YS5zdGF0dXMgPT09ICdTaGFyZWRPYmplY3QuU3RhdHVzLkdldFJlbW90ZScgJiZcbiAgICAgICAgICAgICAganNvbi5kYXRhLm1lc3NhZ2UgPT09ICdGYWlsJykge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTaGFyZWRPYmplY3RFdmVudChTaGFyZWRPYmplY3RFdmVudFR5cGVzLkNPTk5FQ1RfRkFJTFVSRSwgdGhpcy5fbmFtZSkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChqc29uLmRhdGEuc3RhdHVzID09PSAnU2hhcmVkT2JqZWN0LlN0YXR1cy5Db25uZWN0JyAmJlxuICAgICAgICAgICAgICBqc29uLmRhdGEubWVzc2FnZSA9PT0gJ1N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFNoYXJlZE9iamVjdEV2ZW50KFNoYXJlZE9iamVjdEV2ZW50VHlwZXMuQ09OTkVDVF9TVUNDRVNTLCB0aGlzLl9uYW1lKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGpzb24uZGF0YS5zdGF0dXMgPT09ICdTaGFyZWRPYmplY3QuU3RhdHVzLkNvbm5lY3QnICYmXG4gICAgICAgICAgICAgIGpzb24uZGF0YS5tZXNzYWdlID09PSAnRmFpbCcpIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihuZXcgU2hhcmVkT2JqZWN0RXZlbnQoU2hhcmVkT2JqZWN0RXZlbnRUeXBlcy5DT05ORUNUX0ZBSUxVUkUsIHRoaXMuX25hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoanNvbi5kYXRhLnR5cGUgPT09ICdzaGFyZWRvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoanNvbi5kYXRhLmhhc093blByb3BlcnR5KCdldmVudHMnKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm90aWZ5T2ZFdmVudHMoanNvbi5kYXRhLmV2ZW50cylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGpzb24uZGF0YS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm90aWZ5T2ZQcm9wZXJ0eVZhbHVlcyhqc29uLmRhdGEudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdVbmhhbmRsZWQgU29ja2V0IGV4Y2hhbmdlOiAnICsgSlNPTi5zdHJpbmdpZnkoanNvbiwgbnVsbCwgMikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc2VuZCAobWVzc2FnZU5hbWUsIGRhdGEpIHtcbiAgICB0aGlzLl9zb2NrZXQuc2VuZFRvU2hhcmVkT2JqZWN0KHRoaXMuX25hbWUsIG1lc3NhZ2VOYW1lLCBkYXRhKVxuICB9XG5cbiAgc2V0UHJvcGVydHkgKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9zb2NrZXQuc2VuZFByb3BlcnR5VG9TaGFyZWRPYmplY3QodGhpcy5fbmFtZSwga2V5LCB2YWx1ZSlcbiAgfVxuXG4gIGNsb3NlICgpIHtcbiAgICBpZiAodGhpcy5fc29ja2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHdhcm4oJ1NvY2tldCBubyBsb25nZXIgZXhpc3QgdG8gY2xvc2Ugc2hhcmVkIG9iamVjdCBwcm9wZXJseS4nKVxuICAgIH1cbiAgICB0aGlzLl9zb2NrZXQuY2xvc2VTaGFyZWRPYmplY3QodGhpcy5fbmFtZSlcbiAgICBpZiAodGhpcy5fc29ja2V0KSB7XG4gICAgICB0aGlzLl9zb2NrZXQucmVtb3ZlU2hhcmVkT2JqZWN0UmVzcG9uc2VIYW5kbGVyKHRoaXMpXG4gICAgfVxuICAgIHRoaXMuX3NvY2tldCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX25hbWUgPSB1bmRlZmluZWRcbiAgICBlbnZpcm9ubWVudC5yZW1vdmVDbG9zZUhhbmRsZXIodGhpcy5fb25jbG9zZSlcbiAgfVxuXG4gIGdldE5hbWUgKCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lXG4gIH1cblxufVxuXG5leHBvcnQgeyBSZWQ1UHJvU2hhcmVkT2JqZWN0IH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9zaGFyZWRvYmplY3QvaW5kZXguanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi9jb3JlL2V2ZW50LWVtaXR0ZXInXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi4vLi4vZW52L2Jyb3dzZXInXG5pbXBvcnQgeyBTbGlkZXJFdmVudCwgU2xpZGVyRXZlbnRUeXBlcyB9IGZyb20gJy4vZXZlbnQnXG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uLy4uL2xvZydcblxubGV0IE5BTUUgPSAnQ29udHJvbFNsaWRlcidcblxuLyoqXG4gKiBDdXN0b20gc2xpZGVyIGNvbnRyb2wgZm9yIFBsYXliYWNrIENvbnRyb2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbnRyb2xTbGlkZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgc3VwZXIoKVxuICAgIE5BTUUgPSBbTkFNRSwgdHlwZV0uam9pbignOjonKVxuICAgIGRlYnVnKE5BTUUsICdbaW5pdF0nKVxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGVudmlyb25tZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGhpcy5fYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oKVxuICAgIHRoaXMuX3RyYWNrID0gdGhpcy5jcmVhdGVUcmFjaygpXG4gICAgdGhpcy5fcHJvZ3Jlc3NCYXIgPSB0aGlzLmNyZWF0ZVByb2dyZXNzQmFyKClcbiAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fdHJhY2spXG4gICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX3Byb2dyZXNzQmFyKVxuICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9idXR0b24pXG4gICAgdGhpcy5fdmFsdWUgPSAwIC8vIDAgLSAxXG4gICAgdGhpcy5fZGlzYWJsZWQgPSBmYWxzZVxuICAgIHRoaXMuX2V2ZW50U3RhcnRQb3NpdGlvbiA9IDBcbiAgICB0aGlzLl9sYXlvdXQoKVxuICAgIHRoaXMuX21vdXNldXBIYW5kbGVyID0gdGhpcy5fbW91c2V1cC5iaW5kKHRoaXMpXG4gICAgdGhpcy5fbW91c2Vkb3duSGFuZGxlciA9IHRoaXMuX21vdXNlZG93bi5iaW5kKHRoaXMpXG4gICAgdGhpcy5fbW91c2Vtb3ZlSGFuZGxlciA9IHRoaXMuX21vdXNlbW92ZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5fdG91Y2h1cEhhbmRsZXIgPSB0aGlzLl90b3VjaHByb3h5LmJpbmQodGhpcylcbiAgICB0aGlzLl90b3VjaGRvd25IYW5kbGVyID0gdGhpcy5fdG91Y2hwcm94eS5iaW5kKHRoaXMpXG4gICAgdGhpcy5fdG91Y2htb3ZlSGFuZGxlciA9IHRoaXMuX3RvdWNocHJveHkuYmluZCh0aGlzKVxuICAgIHRoaXMuX3VwZGF0ZUhhbmRsZXJzKHRoaXMuX2Rpc2FibGVkKVxuICB9XG5cbiAgLyoqXG4gICAqIFRvdWNoIGV2ZW50IHByb3h5IHRvIGJ1YmJsZSBvdXQgbW91c2UgZXZlbnRzIGZvciBoYW5kbGluZyBpbnRlcmFjdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF90b3VjaHByb3h5IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxIHx8IChldmVudC50eXBlID09IFwidG91Y2hlbmRcIiAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA+IDApKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IGV2dCA9IGVudmlyb25tZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50JylcbiAgICBsZXQgdHlwZSwgdG91Y2hcbiAgICBjb25zdCB0ID0gZXZlbnQub3JpZ2luYWxUYXJnZXQgfHwgZXZlbnQudGFyZ2V0XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICd0b3VjaHN0YXJ0JzpcbiAgICAgICAgdHlwZSA9ICdtb3VzZWRvd24nXG4gICAgICAgIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgICAgIHR5cGUgPSAnbW91c2Vtb3ZlJ1xuICAgICAgICB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICd0b3VjaGVuZCc6XG4gICAgICAgIHR5cGUgPSAnbW91c2V1cCdcbiAgICAgICAgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXVxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIGV2dC5pbml0TW91c2VFdmVudCh0eXBlLCB0cnVlLCB0cnVlLCB0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcsIDAsXG4gICAgICB0b3VjaC5zY3JlZW5YLCB0b3VjaC5zY3JlZW5ZLCB0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZLFxuICAgICAgZXZlbnQuY3RybEtleSwgZXZlbnQuYWx0S2V5LCBldmVudC5zaGlmdEtleSwgZXZlbnQubWV0YUtleSwgMCwgbnVsbClcbiAgICB0LmRpc3BhdGNoRXZlbnQoZXZ0KVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIG1vdXNlIHVwLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21vdXNldXAgKCkge1xuICAgIHRoaXMuX2V2ZW50U3RhcnRQb3NpdGlvbiA9IDBcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZW1vdmVIYW5kbGVyKVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9tb3VzZXVwSGFuZGxlcilcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl90b3VjaG1vdmVIYW5kbGVyKVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNodXAnLCB0aGlzLl90b3VjaHVwSGFuZGxlcilcbiAgICB0aGlzLnRyaWdnZXIobmV3IFNsaWRlckV2ZW50KFNsaWRlckV2ZW50VHlwZXMuQ0hBTkdFX0NPTVBMRVRFLCB0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBtb3VzZSBtb3ZlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21vdXNlbW92ZSAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uT2Zmc2V0ID0gKGVudmlyb25tZW50LmdldE1vdXNlWEZyb21FdmVudChldmVudCkgLSB0aGlzLl9ldmVudFN0YXJ0UG9zaXRpb24pXG4gICAgICBjb25zdCByZWN0ID0gdGhpcy5fYnV0dG9uLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGxldCBwb3NpdGlvbiA9ICh0aGlzLl9ldmVudFN0YXJ0UG9zaXRpb24gKyBwb3NpdGlvbk9mZnNldCkgLSByZWN0LmxlZnQgLy8gLSBlbnZpcm9ubWVudC5nZXRTY3JvbGxYKClcbiAgICAgIHBvc2l0aW9uID0gTWF0aC5tYXgoMCwgcG9zaXRpb24pXG4gICAgICBwb3NpdGlvbiA9IE1hdGgubWluKHBvc2l0aW9uLCByZWN0LndpZHRoKVxuICAgICAgbGV0IHBlcmNlbnRhZ2UgPSBwb3NpdGlvbiAvIHJlY3Qud2lkdGhcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU2xpZGVyRXZlbnQoU2xpZGVyRXZlbnRUeXBlcy5DSEFOR0UsIHRoaXMsIHBlcmNlbnRhZ2UpKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIG1vdXNlIGRvd24uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbW91c2Vkb3duIChldmVudCkge1xuICAgICAgdGhpcy5fZXZlbnRTdGFydFBvc2l0aW9uID0gZW52aXJvbm1lbnQuZ2V0TW91c2VYRnJvbUV2ZW50KGV2ZW50KVxuICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTbGlkZXJFdmVudChTbGlkZXJFdmVudFR5cGVzLkNIQU5HRV9TVEFSVCwgdGhpcykpXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZW1vdmVIYW5kbGVyKVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX21vdXNldXBIYW5kbGVyKVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5fdG91Y2htb3ZlSGFuZGxlcilcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNodXAnLCB0aGlzLl90b3VjaHVwSGFuZGxlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHJlbW92ZXMgY29udHJvbCBoYW5sZGVycyBiYXNlZCBvbiBmbGFnIG9mIG92ZXJhbGwgY29udHJvbCBiZWluZyBkaXNhYmxlZC5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSBpc0Rpc2FibGVkXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlSGFuZGxlcnMgKGlzRGlzYWJsZWQpIHtcbiAgICB0aGlzLl9ldmVudFN0YXJ0UG9zaXRpb24gPSAwXG4gICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuX3RyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fbW91c2Vtb3ZlSGFuZGxlcilcbiAgICAgIHRoaXMuX3Byb2dyZXNzQmFyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fbW91c2Vtb3ZlSGFuZGxlcilcbiAgICAgIHRoaXMuX2J1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9tb3VzZWRvd25IYW5kbGVyKVxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fbW91c2Vtb3ZlSGFuZGxlcilcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9tb3VzZXVwSGFuZGxlcilcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX3RvdWNobW92ZUhhbmRsZXIpXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHVwJywgdGhpcy5fdG91Y2h1cEhhbmRsZXIpXG4gICAgICB0aGlzLl90cmFjay5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLXNsaWRlci1kaXNhYmxlZCcpXG4gICAgICB0aGlzLl9wcm9ncmVzc0Jhci5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLXNsaWRlci1kaXNhYmxlZCcpXG4gICAgICB0aGlzLl9idXR0b24uY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1zbGlkZXItZGlzYWJsZWQnKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX3RyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fbW91c2Vtb3ZlSGFuZGxlcilcbiAgICAgIHRoaXMuX3Byb2dyZXNzQmFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fbW91c2Vtb3ZlSGFuZGxlcilcbiAgICAgIHRoaXMuX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9tb3VzZWRvd25IYW5kbGVyKVxuICAgICAgdGhpcy5fYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl90b3VjaGRvd25IYW5kbGVyKVxuICAgICAgdGhpcy5fdHJhY2suY2xhc3NMaXN0LnJlbW92ZSgncmVkNXByby1tZWRpYS1zbGlkZXItZGlzYWJsZWQnKVxuICAgICAgdGhpcy5fcHJvZ3Jlc3NCYXIuY2xhc3NMaXN0LnJlbW92ZSgncmVkNXByby1tZWRpYS1zbGlkZXItZGlzYWJsZWQnKVxuICAgICAgdGhpcy5fYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3JlZDVwcm8tbWVkaWEtc2xpZGVyLWRpc2FibGVkJylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmUtbGF5b3V0IHN1YiBjb250cm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sYXlvdXQgKCkge1xuICAgIGxldCBwb3NpdGlvbiA9IHRoaXMuX3Byb2dyZXNzQmFyLnBhcmVudE5vZGUuY2xpZW50V2lkdGggKiB0aGlzLl92YWx1ZVxuICAgIHRoaXMuX3Byb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gcG9zaXRpb24gKyAncHgnXG4gICAgdGhpcy5fYnV0dG9uLnN0eWxlLmxlZnQgPSAocG9zaXRpb24gLSAodGhpcy5fYnV0dG9uLmNsaWVudFdpZHRoICogMC41KSkgKyAncHgnXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgYnV0dG9uIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVCdXR0b24gKCkge1xuICAgIGxldCBzcGFuID0gZW52aXJvbm1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgc3Bhbi5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLXNsaWRlci1idXR0b24nKVxuICAgIHJldHVybiBzcGFuXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgcHJvZ3Jlc3MgYmFyIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVQcm9ncmVzc0JhciAoKSB7XG4gICAgbGV0IHNwYW4gPSBlbnZpcm9ubWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICBzcGFuLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtc2xpZGVyLXByb2dyZXNzJylcbiAgICByZXR1cm4gc3BhblxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRyYWNrIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVUcmFjayAoKSB7XG4gICAgbGV0IHNwYW4gPSBlbnZpcm9ubWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICBzcGFuLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtc2xpZGVyLXRyYWNrJylcbiAgICByZXR1cm4gc3BhblxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIGdldCB2YWx1ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IDAuLjFcbiAgICovXG4gIHNldCB2YWx1ZSAocGVyY2VudFZhbHVlIC8qIDAgLSAxICovKSB7XG4gICAgdGhpcy5fdmFsdWUgPSBwZXJjZW50VmFsdWVcbiAgICB0aGlzLl9sYXlvdXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZGlzYWJsZWQgZmxhZy5cbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGdldCBkaXNhYmxlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZGlzYWJsZWQgZmxhZy5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSBib29sXG4gICAqL1xuICBzZXQgZGlzYWJsZWQgKGJvb2wpIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGJvb2xcbiAgICB0aGlzLl91cGRhdGVIYW5kbGVycyhib29sKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRhcmdldCBjb250YWluZXIgdGhpcyBjb250cm9sIGlzIGFzc2lnbmVkIHRvIGluIHRoZSBET00uXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBnZXQgdmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sU2xpZGVyXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9zdWJzY3JpYmVyL2NvbnRyb2xzL3NsaWRlci5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgSW1wbEZhY3RvcnlPcmRlciBmcm9tICcuLi91dGlsL2ltcGwtZmFjdG9yeS1vcmRlcidcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vY29yZS9ldmVudC1lbWl0dGVyJ1xuaW1wb3J0IFJUQ1N1YnNjcmliZXIgZnJvbSAnLi9yZWQ1cHJvLXJ0YydcbmltcG9ydCBSVE1QU3Vic2NyaWJlciBmcm9tICcuL3JlZDVwcm8tcnRtcCdcbmltcG9ydCBITFNTdWJzY3JpYmVyIGZyb20gJy4vcmVkNXByby1obHMnXG5cbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcbmltcG9ydCB7IFBsYXliYWNrVHlwZXMgfSBmcm9tICcuLi9lbnVtL3BsYXliYWNrJ1xuaW1wb3J0IHsgZGVidWcsIHdhcm4gfSBmcm9tICcuLi9sb2cnXG5cbmNvbnN0IE5BTUUgPSAnUmVkNVByb1N1YnNjcmliZXInXG5cbmNvbnN0IHBsYXliYWNrRmFjdG9yeSA9IG5ldyBJbXBsRmFjdG9yeU9yZGVyKClcbmNvbnN0IHBsYXliYWNrSW1wbCA9IChmdW5jdGlvbiAoKSB7XG4gIGxldCBtYXAgPSBuZXcgTWFwKClcbiAgbWFwLnNldChQbGF5YmFja1R5cGVzLlJUQywgUlRDU3Vic2NyaWJlcilcbiAgbWFwLnNldChQbGF5YmFja1R5cGVzLlJUTVAsIFJUTVBTdWJzY3JpYmVyKVxuICBtYXAuc2V0KFBsYXliYWNrVHlwZXMuSExTLCBITFNTdWJzY3JpYmVyKVxuICByZXR1cm4gbWFwXG59KCkpXG5cbi8qKlxuICogTWFpbiBlbnRyeSBmb3IgZmFpbG92ZXIgc3VwcG9ydCBvZiBhbGwgc3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbnMuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKi9cbmNsYXNzIFJlZDVQcm9TdWJzY3JpYmVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX29wdGlvbnMgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9vcmRlciA9IFtcbiAgICAgIFBsYXliYWNrVHlwZXMuUlRDLFxuICAgICAgUGxheWJhY2tUeXBlcy5SVE1QLFxuICAgICAgUGxheWJhY2tUeXBlcy5ITFNcbiAgICBdXG4gIH1cblxuICAvKipcbiAgICogVXRpbGl6ZXMgRmFpbG92ZXIgUHVibGlzaGVyIEZhY3RvcnkgdG8gYXR0ZW1wdCBpbiBkZXRlcm1pbmluZyBicm93c2VyIHN1cHBvcnQgZm9yIFB1Ymxpc2hlciBmcm9tIGRlZmluZWQgb3JkZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UGxheWJhY2tGcm9tT3JkZXIgKG9yZGVyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHBsYXliYWNrRmFjdG9yeS5jcmVhdGUob3JkZXIsIHBsYXliYWNrSW1wbCwgb3B0aW9ucywgJ2luaXQnKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNwZWNpZmllZCBvcmRlciBmb3IgYXV0by1mYWlsb3Zlci5cbiAgICpcbiAgICogIEByZXR1cm4ge0FycmF5fVxuICAgKiAgICAgICAgICBEZWZhdWx0OiBgWydydGMnLCAncnRtcCcsICdobHMnXWAuXG4gICAqL1xuICBnZXRQbGF5YmFja09yZGVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fb3JkZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBkZXNpcmVkIGF1dG8tZmFpbG92ZXIgb3JkZXIuXG4gICAqXG4gICAqICBAcGFyYW0ge0FycmF5fSBvcmRlclxuICAgKiAgICAgICAgICBUaGUgZGVzaXJlZCBvcmRlci4gZS5nLCBgWydydGMnLCAncnRtcCcsICdobHMnXWAuXG4gICAqL1xuICBzZXRQbGF5YmFja09yZGVyIChvcmRlcikge1xuICAgIC8vIEFsbG93IGZvciBzdHJpbmcgdmFsdWUgdG8gZGVmaW5lIHNpbmdsZSBpdGVtIGluIG9yZGVyLlxuICAgIG9yZGVyID0gdHlwZW9mIG9yZGVyID09PSAnc3RyaW5nJyA/IFtvcmRlcl0gOiBvcmRlclxuXG4gICAgLy8gRmlsdGVyIG91dCB2YWx1ZXMgbm90IGF2YWlsYWJsZSBpbiBlbnVtZXJhdGlvbiBvZiBwbGF5YmFjayB0eXBlcy5cbiAgICBjb25zdCB0ID0gb3JkZXIuZmlsdGVyKGVudHJ5ID0+IHtcbiAgICAgIGxldCBrZXlcbiAgICAgIGZvciAoa2V5IGluIFBsYXliYWNrVHlwZXMpIHtcbiAgICAgICAgaWYgKFBsYXliYWNrVHlwZXNba2V5XS50b0xvd2VyQ2FzZSgpID09PSBlbnRyeS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSkubWFwKGVudHJ5ID0+IGVudHJ5LnRvTG93ZXJDYXNlKCkpXG5cbiAgICAvLyBEZWZpbmUgbmV3IG9yZGVyLlxuICAgIHRoaXMuX29yZGVyID0gWy4uLm5ldyBTZXQodCldXG4gICAgZGVidWcoTkFNRSwgYFtvcmRlcnVwZGF0ZV06ICR7dGhpcy5fb3JkZXJ9YClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gaW5pdGlhbGl6ZSBhbmQgZGV0ZXJtaW5lIHRoZSBwcm9wZXIgU3Vic2NyaWJlciBpbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBUaGUgcmV0dXJuZWQgYFByb21pc2VgIHdpbGwgZWl0aGVyIHJlc29sdmUgd2l0aCB0aGUgZGV0ZXJtaW5lZCBTdWJzY3JpYmVyIGluc3RhbmNlIG9yIHJlamVjdCB3aXRoIGFuIGVycm9yIFN0cmluZyBpbiBmYWlsdXJlIHRvIGRldGVybWluZSBTdWJzY3JpYmVyIHR5cGUuXG4gICAqXG4gICAqICBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgICBUaGUgaW5pdGlhbGl6YXRpb24gY29uZmlndXJhdGlvbiBtYXAgZm9yIGVhY2ggZGVzaXJlZCBmYWlsb3ZlciB0ZWNoLlxuICAgKiAgQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGluaXQgKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgZGVidWcoTkFNRSwgJ1tpbml0XScpXG4gICAgdGhpcy5fZ2V0UGxheWJhY2tGcm9tT3JkZXIodGhpcy5fb3JkZXIsIHRoaXMuX29wdGlvbnMpXG4gICAgICAudGhlbihzdWJzY3JpYmVyID0+IHtcbiAgICAgICAgZGVidWcoTkFNRSwgYFtpbml0OnN1Y2Nlc3NdOiBzdWJzY3JpYmVyIGZvdW5kICR7c3Vic2NyaWJlci5nZXRUeXBlKCl9YClcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShzdWJzY3JpYmVyKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICB3YXJuKE5BTUUsIGBbcGxheWVycm9yXTogQ291bGQgbm90IGltcGxlbWVudCBhIHN1YnNjcmliZXI6ICR7ZXJyfWApXG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpXG4gICAgICB9KVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGVudW1lcmF0ZWQgdmFsdWUgU3Vic2NyaWJlciB0eXBlcyB1c2VkIGluIGZhaWxvdmVyIG9yZGVyLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0IHBsYXliYWNrVHlwZXMgKCkge1xuICAgIHJldHVybiBQbGF5YmFja1R5cGVzXG4gIH1cblxufVxuXG5leHBvcnQgeyBSZWQ1UHJvU3Vic2NyaWJlciwgUlRDU3Vic2NyaWJlciwgSExTU3Vic2NyaWJlciwgUlRNUFN1YnNjcmliZXIgfVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc3Vic2NyaWJlci9pbmRleC5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi4vZW52L2Jyb3dzZXInXG5pbXBvcnQgKiBhcyB3ZWJzb2NrZXQgZnJvbSAnLi4vYWRhcHRlci93ZWJzb2NrZXQnXG5pbXBvcnQgU29ja2V0SGVscGVyIGZyb20gJy4uL2hlbHBlci9zb2NrZXQtaGVscGVyJ1xuaW1wb3J0IEhMU1NvdXJjZUhhbmRsZXIgZnJvbSAnLi9yZWQ1cHJvLXNvdXJjZS1oYW5kbGVyLWhscydcbmltcG9ydCBQbGF5YmFja1ZpZXcgZnJvbSAnLi4vdmlldy9wbGF5YmFjaydcbmltcG9ydCB7IFBsYXliYWNrQ29udHJvbGxlciB9IGZyb20gJy4vY29udHJvbHMvaW5kZXgnXG5pbXBvcnQgeyBTdWJzY3JpYmVyRXZlbnQgfSBmcm9tICcuLi9ldmVudCdcbmltcG9ydCB7IFN1YnNjcmliZXJFdmVudFR5cGVzIH0gZnJvbSAnLi4vZXZlbnQnXG5pbXBvcnQgeyBQbGF5YmFja1R5cGVzIH0gZnJvbSAnLi4vZW51bS9wbGF5YmFjaydcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcbmltcG9ydCB7IGRlYnVnLCB3YXJuLCBlcnJvciB9IGZyb20gJy4uL2xvZydcbmltcG9ydCB7IGhsc1NvY2tldEVuZHBvaW50RnJvbU9wdGlvbnMgYXMgZW5kcG9pbnRGcm9tT3B0aW9ucyB9IGZyb20gJy4uL3V0aWwvdXJsLWVuZHBvaW50J1xuXG5jb25zdCBOQU1FID0gJ0hMU1N1YnNjcmliZXInXG5cbi8qKlxuICogU2ltcGxlIGdlbmVyYXRpb24gb2cgdW5pcXVlIHN1YnNjcmliZXIgaWQuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGdlbmVyYXRlU3Vic2NyaXB0aW9uSWQgPSAoKSA9PiB7XG4gIGNvbnN0IGlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHgxMDAwMCkudG9TdHJpbmcoMTYpXG4gIHJldHVybiBgc3Vic2NyaWJlci0ke2lkfWBcbn1cblxuLy8gRGVmYXVsdCB0byBzZWN1cmUgc2V0dGluZ3MuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgcHJvdG9jb2w6ICdodHRwcycsXG4gIHBvcnQ6IDQ0MyxcbiAgYXBwOiAnbGl2ZScsXG4gIG1pbWVUeXBlOiAnYXBwbGljYXRpb24veC1tcGVnVVJMJyxcbiAgbWVkaWFFbGVtZW50SWQ6ICdyZWQ1cHJvLXN1YnNjcmliZXInLFxuICBhdXRvTGF5b3V0T3JpZW50YXRpb246IHRydWUsXG4gIG11dGVPbkF1dG9wbGF5UmVzdHJpY3Rpb246IHRydWUsXG4gIHN1YnNjcmlwdGlvbklkOiBnZW5lcmF0ZVN1YnNjcmlwdGlvbklkKClcbn1cblxuLyoqXG4gKiBVdGlsIHRvIHJldHVybiB0aGUgZW5kcG9pbnQgZm9yIGFuIEhMUyB2aWRlbyBmaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIG9iamVjdC5cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBvcHRpb25zVG9IbHNVUkwgPSAob3B0aW9ucykgPT4ge1xuICBjb25zdCBwcm90b2NvbCA9IG9wdGlvbnMuaGxzcHJvdG9jb2wgPyBvcHRpb25zLmhsc3Byb3RvY29sIDogb3B0aW9ucy5wcm90b2NvbFxuICBjb25zdCBwb3J0ID0gb3B0aW9ucy5obHNwb3J0ID8gb3B0aW9ucy5obHNwb3J0IDogb3B0aW9ucy5wb3J0XG4gIGNvbnN0IGFwcEVuZHBvaW50ID0gb3B0aW9ucy5jb250ZXh0ID8gW29wdGlvbnMuYXBwLCBvcHRpb25zLmNvbnRleHRdLmpvaW4oJy8nKSA6IG9wdGlvbnMuYXBwXG4gIHJldHVybiBgJHtwcm90b2NvbH06Ly8ke29wdGlvbnMuaG9zdH06JHtwb3J0fS8ke2FwcEVuZHBvaW50fS8ke29wdGlvbnMuc3RyZWFtTmFtZX0ubTN1OGBcbn1cblxuLyoqXG4gKiBNYWluIGVudHJ5IGZvciBITFMtYmFzZWQgU3Vic2NyaWJlci5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqIEBleHRlbmRzIFN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xsZXJcbiAqL1xuY2xhc3MgSExTU3Vic2NyaWJlciBleHRlbmRzIFBsYXliYWNrQ29udHJvbGxlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl9vcHRpb25zID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fdmlldyA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9zb2NrZXRIZWxwZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLl92aWV3UmVzb2x2ZXIgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25SZXNvbHZlciA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIHRoaXMuX2JvdW5kQnViYmxlU3Vic2NyaWJlckV2ZW50cyA9IHRoaXMuYnViYmxlU3Vic2NyaWJlckV2ZW50cy5iaW5kKHRoaXMpXG4gIH1cblxuICBfZ2V0Vmlld1Jlc29sdmVyUHJvbWlzZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdSZXNvbHZlci5wcm9taXNlXG4gIH1cblxuICBfZ2V0U3Vic2NyaXB0aW9uUmVzb2x2ZXJQcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25SZXNvbHZlci5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUHJveHkgZXZlbnQgYnViYmxlciB0aHJvdWdoIGhhbmRsZXIgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBidWJibGVTdWJzY3JpYmVyRXZlbnRzIChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09PSBTdWJzY3JpYmVyRXZlbnRUeXBlcy5TVUJTQ1JJQkVfU1RBUlQpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvblJlc29sdmVyLnJlc29sdmUodGhpcylcbiAgICB9XG4gICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoZXZlbnQudHlwZSwgdGhpcywgZXZlbnQuZGF0YSkpXG4gIH1cblxuICAvKipcbiAgICogR2xvbXMgdGhlIFBsYXliYWNrIENvbnRyb2xzIEFQSSBvbnRvIHRoaXMgaW5zdGFuY2UgdG8gcHJvdmlkZSBlYXNlIGluIHVzZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGhhbmRsZXJcbiAgICogICAgICAgIFRoZSBtZXRob2QgcmVxdWVzdCBoYW5kbGVyIHRvIGJpbmQgYW5kIGZvcndhcmQgY2FsbHMgb24uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2xvbVNvdXJjZUhhbmRsZXJBUEkgKGhhbmRsZXIpIHtcbiAgICB0aGlzLnBsYXkgPSBoYW5kbGVyLnBsYXkuYmluZChoYW5kbGVyKVxuICAgIHRoaXMucGF1c2UgPSBoYW5kbGVyLnBhdXNlLmJpbmQoaGFuZGxlcilcbiAgICB0aGlzLnJlc3VtZSA9IGhhbmRsZXIucmVzdW1lLmJpbmQoaGFuZGxlcilcbiAgICB0aGlzLnN0b3AgPSBoYW5kbGVyLnN0b3AuYmluZChoYW5kbGVyKVxuICAgIHRoaXMubXV0ZSA9IGhhbmRsZXIubXV0ZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy51bm11dGUgPSBoYW5kbGVyLnVubXV0ZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy5zZXRWb2x1bWUgPSBoYW5kbGVyLnNldFZvbHVtZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy5zZWVrVG8gPSBoYW5kbGVyLnNlZWtUby5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy50b2dnbGVGdWxsU2NyZWVuID0gaGFuZGxlci50b2dnbGVGdWxsU2NyZWVuLmJpbmQoaGFuZGxlcilcbiAgICBoYW5kbGVyLm9uKCcqJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChldmVudC50eXBlLCB0aGlzLCBldmVudC5kYXRhKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFN0aWxsIGluIHVzZSwgYnV0IGhvbGQtb3ZlciBvZiBwcmV2aW91cyAzLnggU0RLIHZlcnNpb25zIGRlc2lnbmVkIHRvIHBhaXIgdmlld3MgYW5kIHN1YnNjcmliZXJzLiBJbiA0LjAuMCBpdCBoYXMgYmVlbiBpbnRlcm5hbGl6ZWQuXG4gICAqIEFQSSBkZXByZWNhdGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFZpZXdJZk5vdEV4aXN0IChjdXJyZW50VmlldywgbWVkaWFFbGVtZW50SWQgPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgY3VycmVudFZpZXcgPT09ICd1bmRlZmluZWQnICYmIG1lZGlhRWxlbWVudElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHZpZXcgPSBuZXcgUGxheWJhY2tWaWV3KG1lZGlhRWxlbWVudElkKVxuICAgICAgICB2aWV3LmF0dGFjaFN1YnNjcmliZXIodGhpcylcbiAgICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGluaXRpYWxpemUgdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyIGZvciBITFMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgICAgICBUaGUgaW5pdGlhbGl6YXRpb24gY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGhhbmRsZXJcbiAgICogICAgICAgIFRoZSBoYW5kbGVyIGluc3RhbmNlIHRoYXQgd2lsbCBtYW5hZ2UgdmlldyBpbnRlcmFjdGlvbiBhbmQgZXZlbnRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRIYW5kbGVyIChvcHRpb25zKSB7XG4gICAgY29uc3QgdXJsUmVnZXggPSAvXmh0dHAofHMpLipcXC5tM3U4L2dcbiAgICBsZXQgdXJsID0gdGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lLm1hdGNoKHVybFJlZ2V4KSA/IHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSA6IG9wdGlvbnNUb0hsc1VSTCh0aGlzLl9vcHRpb25zKVxuICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIub24oJyonLCB0aGlzLl9ib3VuZEJ1YmJsZVN1YnNjcmliZXJFdmVudHMpXG4gICAgdGhpcy5fc291cmNlSGFuZGxlci5hZGRTb3VyY2UodXJsLCBvcHRpb25zLm1pbWVUeXBlLCBvcHRpb25zKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5DT05ORUNUX1NVQ0NFU1MpKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBlcnJvcihOQU1FLCAnQ291bGQgbm90IGVzdGFibGlzaCBhbiBITFMgU3Vic2NyaWJlcjogJyArIGVycilcbiAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuQ09OTkVDVF9GQUlMVVJFKSlcbiAgICAgIH0pXG4gIH1cblxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGluaXRpYWxpemUgdGhlIEhMUy1iYXNlZCBTdWJzY3JpYmVyIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb24uXG4gICAqIFRoZSByZXR1cm5lZCBgUHJvbWlzZWAgd2lsbCBlaXRoZXIgcmVzb2x2ZSB3aXRoIGEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2Ugb3IgcmVqZWN0IHdpdGggYW4gZXJyb3IgYFN0cmluZ2AgaW4gZmFpbHVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIG1hcC5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGluaXQgKG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIGlmICghZW52aXJvbm1lbnQuc3VwcG9ydHNITFMoKSkge1xuICAgICAgd2FybihOQU1FLCBgQ291bGQgbm90IHJlc29sdmUgSExTU3Vic2NyaWJlciBpbnN0YW5jZS5gKVxuICAgICAgZGVmZXJyZWQucmVqZWN0KGBDb3VsZCBub3QgcmVzb2x2ZSBITFNTdWJzY3JpYmVyIGluc3RhbmNlLmApXG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmNvbm5lY3Rpb25QYXJhbXMgJiYgIXdlYnNvY2tldC5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAvLyBJZiBgY29ubmVjdGlvblBhcmFtc2AgYXJlIHByb3ZpZGVkIGluIHRoZSBpbml0IGNvbmZpZyxcbiAgICAgIC8vICB0aGVuIGEgc3Vic2VxdWVudCB2YWxpZGF0aW9uIGNhbGwgaXMgbWFkZSBvbiBhIFdlYlNvY2tldCB0byBcbiAgICAgIC8vICBlbnN1cmUgdGhhdCB0aGlzIGNsaWVudCBpcyBhbGxvd2VkIGFjY2Vzcy5cbiAgICAgIHdhcm4oTkFNRSwgYENvdWxkIG5vdCByZXNvbHZlIEhMU1N1YnNjcmliZXIgaW5zdGFuY2Ugd2l0aCBjb25uZWN0aW9uIHBhcmFtcy4gV2ViU29ja2V0IHN1cHBvcnQgaXMgcmVxdWlyZWQuYClcbiAgICAgIGRlZmVycmVkLnJlamVjdChOQU1FLCBgQ291bGQgbm90IHJlc29sdmUgSExTU3Vic2NyaWJlciBpbnN0YW5jZSB3aXRoIGNvbm5lY3Rpb24gcGFyYW1zLiBXZWJTb2NrZXQgc3VwcG9ydCBpcyByZXF1aXJlZC5gKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICBjb25zdCBzb2NrZXRQcm9taXNlID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5jb25uZWN0aW9uUGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3NvY2tldEhlbHBlciA9IG5ldyBTb2NrZXRIZWxwZXIodGhpcywgJ0hMU1N1YnNjcmlwdGlvblNvY2tldCcpXG4gICAgICAgIGNvbnN0IHNvY2tldHVybCA9IGVuZHBvaW50RnJvbU9wdGlvbnModGhpcy5fb3B0aW9ucywge1xuICAgICAgICAgIGlkOiB0aGlzLl9vcHRpb25zLnN1YnNjcmlwdGlvbklkXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuX3NvY2tldEhlbHBlci5zZXRVcChzb2NrZXR1cmwsIHNvY2tldFByb21pc2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb2NrZXRQcm9taXNlLnJlc29sdmUoKVxuICAgICAgfVxuICAgICAgc29ja2V0UHJvbWlzZS5wcm9taXNlXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAvLyBUZWFyIGRvd24gc29ja2V0IGhlbHBlciBpZiBleGlzdHMuXG4gICAgICAgICAgLy8gV2Ugb25seSBuZWVkZWQgaXQgdG8gZG8gdmFsaWRhdGlvbiB3aXRoIG9wdGlvbmFsIGNvbm5lY3Rpb25QYXJhbXMuXG4gICAgICAgICAgaWYgKHRoaXMuX3NvY2tldEhlbHBlcikge1xuICAgICAgICAgICAgdGhpcy5fc29ja2V0SGVscGVyLnRlYXJEb3duKClcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldEhlbHBlciA9IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9zZXRWaWV3SWZOb3RFeGlzdCh0aGlzLl92aWV3LCB0aGlzLl9vcHRpb25zLm1lZGlhRWxlbWVudElkKVxuICAgICAgICAgIHRoaXMuX2dldFZpZXdSZXNvbHZlclByb21pc2UoKVxuICAgICAgICAgICAgLnRoZW4odmlldyA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIgPSBuZXcgSExTU291cmNlSGFuZGxlcih2aWV3LnZpZXcsIHRoaXMuZ2V0VHlwZSgpKVxuICAgICAgICAgICAgICB0aGlzLl9nbG9tU291cmNlSGFuZGxlckFQSSh0aGlzLl9zb3VyY2VIYW5kbGVyKVxuICAgICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRIYW5kbGVyKHRoaXMuX29wdGlvbnMpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0aGlzKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcilcbiAgICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5DT05ORUNUX0ZBSUxVUkUsIHRoaXMsIGVycm9yKSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGlsbCBpbiB1c2UgZm9yIGFzc2lnbmluZyBkb2N1bWVudCBlbGVtZW50IHZpZXcgbWFuYWdlbWVudCB0byB0aGlzIGluc3RhbmNlLlxuICAgKiBBUEkgZGVwcmVjYXRlZCBpbiA0LjAuMC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldFZpZXcgKHZpZXcpIHtcbiAgICB0aGlzLl92aWV3ID0gdmlld1xuICAgIHRoaXMuX3ZpZXdSZXNvbHZlci5yZXNvbHZlKHZpZXcpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGJlZ2luIHN1YnNjcmliaW5nIHRvIGEgc3RyZWFtLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgICBUaGUgcmV0dXJuZWQgYFByb21pc2VgIHdpbGwgcmVzb2x2ZSBvciByZWplY3Qgb24gc3VjY2Vzc2Z1bCBzdGFydCBvZiBwbGF5YmFjay5cbiAgICovXG4gIHN1YnNjcmliZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFN1YnNjcmlwdGlvblJlc29sdmVyUHJvbWlzZSgpXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzdG9wIGEgc3Vic2NyaXB0aW9uLlxuICAgKiBUaGUgcmV0dXJuZWQgYFByb21pc2VgIHdpbGwgZWl0aGVyIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3NmdWwgc3RvcCBvZiBzdWJzY3JpcHRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICB1bnN1YnNjcmliZSAoKSB7XG4gICAgZGVidWcoTkFNRSwgJ1t1bnNjdWJzY3JpYmVdJylcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIGlmICh0aGlzLl9zb2NrZXRIZWxwZXIpIHtcbiAgICAgIHRoaXMuX3NvY2tldEhlbHBlci50ZWFyRG93bigpXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB0aGlzLl9zb3VyY2VIYW5kbGVyLnN0b3AoKVxuICAgICAgdGhpcy5fc291cmNlSGFuZGxlci5kaXNjb25uZWN0KClcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChlLm1lc3NhZ2UpXG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjb25uZWN0aW9uIGhhbmRsZXIgZm9yIHBsYXliYWNrLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRDb25uZWN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc291cmNlSGFuZGxlclxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcmVmZXJlbmNlIHRvIHBsYXliYWNrIGNvbnRyb2xzIGlmIGF2YWlsYWJsZS5cbiAgICpcbiAgICogQHJldHVybiB7UGxheWJhY2tDb250cm9sc31cbiAgICovXG4gIGdldENvbnRyb2xzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc291cmNlSGFuZGxlciA/IHRoaXMuX3NvdXJjZUhhbmRsZXIuZ2V0Q29udHJvbHMoKSA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gdXNlZCBpbiBgaW5pdCgpYC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0YXJnZXQgdmlldyBFbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgZ2V0UGxheWVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlldy52aWV3XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHlwZSBvZiBpbXBsZW1lbnRhdGlvbjogYFJUQ2AuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGdldFR5cGUgKCkge1xuICAgIHJldHVybiBQbGF5YmFja1R5cGVzLkhMUy50b1VwcGVyQ2FzZSgpXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBITFNTdWJzY3JpYmVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc3Vic2NyaWJlci9yZWQ1cHJvLWhscy5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi4vZW52L2Jyb3dzZXInXG5pbXBvcnQgeyBhcHBseU9yaWVudGF0aW9uIH0gZnJvbSAnLi4vZW52L3RyYW5zbGF0aW9uLXV0aWwnXG5pbXBvcnQgKiBhcyB3ZWJydGMgZnJvbSAnLi4vYWRhcHRlci93ZWJydGMnXG5pbXBvcnQgKiBhcyB3ZWJzb2NrZXQgZnJvbSAnLi4vYWRhcHRlci93ZWJzb2NrZXQnXG5pbXBvcnQgUlRDU291cmNlSGFuZGxlciBmcm9tICcuL3JlZDVwcm8tc291cmNlLWhhbmRsZXItcnRjJ1xuaW1wb3J0IFN1YnNjcmlwdGlvblNvY2tldEhlbHBlciBmcm9tICcuLi9oZWxwZXIvc29ja2V0LWhlbHBlci1zdWInXG5pbXBvcnQgU3Vic2NyaXB0aW9uUGVlckhlbHBlciBmcm9tICcuLi9oZWxwZXIvd2VicnRjLWhlbHBlci1zdWInXG5pbXBvcnQgUGxheWJhY2tWaWV3IGZyb20gJy4uL3ZpZXcvcGxheWJhY2snXG5pbXBvcnQgeyBQbGF5YmFja0NvbnRyb2xsZXIgfSBmcm9tICcuL2NvbnRyb2xzJ1xuaW1wb3J0IHsgbWV0YWRhdGFSZXNvbHV0aW9uVG9PYmplY3QgfSBmcm9tICcuLi91dGlsL29iamVjdCdcbmltcG9ydCB7IHJ0Y1NvY2tldEVuZHBvaW50RnJvbU9wdGlvbnMgYXMgZW5kcG9pbnRGcm9tT3B0aW9ucyB9IGZyb20gJy4uL3V0aWwvdXJsLWVuZHBvaW50J1xuaW1wb3J0IHsgU3Vic2NyaWJlckV2ZW50IH0gZnJvbSAnLi4vZXZlbnQnXG5pbXBvcnQge1xuICBQbGF5YmFja1R5cGVzLFxuICBQbGF5YmFja0F1ZGlvRW5jb2RlcixcbiAgUGxheWJhY2tWaWRlb0VuY29kZXJcbn0gZnJvbSAnLi4vZW51bS9wbGF5YmFjaydcbmltcG9ydCB7IEljZVRyYW5zcG9ydFR5cGVzIH0gZnJvbSAnLi4vZW51bS93ZWJydGMnXG5pbXBvcnQgeyBEZWZlcnJlZFByb21pc2UgfSBmcm9tICcuLi91dGlsL3Byb21pc2UnXG5pbXBvcnQgeyBTdWJzY3JpYmVyRXZlbnRUeXBlcywgUlRDU3Vic2NyaWJlckV2ZW50VHlwZXMgfSBmcm9tICcuLi9ldmVudCdcbmltcG9ydCB7IGRlYnVnLCB3YXJuLCBlcnJvciB9IGZyb20gJy4uL2xvZydcblxuY29uc3Qgc3ViU3RhcnRSZWdleCA9IC8oLiopIHN0YXJ0aW5nL2lcbmNvbnN0IE5BTUUgPSAnUlRDU3Vic2NyaWJlcidcblxuLyoqXG4gKiBTaW1wbGUgZ2VuZXJhdGlvbiBvZyB1bmlxdWUgc3Vic2NyaWJlciBpZC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgZ2VuZXJhdGVTdWJzY3JpcHRpb25JZCA9ICgpID0+IHtcbiAgY29uc3QgaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwKS50b1N0cmluZygxNilcbiAgcmV0dXJuIGBzdWJzY3JpYmVyLSR7aWR9YFxufVxuXG4vLyBEZWZhdWx0IHRvIHNlY3VyZSBzZXR0aW5ncy5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBwcm90b2NvbDogJ3dzcycsXG4gIHBvcnQ6IDQ0MyxcbiAgYXBwOiAnbGl2ZScsXG4gIGF1dG9MYXlvdXRPcmllbnRhdGlvbjogdHJ1ZSxcbiAgbWVkaWFFbGVtZW50SWQ6ICdyZWQ1cHJvLXN1YnNjcmliZXInLFxuICBydGNDb25maWd1cmF0aW9uOiB7XG4gICAgaWNlU2VydmVyczogW3t1cmxzOiAnc3R1bjpzdHVuMi5sLmdvb2dsZS5jb206MTkzMDInfV0sXG4gICAgaWNlQ2FuZGlkYXRlUG9vbFNpemU6IDIsXG4gICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZSdcbiAgfSwgLy8gRmF2b3JlZCBvdmVyIGljZVNlcnZlcnMuXG4gIGljZVNlcnZlcnM6IHVuZGVmaW5lZCwgLy8gRGVwcmVjYXRlZC4gUHJlc2VydmVkIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5LlxuICBpY2VUcmFuc3BvcnQ6IEljZVRyYW5zcG9ydFR5cGVzLlVEUCxcbiAgbXV0ZU9uQXV0b3BsYXlSZXN0cmljdGlvbjogdHJ1ZSxcbiAgbWFpbnRhaW5Db25uZWN0aW9uT25TdWJzY3JpYmVFcnJvcnM6IGZhbHNlXG59XG5cblxuLyoqXG4gKiBNYWluIGVudHJ5IGZvciBXZWJSVEMtYmFzZWQgU3Vic2NyaWJlci5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqIEBleHRlbmRzIFN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xsZXJcbiAqL1xuY2xhc3MgUlRDU3Vic2NyaWJlciBleHRlbmRzIFBsYXliYWNrQ29udHJvbGxlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl92aWV3ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fb3B0aW9ucyA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3BlZXJIZWxwZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9zb2NrZXRIZWxwZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9jb25uZWN0aW9uQ2xvc2VkID0gdHJ1ZVxuICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9tZWRpYVN0cmVhbSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX3ZpZXdSZXNvbHZlciA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIHRoaXMuX2F2YWlsYWJpbGl0eVJlc29sdmVyID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uUmVzb2x2ZXIgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICB0aGlzLl9vcmllbnRhdGlvbiA9IDBcbiAgfVxuXG4gIF9nZXRWaWV3UmVzb2x2ZXJQcm9taXNlICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlld1Jlc29sdmVyLnByb21pc2VcbiAgfVxuXG4gIF9nZXRBdmFpbGFiaWxpdHlSZXNvbHZlclByb21pc2UgKCkge1xuICAgIHJldHVybiB0aGlzLl9hdmFpbGFiaWxpdHlSZXNvbHZlci5wcm9taXNlXG4gIH1cblxuICBfZ2V0U3Vic2NyaXB0aW9uUmVzb2x2ZXJQcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25SZXNvbHZlci5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogR2xvbXMgdGhlIFBsYXliYWNrIENvbnRyb2xzIEFQSSBvbnRvIHRoaXMgaW5zdGFuY2UgdG8gcHJvdmlkZSBlYXNlIGluIHVzZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGhhbmRsZXJcbiAgICogICAgICAgIFRoZSBtZXRob2QgcmVxdWVzdCBoYW5kbGVyIHRvIGJpbmQgYW5kIGZvcndhcmQgY2FsbHMgb24uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2xvbVNvdXJjZUhhbmRsZXJBUEkgKGhhbmRsZXIpIHtcbiAgICB0aGlzLnBsYXkgPSBoYW5kbGVyLnBsYXkuYmluZChoYW5kbGVyKVxuICAgIHRoaXMucGF1c2UgPSBoYW5kbGVyLnBhdXNlLmJpbmQoaGFuZGxlcilcbiAgICB0aGlzLnJlc3VtZSA9IGhhbmRsZXIucmVzdW1lLmJpbmQoaGFuZGxlcilcbiAgICB0aGlzLnN0b3AgPSBoYW5kbGVyLnN0b3AuYmluZChoYW5kbGVyKVxuICAgIHRoaXMubXV0ZSA9IGhhbmRsZXIubXV0ZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy51bm11dGUgPSBoYW5kbGVyLnVubXV0ZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy5zZXRWb2x1bWUgPSBoYW5kbGVyLnNldFZvbHVtZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy5zZWVrVG8gPSBoYW5kbGVyLnNlZWtUby5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy50b2dnbGVGdWxsU2NyZWVuID0gaGFuZGxlci50b2dnbGVGdWxsU2NyZWVuLmJpbmQoaGFuZGxlcilcbiAgICBoYW5kbGVyLm9uKCcqJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChldmVudC50eXBlLCB0aGlzLCBldmVudC5kYXRhKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFN0aWxsIGluIHVzZSwgYnV0IGhvbGQtb3ZlciBvZiBwcmV2aW91cyAzLnggU0RLIHZlcnNpb25zIGRlc2lnbmVkIHRvIHBhaXIgdmlld3MgYW5kIHN1YnNjcmliZXJzLiBJbiA0LjAuMCBpdCBoYXMgYmVlbiBpbnRlcm5hbGl6ZWQuXG4gICAqIEFQSSBkZXByZWNhdGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFZpZXdJZk5vdEV4aXN0IChjdXJyZW50VmlldywgbWVkaWFFbGVtZW50SWQgPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgY3VycmVudFZpZXcgPT09ICd1bmRlZmluZWQnICYmIG1lZGlhRWxlbWVudElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHZpZXcgPSBuZXcgUGxheWJhY2tWaWV3KG1lZGlhRWxlbWVudElkKVxuICAgICAgICB2aWV3LmF0dGFjaFN1YnNjcmliZXIodGhpcylcbiAgICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGluaXRpYWxpemUgdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyIGZvciBXZWJSVEMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgICAgICBUaGUgaW5pdGlhbGl6YXRpb24gY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGhhbmRsZXJcbiAgICogICAgICAgIFRoZSBoYW5kbGVyIGluc3RhbmNlIHRoYXQgd2lsbCBtYW5hZ2UgdmlldyBpbnRlcmFjdGlvbiBhbmQgZXZlbnRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRIYW5kbGVyIChvcHRpb25zLCBoYW5kbGVyKSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgaGFuZGxlcikge1xuICAgICAgaGFuZGxlci5vbignKicsIHRoaXMuX2JvdW5kQnViYmxlU3Vic2NyaWJlckV2ZW50cylcbiAgICAgIGhhbmRsZXIuYWRkU291cmNlKG9wdGlvbnMpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgYXZhaWxhYmxlIHN0cmVhbSBieSBuYW1lIG9uIHNlcnZlciB0aHJvdWdoIFdlYlNvY2tldCByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyZWFtTmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIHN0cmVhbSB0byBsb29rIHVwLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlcXVlc3RBdmFpbGFiaWxpdHkgKHN0cmVhbU5hbWUpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3JlcXVlc3RhdmFpbGFiaWxpdHldJylcbiAgICAvLyBtZXNzYWdlIG9uIHNvY2tldCByZXR1cm5zIC0+IG9uU3RyZWFtKFVuKUF2YWlsYWJsZVxuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIGlzQXZhaWxhYmxlOiBzdHJlYW1OYW1lXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IG9mZmVyIG92ZXIgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyZWFtTmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIHN0cmVhbSB0byBzdWJzY3JpYmUgdG8uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJzY3JpcHRpb25JZFxuICAgKiAgICAgICAgVGhlIHVuaXF1ZSBpZCBvZiB0aGlzIHN1YnNjcmliZXIuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2RW5jb2RpbmdcbiAgICogICAgICAgIE9wdGlvbmFsIGVuY29kaW5nIHR5cGUgZm9yIHZpZGVvLiBEZWZhdWx0cyB0byBzZXJ2ZXIgc2VsZWN0aW9uLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYUVuY29kaW5nXG4gICAqICAgICAgICBPcHRpb25hbCBlbmNvZGluZyB0eXBlIGZvciBhdWRpby4gRGVmYXVsdHMgdG8gc2VydmVyIHNlbGVjdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXF1ZXN0T2ZmZXIgKHN0cmVhbU5hbWUsIHN1YnNjcmlwdGlvbklkLCB0cmFuc3BvcnQsIHZFbmNvZGluZyA9IHVuZGVmaW5lZCwgYUVuY29kaW5nID0gdW5kZWZpbmVkKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tyZXF1ZXN0b2ZmZXJdJylcbiAgICBsZXQgb2ZmZXIgPSB7XG4gICAgICByZXF1ZXN0T2ZmZXI6IHN0cmVhbU5hbWUsXG4gICAgICByZXF1ZXN0SWQ6IHN1YnNjcmlwdGlvbklkLFxuICAgICAgdHJhbnNwb3J0OiB0cmFuc3BvcnRcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2RW5jb2RpbmcgIT09ICd1bmRlZmluZWQnICYmIHZFbmNvZGluZyAhPT0gUGxheWJhY2tWaWRlb0VuY29kZXIuTk9ORSkge1xuICAgICAgb2ZmZXIudmlkZW9FbmNvZGluZyA9IHZFbmNvZGluZ1xuICAgIH0gZWxzZSBpZiAoZW52aXJvbm1lbnQuZ2V0SXNFZGdlKCkpIHtcbiAgICAgIC8vIEZvcmNlIFZQOCBvbiBFZGdlIGlmIG5vdCBzcGVjaWZpZWQgaW4gdGhlIGluaXQgY29uZmlnLlxuICAgICAgLy8gb2ZmZXIudmlkZW9FbmNvZGluZyA9IFBsYXliYWNrVmlkZW9FbmNvZGVyLlZQOFxuICAgIH1cbiAgICBpZiAodHlwZW9mIGFFbmNvZGluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgYUVuY29kaW5nICE9PSBQbGF5YmFja0F1ZGlvRW5jb2Rlci5OT05FKSB7XG4gICAgICBvZmZlci5hdWRpb0VuY29kaW5nID0gYUVuY29kaW5nXG4gICAgfVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFJUQ1N1YnNjcmliZXJFdmVudFR5cGVzLk9GRkVSX1NUQVJULCB0aGlzKSlcbiAgICAvLyBtZXNzYWdlIG9uIHNvY2tldCByZXR1cm5zIC0+IG9uU0RQT2ZmZXJcbiAgICB0aGlzLl9zb2NrZXRIZWxwZXIucG9zdChvZmZlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCBzZW5kcyBhbiBhbnN3ZXIgYmFzZWQgb24gcHJvdmlkZWQgU0RQLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2RwXG4gICAqICAgICAgICBUaGUgU0RQIG9iamVjdCB0byB1c2UgaW4gY3JlYXRpbmcgYW4gU0RQIGFuc3dlciB0byBzZW5kIGJhY2suXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVxdWVzdEFuc3dlciAoc2RwKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tyZXF1ZXN0YW5zd2VyXScpXG4gICAgLy8gaW52b2tlcyAtPiBzZW5kQW5zd2VyXG4gICAgdGhpcy5fcGVlckhlbHBlci5jcmVhdGVBbnN3ZXIoc2RwKVxuICAgICAgICAudGhlbihzZXNzaW9uRGVzY3JpcHRpb24gPT4ge1xuICAgICAgICAgIGRlYnVnKE5BTUUsICdbb25hbnN3ZXJjcmVhdGVkXScpXG4gICAgICAgICAgZGVidWcoTkFNRSwgJ1s+IHNlbmRhbnN3ZXJdJylcbiAgICAgICAgICB0aGlzLl9zZW5kQW5zd2VyKHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSwgdGhpcy5fb3B0aW9ucy5zdWJzY3JpcHRpb25JZCwgc2Vzc2lvbkRlc2NyaXB0aW9uKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIHRoaXMub25TRFBFcnJvcihlcnJvcilcbiAgICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBQb3N0cyBTRFAgYW5zd2VyIHRvIHNlcnZlciBvdmVyIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmVhbU5hbWVcbiAgICogICAgICAgIFRoZSB0YXJnZXQgc3RyZWFtIG5hbWUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJzY3JpcHRpb25JZFxuICAgKiAgICAgICAgVGhlIHVuaXF1ZSBpZCBvZiB0aGlzIHN1YnNjcmliZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZHBcbiAgICogICAgICAgIFRoZSBTRFAgdG8gc2VuZCBhcyBhbiBhbnN3ZXIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VuZEFuc3dlciAoc3RyZWFtTmFtZSwgc3Vic2NyaXB0aW9uSWQsIHNkcCkge1xuICAgIGRlYnVnKE5BTUUsIGBbc2VuZGFuc3dlcl06IHN0cmVhbW5hbWUoJHtzdHJlYW1OYW1lfSksIHN1YnNjcmlwdGlvbmlkKCR7c3Vic2NyaXB0aW9uSWR9KWApXG4gICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoUlRDU3Vic2NyaWJlckV2ZW50VHlwZXMuQU5TV0VSX1NUQVJULCB0aGlzLCBzZHApKVxuICAgIC8vIG1lc3NhZ2Ugb24gc29ja2V0IHJlc3BvbnNlIC0+IG9uQWRkSWNlQ2FuZGlkYXRlXG4gICAgLy8gbWVzc2FnZSBvbiBwZWVyIHJlc3BvbnNlIC0+IG9uYWRkc3RyZWFtXG4gICAgdGhpcy5fc29ja2V0SGVscGVyLnBvc3Qoe1xuICAgICAgaGFuZGxlQW5zd2VyOiBzdHJlYW1OYW1lLFxuICAgICAgcmVxdWVzdElkOiBzdWJzY3JpcHRpb25JZCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc2RwOiBzZHBcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgY2FuZGlkYXRlIHRvIHRoZSBzZXJ2ZXIgb3ZlciBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYW5kaWRhdGVcbiAgICogICAgICAgIFRoZSBwZWVyIGNhbmRpZGF0ZSBkZXNjcmlwdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZW5kQ2FuZGlkYXRlIChjYW5kaWRhdGUpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3NlbmRjYW5kaWRhdGVdJylcbiAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChSVENTdWJzY3JpYmVyRXZlbnRUeXBlcy5DQU5ESURBVEVfU1RBUlQsIHRoaXMsIGNhbmRpZGF0ZSkpXG4gICAgLy8gbWVzc2FnZSBvbiBwZWVyIHJlc3BvbnNlIC0+IG9uaWNlY2FuZGlkYXRlXG4gICAgdGhpcy5fc29ja2V0SGVscGVyLnBvc3Qoe1xuICAgICAgaGFuZGxlQ2FuZGlkYXRlOiB0aGlzLl9vcHRpb25zLnN0cmVhbU5hbWUsXG4gICAgICByZXF1ZXN0SWQ6IHRoaXMuX29wdGlvbnMuc3Vic2NyaXB0aW9uSWQsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGNhbmRpZGF0ZTogY2FuZGlkYXRlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR1cCBhbmQgY29ubmVjdCB0byBiZWdpbiBhIHN1YnNjcmlwdGlvbi5cbiAgICogVGhpcyBpcyBpbnZva2VkIG9uY2UgdGhlIGF2YWlsYWJpbGl0eSBvZiB0aGUgc3RyZWFtIGlzIHJlY29nbml6ZWQgb24gdGhlIHNlcnZlciBhbmQgbm90aWZpZWQgb24gdGhpcyBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtSVENDb25maWd1cmF0aW9ufSBydGNDb25maWd1cmF0aW9uXG4gICAqICAgICAgICBBIGN1c3RvbSBSVENDb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSB7QXJyYXl9IGljZVNlcnZlcnNcbiAgICogICAgICAgIFRoZSBJQ0Ugc2VydmVyIGxpc3QgdG8gdXNlIGluIHRyaWNrbGUuXG4gICAqIEBub3RlIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBrZWVwaW5nIGFyZ3VtZW50cyBhcyBvcHRpb25hbCwgd2l0aCBhdCBsZWFzdCBvbmUgYmVpbmcgZnVsZmlsbGVkLiBUaGUgYGNvbmZpZ3VyYXRpb25gIHBhcmFtIHdpbGwgYmUgZmF2b3JlZCBhZnRlciA1LjQuMCwgYGljZVNlcnZlcnNgIGlzIHVwIGZvciBkZXByZWNhdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jb25uZWN0IChjb25maWd1cmF0aW9uLCBpY2VTZXJ2ZXJzID0gdW5kZWZpbmVkKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tjb25uZWN0XScpXG4gICAgaWYgKGljZVNlcnZlcnMgJiYgY29uZmlndXJhdGlvbikge1xuICAgICAgd2FybignVGhlIGljZVNlcnZlcnMgY29uZmlndXJhdGlvbiBwcm9wZXJ0eSBpcyBjb25zaWRlcmVkIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdGhlIHJ0Y0NvbmZpZ3VyYXRpb24gY29uZmlndXJhdGlvbiBwcm9wZXJ0eSB1cG9uIHdoaWNoIHlvdSBjYW4gYXNzaWduIGljZVNlcnZlcnMuIFJlZmVyZW5jZTogaHR0cHM6Ly93d3cucmVkNXByby5jb20vZG9jcy9zdHJlYW1pbmcvbWlncmF0aW9uZ3VpZGUuaHRtbCcpO1xuXG4gICAgICBjb25maWd1cmF0aW9uLmljZVNlcnZlcnMgPSBpY2VTZXJ2ZXJzXG4gICAgfVxuICAgIHRoaXMuX29wdGlvbnMuaWNlU2VydmVycyA9IGNvbmZpZ3VyYXRpb24gPyBjb25maWd1cmF0aW9uLmljZVNlcnZlcnMgOiBpY2VTZXJ2ZXJzXG4gICAgbGV0IHBcbiAgICBpZiAoY29uZmlndXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwID0gdGhpcy5fcGVlckhlbHBlci5zZXRVcFdpdGhQZWVyQ29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uLCB1bmRlZmluZWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHAgPSB0aGlzLl9wZWVySGVscGVyLnNldFVwKHRoaXMuX29wdGlvbnMuaWNlU2VydmVycywgdW5kZWZpbmVkLCB0aGlzLl9vcHRpb25zLnJ0Y3BNdXhQb2xpY3kpXG4gICAgfVxuICAgIHAudGhlbihjb25uZWN0aW9uID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFJUQ1N1YnNjcmliZXJFdmVudFR5cGVzLlBFRVJfQ09OTkVDVElPTl9BVkFJTEFCTEUsIHRoaXMsIGNvbm5lY3Rpb24pKVxuICAgICAgdGhpcy5fcmVxdWVzdE9mZmVyKHRoaXMuX29wdGlvbnMuc3RyZWFtTmFtZSwgdGhpcy5fb3B0aW9ucy5zdWJzY3JpcHRpb25JZCwgdGhpcy5fb3B0aW9ucy5pY2VUcmFuc3BvcnQsIHRoaXMuX29wdGlvbnMudmlkZW9FbmNvZGluZywgdGhpcy5fb3B0aW9ucy5hdWRpb0VuY29kaW5nKVxuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIHdhcm4oTkFNRSwgJ0NvdWxkIG5vdCBlc3RhYmxpc2ggUlRDUGVlckNvbm5lY3Rpb24uJylcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLkNPTk5FQ1RfRkFJTFVSRSwgdGhpcykpXG4gICAgfSlcbiAgICAvLyAgVE9ETzogTm9ybWFsaXplIHJldHVybnMgdG8gZWl0aGVyIGFsbCBiZSBjaGFpbmFibGUgb3Igbm90IGJlIGNoYWluYWJsZVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdCBhbmQgdGVhcmRvd24gYWZ0ZXIgY2xvc2Ugb2Ygc3Vic2NyaXB0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rpc2Nvbm5lY3QgKCkge1xuICAgIGlmICh0aGlzLl9zb2NrZXRIZWxwZXIpIHtcbiAgICAgIGRlYnVnKE5BTUUsICdbZGlzY29ubmVjdDpzb2NrZXRdJylcbiAgICAgIHRoaXMuX3NvY2tldEhlbHBlci50ZWFyRG93bigpXG4gICAgfVxuICAgIGlmICh0aGlzLl9wZWVySGVscGVyKSB7XG4gICAgICBkZWJ1ZyhOQU1FLCAnW2Rpc2Nvbm5lY3Q6cGVlcl0nKVxuICAgICAgdGhpcy5fcGVlckhlbHBlci50ZWFyRG93bigpXG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VIYW5kbGVyKSB7XG4gICAgICBkZWJ1ZyhOQU1FLCAnW2Rpc2Nvbm5lY3Q6c291cmNlXScpXG4gICAgICB0aGlzLl9zb3VyY2VIYW5kbGVyLmRpc2Nvbm5lY3QoKVxuICAgIH1cbiAgICB0aGlzLl9jb25uZWN0aW9uQ2xvc2VkID0gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8ga2ljayBvZmYgYXV0b3BsYXkgaWYgc2V0dGluZyBpcyBmbGFnZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIG9iamVjdC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSB2aWV3XG4gICAqICAgICAgICBUaGUgdGFyZ2V0IGVsZW1lbnQgdmlldyB0aGF0IHdpbGwgcGxheWJhY2sgdGhlIHN0cmVhbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wbGF5SWZBdXRvcGxheVNldCAob3B0aW9ucywgdmlldykge1xuICAgIGlmIChvcHRpb25zICYmIHZpZXcpIHtcbiAgICAgIG9wdGlvbnMuYXV0b3BsYXkgPSBlbnZpcm9ubWVudC5oYXNBdHRyaWJ1dGVEZWZpbmVkKHZpZXcudmlldywgJ2F1dG9wbGF5JylcbiAgICAgIGlmIChvcHRpb25zLmF1dG9wbGF5KSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIuYXR0ZW1wdEF1dG9wbGF5KG9wdGlvbnMubXV0ZU9uQXV0b3BsYXlSZXN0cmljdGlvbilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBiZWdpbiBzdWJzY3JpcHRpb24gb24gc2VydmVyIG92ZXIgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlbmRTdWJzY3JpYmUgKCkge1xuICAgIGRlYnVnKE5BTUUsICdbc2VuZHN1YnNjcmliZV0nKVxuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIHN1YnNjcmliZTogdGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lLFxuICAgICAgcmVxdWVzdElkOiB0aGlzLl9vcHRpb25zLnN1YnNjcmlwdGlvbklkXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGluaXRpYWxpemUgdGhlIFdlYlJUQy1iYXNlZCBTdWJzY3JpYmVyIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb24uXG4gICAqIFRoZSByZXR1cm5lZCBgUHJvbWlzZWAgd2lsbCBlaXRoZXIgcmVzb2x2ZSB3aXRoIGEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2Ugb3IgcmVqZWN0IHdpdGggYW4gZXJyb3IgYFN0cmluZ2AgaW4gZmFpbHVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIG1hcC5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGluaXQgKG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIGlmICghd2VicnRjLmlzU3VwcG9ydGVkKCkgfHwgIXdlYnNvY2tldC5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoJ0Nhbm5vdCBjcmVhdGUgV2ViUlRDIHBsYXliYWNrIGluc3RhbmNlLiBZb3VyIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgV2ViUlRDIGFuZC9vciBXZWJTb2NrZXRzLicpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fZGlzY29ubmVjdCgpXG4gICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICB0aGlzLl9vcHRpb25zLnN1YnNjcmlwdGlvbklkID0gdGhpcy5fb3B0aW9ucy5zdWJzY3JpcHRpb25JZCB8fCBnZW5lcmF0ZVN1YnNjcmlwdGlvbklkKClcblxuICAgICAgdGhpcy5fcGVlckhlbHBlciA9IG5ldyBTdWJzY3JpcHRpb25QZWVySGVscGVyKHRoaXMpXG4gICAgICB0aGlzLl9zb2NrZXRIZWxwZXIgPSBuZXcgU3Vic2NyaXB0aW9uU29ja2V0SGVscGVyKHRoaXMpXG4gICAgICBjb25zdCBzb2NrZXRQcm9taXNlID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgICBjb25zdCBzb2NrZXR1cmwgPSBlbmRwb2ludEZyb21PcHRpb25zKHRoaXMuX29wdGlvbnMsIHtcbiAgICAgICAgaWQ6IHRoaXMuX29wdGlvbnMuc3Vic2NyaXB0aW9uSWRcbiAgICAgIH0pXG5cbiAgICAgIHNvY2tldFByb21pc2UucHJvbWlzZVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0aGlzKVxuICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb25DbG9zZWQgPSBmYWxzZVxuICAgICAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLkNPTk5FQ1RfU1VDQ0VTUywgdGhpcykpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKVxuICAgICAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLkNPTk5FQ1RfRkFJTFVSRSwgdGhpcywgZXJyb3IpKVxuICAgICAgICB9KVxuXG4gICAgICB0aGlzLl9zb2NrZXRIZWxwZXIuc2V0VXAoc29ja2V0dXJsLCBzb2NrZXRQcm9taXNlKVxuXG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogU3RpbGwgaW4gdXNlIGZvciBhc3NpZ25pbmcgZG9jdW1lbnQgZWxlbWVudCB2aWV3IG1hbmFnZW1lbnQgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICogQVBJIGRlcHJlY2F0ZWQgaW4gNC4wLjAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZXRWaWV3ICh2aWV3KSB7XG4gICAgdGhpcy5fdmlldyA9IHZpZXdcbiAgICB0aGlzLl92aWV3UmVzb2x2ZXIucmVzb2x2ZSh0aGlzLl92aWV3KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBiZWdpbiBzdWJzY3JpYmluZyB0byBhIHN0cmVhbS5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogICAgICAgICAgVGhlIHJldHVybmVkIGBQcm9taXNlYCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3NmdWwgc3RhcnQgb2YgcGxheWJhY2suXG4gICAqICAgICAgICBUaGVyZSBhcmUgc2V2ZXJhbCBwcm9jZXNzZXMgdGhhdCBvY2N1ciBpbiBvcmRlciB0byBlc3RhYmxpc2ggYSBXZWJSVEMgc3Vic2NyaXB0aW9uIHRoYXQgaW52b2x2ZSAtIGJ1dCBhcmUgbm90IGxpbWl0ZWQgdG8gLSBJQ0UgY29tbXVuaWNhdGlvbiBhbmQgYXNzaWduaW5nIG9mIGxvY2FsIGFuZCByZW1vdGUgU0RQcyBvbiBwZWVyIGNvbm5lY3Rpb25zLlxuICAgKi9cbiAgc3Vic2NyaWJlICgpIHtcbiAgICB0aGlzLl9nZXRWaWV3UmVzb2x2ZXJQcm9taXNlKClcbiAgICAgIC50aGVuKHZpZXcgPT4ge1xuICAgICAgICB0aGlzLl9zb3VyY2VIYW5kbGVyID0gbmV3IFJUQ1NvdXJjZUhhbmRsZXIodmlldy52aWV3LCB0aGlzLmdldFR5cGUoKSlcbiAgICAgICAgdGhpcy5fZ2xvbVNvdXJjZUhhbmRsZXJBUEkodGhpcy5fc291cmNlSGFuZGxlcilcbiAgICAgICAgdGhpcy5faW5pdEhhbmRsZXIodGhpcy5fb3B0aW9ucywgdGhpcy5fc291cmNlSGFuZGxlcilcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAvLyBwYXNzZWQgdXAgdGhyb3VnaCBvdmVyYXJjaGluZyBwcm9taXNlLlxuICAgICAgfSlcbiAgICB0aGlzLl9nZXRBdmFpbGFiaWxpdHlSZXNvbHZlclByb21pc2UoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLl9jb25uZWN0KHRoaXMuX29wdGlvbnMucnRjQ29uZmlndXJhdGlvbiwgdGhpcy5fb3B0aW9ucy5pY2VTZXJ2ZXJzKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIC8vIHBhc3NlZCB1cCB0aHJvdWdoIG92ZXJhcmNoaW5nIHByb21pc2UuXG4gICAgICB9KVxuICAgIHRoaXMuX3NldFZpZXdJZk5vdEV4aXN0KHRoaXMuX3ZpZXcsIHRoaXMuX29wdGlvbnMubWVkaWFFbGVtZW50SWQpXG4gICAgdGhpcy5fcmVxdWVzdEF2YWlsYWJpbGl0eSh0aGlzLl9vcHRpb25zLnN0cmVhbU5hbWUsIHRoaXMuX29wdGlvbnMuc3RyZWFtVHlwZSlcbiAgICByZXR1cm4gdGhpcy5fZ2V0U3Vic2NyaXB0aW9uUmVzb2x2ZXJQcm9taXNlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHN0b3AgYSBzdWJzY3JpcHRpb24uXG4gICAqIFRoZSByZXR1cm5lZCBgUHJvbWlzZWAgd2lsbCBlaXRoZXIgcmVzb2x2ZSBvciByZWplY3Qgb24gc3VjY2Vzc2Z1bCBzdG9wIG9mIHN1YnNjcmlwdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIHVuc3Vic2NyaWJlICgpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3Vuc3Vic2NyaWJlXScpXG4gICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICB0aGlzLnN0b3AoKVxuICAgIHRoaXMuX2Rpc2Nvbm5lY3QoKVxuICAgIHRoaXMuX21lZGlhU3RyZWFtID0gdW5kZWZpbmVkXG4gICAgZGVmZXJyZWQucmVzb2x2ZSh0aGlzKVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9TVE9QLCB0aGlzKSlcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIHN0cmVhbSBiZWluZyBhdmFpbGFibGUgb24gc2VydmVyLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25TdHJlYW1BdmFpbGFibGUgKHJlY2VpcHQpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW29uc3RyZWFtYXZhaWxhYmxlXTogJyArIEpTT04uc3RyaW5naWZ5KHJlY2VpcHQsIG51bGwsIDIpKVxuICAgIHRoaXMuX2F2YWlsYWJpbGl0eVJlc29sdmVyLnJlc29sdmUodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBzdHJlYW0gYmVpbmcgdW5hdmFpbGFibGUgb24gc2VydmVyLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25TdHJlYW1VbmF2YWlsYWJsZSAocmVjZWlwdCkge1xuICAgIGRlYnVnKE5BTUUsIGBTdHJlYW0gJHt0aGlzLl9vcHRpb25zLnN0cmVhbU5hbWV9IGRvZXMgbm90IGV4aXN0LmApXG4gICAgZGVidWcoTkFNRSwgJ1tvbnN0cmVhbXVuYXZhaWxhYmxlXTogJyArIEpTT04uc3RyaW5naWZ5KHJlY2VpcHQsIG51bGwsIDIpKVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9JTlZBTElEX05BTUUsIHRoaXMpKVxuICAgIHRoaXMuX2F2YWlsYWJpbGl0eVJlc29sdmVyLnJlamVjdChgU3RyZWFtICR7dGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lfSBkb2VzIG5vdCBleGlzdC5gKVxuICAgIHRoaXMuX3N1YnNjcmlwdGlvblJlc29sdmVyLnJlamVjdChgU3RyZWFtICR7dGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lfSBkb2VzIG5vdCBleGlzdC5gKVxuICAgIGlmICghdGhpcy5fb3B0aW9ucy5tYWludGFpbkNvbm5lY3Rpb25PblN1YnNjcmliZUVycm9ycykge1xuICAgICAgdGhpcy5fZGlzY29ubmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IHByb21pc2UgZm9yIHBvc3NpYmxlIHJldHJ5LlxuICAgICAgdGhpcy5fYXZhaWxhYmlsaXR5UmVzb2x2ZXIgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvblJlc29sdmVyID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIHN1Y2Nlc3Mgb2YgU0RQIGJlaW5nIGFkZGVkIHJlbW90ZWx5IGFuZCBsb2NhbGx5IHRocm91Z2ggdGhlIFBlZXIgQ29ubmVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlY2VpcHRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uU0RQU3VjY2VzcyAocmVjZWlwdCkge1xuICAgIGRlYnVnKE5BTUUsICdbb25zZHBzdWNjZXNzXTogJyArIEpTT04uc3RyaW5naWZ5KHJlY2VpcHQsIG51bGwsIDIpKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIHN1Y2Nlc3MgaW4gU0RQIG9mZmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVjZWlwdFxuICAgKiAgICAgICAgVGhlIG9wdGlvbmFsIHN1Y2Nlc3NmdWwgb2JqZWN0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25TRFBPZmZlciAocmVjZWlwdCkge1xuICAgIGRlYnVnKE5BTUUsICdbb25zZHBvZmZlcl06ICcgKyBKU09OLnN0cmluZ2lmeShyZWNlaXB0LCBudWxsLCAyKSlcbiAgICBjb25zdCBzZHAgPSBuZXcgd2VicnRjLlJUQ1Nlc3Npb25EZXNjcmlwdGlvbihyZWNlaXB0LnNkcClcbiAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChSVENTdWJzY3JpYmVyRXZlbnRUeXBlcy5PRkZFUl9FTkQsIHRoaXMpKVxuICAgIHRoaXMuX3JlcXVlc3RBbnN3ZXIoc2RwKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGFsbCBlcnJvcnMgcmVsYXRlZCB0byBTRFAgdGhyb3VnaCB0aGUgUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVjZWlwdFxuICAgKiAgICAgICAgVGhlIG9wdGlvbmFsIGVycm9yIG9iamVjdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uU0RQRXJyb3IgKHJlY2VpcHQpIHtcbiAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5TVUJTQ1JJQkVfRkFJTCwgdGhpcywgcmVjZWlwdCkpXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uUmVzb2x2ZXIucmVqZWN0KCdJbnZhbGlkIFNEUC4nKVxuICAgIGVycm9yKE5BTUUsICdbb25zZHBlcnJvcl0nKVxuICAgIGVycm9yKE5BTUUsIHJlY2VpcHQpXG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgcmVjZWlwdCBvZiBhIGBNZWRpYVN0cmVhbWAuXG4gICAqXG4gICAqIEBwYXJhbSB7TWVkaWFTdHJlYW19IHN0cmVhbVxuICAgKiAgICAgICAgVGhlIHN0cmVhbSByZXR1cm5lZCBvbiB0aGUgUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25BbnN3ZXJNZWRpYVN0cmVhbSAoc3RyZWFtID0gdW5kZWZpbmVkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChSVENTdWJzY3JpYmVyRXZlbnRUeXBlcy5BTlNXRVJfRU5ELCB0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIG9uIHJlY2VpcHQgb2YgSUNFIGNhbmRpZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhbmRpZGF0ZVxuICAgKiAgICAgICAgVGhlIElDRSBjYW5kaWRhdGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkljZUNhbmRpZGF0ZSAoY2FuZGlkYXRlKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tvbmljZWNhbmRpZGF0ZV0nKVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFJUQ1N1YnNjcmliZXJFdmVudFR5cGVzLkNBTkRJREFURV9FTkQsIHRoaXMpKVxuICAgIHRoaXMuX3NlbmRDYW5kaWRhdGUoY2FuZGlkYXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGVuZCBvZiBJQ0UgY29tbXVuaWNhdGlvbiAodHJpY2tsZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7TWVkaWFTdHJlYW19IHN0cmVhbVxuICAgKiAgICAgICAgVGhlIGBNZWRpYVN0cmVhbWAgdGhhdCBoYXMgYmVjb21lIGF2YWlsYWJsZSBwb3N0LXRyaWNrbGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkljZUNhbmRpZGF0ZVRyaWNrbGVFbmQgKHN0cmVhbSkge1xuICAgIGRlYnVnKE5BTUUsICdbb25pY2V0cmlja2xlZW5kXScpXG4gICAgdGhpcy5fZ2V0Vmlld1Jlc29sdmVyUHJvbWlzZSgpXG4gICAgICAudGhlbih2aWV3ID0+IHtcbiAgICAgICAgdmlldy5hdHRhY2hTdHJlYW0oc3RyZWFtKVxuICAgICAgICB0aGlzLl9tZWRpYVN0cmVhbSA9IHN0cmVhbVxuICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChSVENTdWJzY3JpYmVyRXZlbnRUeXBlcy5PTl9BRERfU1RSRUFNLCB0aGlzLCB0aGlzLl9tZWRpYVN0cmVhbSkpXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgdG8gYWRkIElDRSBjYW5kaWRhdGUgdG8gUGVlciBDb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FuZGlkYXRlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkFkZEljZUNhbmRpZGF0ZSAoY2FuZGlkYXRlKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tvbmFkZGljZWNhbmRpZGF0ZV0nKVxuICAgIHRoaXMuX3BlZXJIZWxwZXIuYWRkSWNlQ2FuZGlkYXRlKGNhbmRpZGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciByZWNlaXB0IG9mIGVtcHR5IGNhbmRpZGF0ZSBkdXJpbmcgSUNFIG5lZ290aWF0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25FbXB0eUNhbmRpZGF0ZSAoKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tpY2VjYW5kaWRhdGV0cmlja2xlOmVtcHR5XScpXG4gICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoUlRDU3Vic2NyaWJlckV2ZW50VHlwZXMuUEVFUl9DQU5ESURBVEVfRU5EKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBjb21wbGV0aW9uIG9mIHBlZXIgaWNlIGNhbmRpZGF0ZSBnYXRoZXJpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblBlZXJHYXRoZXJpbmdDb21wbGV0ZSAoKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tpY2VjYW5kaWRhdGVnYXRoZXJpbmc6ZW5kXScpXG4gICAgaWYgKHRoaXMuX3NvY2tldEhlbHBlcikge1xuICAgICAgdGhpcy5fc29ja2V0SGVscGVyLnBvc3RFbmRPZkNhbmRpZGF0ZXModGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBub3RpZmljYXRpb24gb2YgZW5kIGluIGljZSBjYW5kaWRhdGVzIG92ZXIgdGhlIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uU29ja2V0SWNlQ2FuZGlkYXRlRW5kICgpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW29uc29ja2V0aWNlY2FuZGlkYXRlZW5kXScpXG4gICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoUlRDU3Vic2NyaWJlckV2ZW50VHlwZXMuSUNFX1RSSUNLTEVfQ09NUExFVEUsIHRoaXMpKVxuICAgIHRoaXMuX3NlbmRTdWJzY3JpYmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYWwgZXZlbnQgaGFuZGxlciBmb3IgZXJyb3JzIGNvbWluZyBvdmVyIHRoZSBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWxcbiAgICogICAgICAgIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGV0YWlsLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Tb2NrZXRNZXNzYWdlRXJyb3IgKG1lc3NhZ2UsIGRldGFpbCA9IHVuZGVmaW5lZCkge1xuICAgIGVycm9yKE5BTUUsIGBFcnJvciBpbiBzdHJlYW0gc3Vic2NyaXB0aW9uOiAke21lc3NhZ2V9LlxcbltPcHRpb25hbCBkZXRhaWxdOiAke2RldGFpbH1gKVxuICAgIHRoaXMuX3N1YnNjcmlwdGlvblJlc29sdmVyLnJlamVjdChgRXJyb3IgaW4gc3RyZWFtIHN1YnNjcmlwdGlvbjogJHttZXNzYWdlfS5gKVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9GQUlMLCB0aGlzLCBtZXNzYWdlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBjbG9zZSBvbiB0aGUgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBjbG9zZUV2ZW50XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblNvY2tldENsb3NlIChjbG9zZUV2ZW50KSB7XG4gICAgZGVidWcoTkFNRSwgJ1tvbnNvY2tldGNsb3NlXScpXG4gICAgaWYgKHRoaXMuX3BlZXJIZWxwZXIpIHtcbiAgICAgIHRoaXMuX3BlZXJIZWxwZXIudGVhckRvd24oKVxuICAgIH1cbiAgICB0aGlzLm9uQ29ubmVjdGlvbkNsb3NlZChjbG9zZUV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGNsb3NlIG9mIFBlZXIgQ29ubmVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uUGVlckNvbm5lY3Rpb25DbG9zZSAoZXZlbnQpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW29ucGVlcmNvbm5lY3Rpb25jbG9zZV0nKVxuICAgIGlmICh0aGlzLl9zb2NrZXRIZWxwZXIpIHtcbiAgICAgIHRoaXMuX3NvY2tldEhlbHBlci50ZWFyRG93bigpXG4gICAgfVxuICAgIHRoaXMub25Tb2NrZXRDbG9zZShldmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBgVW5wdWJsaXNoYCBvZiBzdHJlYW0gc3Vic2NyaWJlZCB0by4gT2NjdXJzIHdoZW4gYSBicm9hZGNhc3RlciBzdG9wcyB0aGVpciBzdHJlYW0gd2hpbGUgdGhpcyBzdWJzY3JpcHRpb24gc3RyZWFtIGlzIG9wZW4uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblVucHVibGlzaCAoKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tvbnVucHVibGlzaF0nKVxuICAgIGlmICh0aGlzLl9zb3VyY2VIYW5kbGVyKSB7XG4gICAgICB0aGlzLl9zb3VyY2VIYW5kbGVyLnVucHVibGlzaCgpXG4gICAgfVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlfVU5QVUJMSVNILCB0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBjb25uZWN0aW9uIG9uIHN0cmVhbSBiZWluZyBjbG9zZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkNvbm5lY3Rpb25DbG9zZWQgKGV2ZW50ID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCF0aGlzLl9jb25uZWN0aW9uQ2xvc2VkKSB7XG4gICAgICBkZWJ1ZyhOQU1FLCAnW29uY29ubmVjdGlvbmNsb3NlZF0nKVxuICAgICAgdGhpcy5fZGlzY29ubmVjdCgpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5DT05ORUNUSU9OX0NMT1NFRCwgdGhpcywgZXZlbnQpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBhY2NlcHRpbmcgZGF0YSB0aHJvdWdoIHRoZSBgc2VuZGAgQVBJIG9mIGEgUHVibGlzaGVyLiBUaGlzIGlzIHRoZSByZWNlaXZpbmcgZW5kIG9mIHRoZSBjb21tdW5pY2F0aW9uIGNoYW5uZWwgaW4gd2hpY2ggYSBQdWJsaXNoZXIgY2FuIHNlbmQgZGF0YSB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2ROYW1lXG4gICAqICAgICAgICBUaGUgdGFyZ2V0IG1ldGhvZCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgY29tbXVuaWNhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogICAgICAgIFRoZSBkYXRhIGJlaW5nIHNlbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvblNlbmRSZWNlaXZlZCAobWV0aG9kTmFtZSwgZGF0YSkge1xuICAgIGlmIChtZXRob2ROYW1lID09PSAnb25NZXRhRGF0YScpIHtcbiAgICAgIHRoaXMub25NZXRhRGF0YShkYXRhKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGVudmlyb25tZW50Lmludm9rZShtZXRob2ROYW1lLCBkYXRhKVxuICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuU1VCU0NSSUJFX1NFTkRfSU5WT0tFLCB0aGlzLCB7XG4gICAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBzdGF0dXMgbm90aWZpY2F0aW9ucyBvZiB0aGUgc3Vic2NyaXB0aW9uIHN0cmVhbSBjb21pbmcgb3ZlciB0aGUgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdHVzXG4gICAqICAgICAgICBUaGUgc3RhdHVzIG9iamVjdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uU3Vic2NyaWJlclN0YXR1cyAoc3RhdHVzKSB7XG4gICAgZGVidWcoTkFNRSwgJ1tzdWJzY3JpYmVyc3RhdHVzXSAtICcgKyBKU09OLnN0cmluZ2lmeShzdGF0dXMsIG51bGwsIDIpKVxuICAgIGNvbnN0IHN0YXJ0UmVzdWx0ID0gc3ViU3RhcnRSZWdleC5leGVjKHN0YXR1cy5tZXNzYWdlKVxuICAgIGlmIChzdGFydFJlc3VsdCAmJiBzdGFydFJlc3VsdFsxXSA9PT0gdGhpcy5fb3B0aW9ucy5zdHJlYW1OYW1lKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25SZXNvbHZlci5yZXNvbHZlKHRoaXMpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5TVUJTQ1JJQkVfU1RBUlQsIHRoaXMpKVxuICAgICAgdGhpcy5fcGxheUlmQXV0b3BsYXlTZXQodGhpcy5fb3B0aW9ucywgdGhpcy5fdmlldylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgbWV0YWRhdGEgYmVpbmcgc2VudCByZWxhdGVkIHRvIHRoZSBzdWJzY3JpcHRpb24gc3RyZWFtIGNvbWluZyBvdmVyIHRoZSBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRhZGF0YVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25NZXRhRGF0YSAobWV0YWRhdGEpIHtcbiAgICBpZiAodHlwZW9mIG1ldGFkYXRhLm9yaWVudGF0aW9uICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAmJiBtZXRhZGF0YS5vcmllbnRhdGlvbiAhPT0gdGhpcy5fb3JpZW50YXRpb24pIHtcbiAgICAgIHRoaXMuX29yaWVudGF0aW9uID0gbWV0YWRhdGEub3JpZW50YXRpb25cbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF1dG9MYXlvdXRPcmllbnRhdGlvbikge1xuICAgICAgICBhcHBseU9yaWVudGF0aW9uKHRoaXMuX3ZpZXcudmlldywgcGFyc2VJbnQobWV0YWRhdGEub3JpZW50YXRpb24sIDEwKSwgbWV0YWRhdGFSZXNvbHV0aW9uVG9PYmplY3QobWV0YWRhdGEucmVzb2x1dGlvbikpXG4gICAgICAgIGlmICh0aGlzLl9zb3VyY2VIYW5kbGVyKSB7XG4gICAgICAgICAgdGhpcy5fc291cmNlSGFuZGxlci5oYW5kbGVPcmllbnRhdGlvbkNoYW5nZShwYXJzZUludChtZXRhZGF0YS5vcmllbnRhdGlvbikpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLk9SSUVOVEFUSU9OX0NIQU5HRSwgdGhpcywge1xuICAgICAgICBvcmllbnRhdGlvbjogcGFyc2VJbnQobWV0YWRhdGEub3JpZW50YXRpb24pLFxuICAgICAgICB2aWV3RWxlbWVudDogdGhpcy5fdmlldy52aWV3XG4gICAgICB9KSlcbiAgICB9XG4gICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuU1VCU0NSSUJFX01FVEFEQVRBLCB0aGlzLCBtZXRhZGF0YSkpXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBpbnZva2UgYSBtZXRob2Qgb24gdGhlIEFwcGxpY2F0aW9uIEFkYXB0ZXIgcmVsYXRlZCB0byB0aGUgYGFwcGAgY29uZmlnIHNldHRpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2ROYW1lXG4gICAqICAgICAgICBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvbiB0aHcgQXBwbGljYXRpb24gQWRhcHRlclxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gICAqICAgICAgICBUaGUgb3JkZXJlZCBsaXN0IG9mIGFyZ3VtZW50cyB0byBpbnZva2Ugb24gdGhlIG1ldGhvZC4gRG8gbm90IHByb3ZpZGUgYW55dGhpbmcgaWYgdGhlIG1ldGhvZCB0YWtlcyBubyBhcmd1bWVudHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBjYWxsU2VydmVyIChtZXRob2ROYW1lLCBhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0QXN5bmMoe1xuICAgICAgY2FsbEFkYXB0ZXI6IHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2ROYW1lLFxuICAgICAgICBhcmd1bWVudHM6IGFyZ3NcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEVudGVycyBzdWJzY3JpYmVyIGludG8gc3RhbmRieSBtb2RlIC0ga2VlcGluZyBjb25uZWN0aW9uIG9wZW4gYnV0IG5vdCBib3RoZXJpbmcgdG8gY29uc3VtZSB2aWRlbyBvciBhdWRpby5cbiAgICovXG4gIGVuYWJsZVN0YW5kYnkgKCkge1xuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIHN0YW5kYnk6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgc3Vic2NyaWJlciBmcm9tIHN0YW5kYnkgbW9kZSAtIHR1cm5pbmcgdGhlIGF1ZGlvIGFuZCB2aWRlbyBiYWNrIG9uIGFuZCBjb25zdW1hYmxlIGFmdGVyIGEgbXV0ZSByZXF1ZXN0LlxuICAgKi9cbiAgZGlzYWJsZVN0YW5kYnkgKCkge1xuICAgIHRoaXMuX3NvY2tldEhlbHBlci5wb3N0KHtcbiAgICAgIHN0YW5kYnk6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFdlYlNvY2tldCBjb25uZWN0aW9uIGhlbHBlciBpZiBlc3RhYmxpc2hlZC5cbiAgICogVXNlZCBpbiBTaGFyZWRPYmplY3QgY29tbXVuaWNhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7UHVibGlzaGVyU29ja2V0SGVscGVyfVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0Q29ubmVjdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldEhlbHBlclxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgUlRDUGVlckNvbm5lY3Rpb24gaGVscGVyIGlmIGVzdGFibGlzaGVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSVENQZWVyQ29ubmVjdGlvbn1cbiAgICovXG4gICBnZXRQZWVyQ29ubmVjdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BlZXJIZWxwZXIgPyB0aGlzLl9wZWVySGVscGVyLmNvbm5lY3Rpb24gOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBgTWVkaWFTdHJlYW1gIGluc3RhbmNlIGlmIGdlbmVyYXRlZCB0aHJvdWdoIGBnZXRVc2VyTWVkaWFgIGFuZCBleGlzdHMgZm9yIGJyb2FkY2FzdC5cbiAgICpcbiAgICogQHJldHVybiB7TWVkaWFTdHJlYW19XG4gICAqL1xuICBnZXRNZWRpYVN0cmVhbSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lZGlhU3RyZWFtXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyByZWZlcmVuY2UgdG8gcGxheWJhY2sgY29udHJvbHMgaWYgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQbGF5YmFja0NvbnRyb2xzfVxuICAgKi9cbiAgZ2V0Q29udHJvbHMgKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VIYW5kbGVyID8gdGhpcy5fc291cmNlSGFuZGxlci5nZXRDb250cm9scygpIDogdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGFyZ2V0IHZpZXcgRWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIGdldFBsYXllciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXcudmlld1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gdXNlZCBpbiBgaW5pdCgpYC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0eXBlIG9mIGltcGxlbWVudGF0aW9uOiBgUlRDYC5cbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgZ2V0VHlwZSAoKSB7XG4gICAgcmV0dXJuIFBsYXliYWNrVHlwZXMuUlRDLnRvVXBwZXJDYXNlKClcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJUQ1N1YnNjcmliZXJcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N1YnNjcmliZXIvcmVkNXByby1ydGMuanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4uL2Vudi9icm93c2VyJ1xuaW1wb3J0IFJUTVBTb3VyY2VIYW5kbGVyIGZyb20gJy4vcmVkNXByby1zb3VyY2UtaGFuZGxlci1ydG1wJ1xuaW1wb3J0IFBsYXliYWNrVmlldyBmcm9tICcuLi92aWV3L3BsYXliYWNrJ1xuaW1wb3J0IHsgUGxheWJhY2tDb250cm9sbGVyIH0gZnJvbSAnLi9jb250cm9scydcbmltcG9ydCB7IFN1YnNjcmliZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50J1xuaW1wb3J0IHsgUGxheWJhY2tUeXBlcyB9IGZyb20gJy4uL2VudW0vcGxheWJhY2snXG5pbXBvcnQge1xuICBTdWJzY3JpYmVyRXZlbnRUeXBlcyxcbiAgUlRNUFN1YnNjcmliZXJFdmVudFR5cGVzXG59IGZyb20gJy4uL2V2ZW50J1xuaW1wb3J0IHsgUGxheWJhY2tTdGF0ZVJlYWRhYmxlIH0gZnJvbSAnLi9jb250cm9scy9zdGF0ZSdcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSwgRnV0dXJlIH0gZnJvbSAnLi4vdXRpbC9wcm9taXNlJ1xuaW1wb3J0IHsgZGVidWcsIHdhcm4sIGVycm9yIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBOQU1FID0gJ1JUTVBTdWJjcmliZXInXG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBwcm90b2NvbDogJ3J0bXAnLFxuICBwb3J0OiAxOTM1LFxuICB3aWR0aDogMzIwLCAvLyBtZWRpYSBwbGF5YmFja1xuICBoZWlnaHQ6IDI0MCwgLy8gbWVkaWEgcGxheWJhY2tcbiAgZW1iZWRXaWR0aDogJzEwMCUnLCAvLyBET00gZGlzcGxheSBzdHlsZVxuICBlbWJlZEhlaWdodDogJzEwMCUnLCAvLyBET00gZGlzcGxheSBzdHlsZVxuICBtaW5GbGFzaFZlcnNpb246ICcxMC4wLjAnLFxuICBzd2Y6ICdsaWIvcmVkNXByby9yZWQ1cHJvLXN1YnNjcmliZXIuc3dmJyxcbiAgc3dmb2JqZWN0VVJMOiAnbGliL3N3Zm9iamVjdC9zd2ZvYmplY3QuanMnLFxuICBwcm9kdWN0SW5zdGFsbFVybDogJ2xpYi9zd2ZvYmplY3QvcGxheWVyUHJvZHVjdEluc3RhbGwuc3dmJyxcbiAgbWVkaWFFbGVtZW50SWQ6ICdyZWQ1cHJvLXN1YnNjcmliZXInLFxuICAvLyB3aXRoIEF1dG9zY2FsZSBlbmFibGVkIHNlcnZlciBvbmx5ID0+XG4gIHVzZUFkYXB0aXZlQml0cmF0ZUNvbnRyb2xsZXI6IGZhbHNlLFxuICBhYnJWYXJpYW50czogdW5kZWZpbmVkLFxuICBhYnJWYXJpYW50VXBncmFkZVNldHRpbmdzOiB7XG4gICAgbWluaW11bURvd25ncmFkZVBsYXliYWNrU3BhbjogMTAwMDAsIC8vIEFtb3VudCBvZiB0aW1lIHBsYXliYWNrIG5lZWRzIHRvIGV4Y2VlZCBiZXR3ZWVuIHBsYXliYWNrIGFuZCBkb3duZ3JhZGUgaW4gb3JkZXIgdG8gYmUgZWxpZ2libGUgZm9yIHVwZ3JhZGVcbiAgICB1cGdyYWRlOiBbXG4gICAgICB7XG4gICAgICAgIGxldmVsOiAxLFxuICAgICAgICByZXRyeVRpbWVvdXQ6IDBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxldmVsOiAyLFxuICAgICAgICByZXRyeVRpbWVvdXQ6IDEwMDAwIC8vIElmIG9uIGxldmVsIDIsIGluIDEwIHNlY29uZHMgYWZ0ZXIgcGxheWJhY2ssIHRyeSBhbmQgc3dpdGNoIHVwLlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbGV2ZWw6IDMsXG4gICAgICAgIHJldHJ5VGltZW91dDogMjAwMDAgLy8gSWYgb24gbGV2ZWwgMywgaW4gMjAgc2Vjb25kcyBhZnRlciBwbGF5YmFjaywgdHJ5IGFuZCBzd2l0Y2ggdXAuXG4gICAgICB9XG4gICAgXVxuICB9XG59XG5cbi8qKlxuICogTWFpbiBlbnRyeSBmb3IgRmxhc2gtYmFzZWQgU3Vic2NyaWJlciBvdmVyIFJUTVAuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKiBAZXh0ZW5kcyBTdWJzY3JpYmVyUGxheWJhY2tDb250cm9sbGVyXG4gKi9cbmNsYXNzIFJUTVBTdWJzY3JpYmVyIGV4dGVuZHMgUGxheWJhY2tDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX29wdGlvbnMgPSB1bmRlZmluZWRcbiAgICB0aGlzLl92aWV3ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fc291cmNlSGFuZGxlciA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2VsZW1lbnRJZCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2VtYmVkUHJvbWlzZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2dldEVtYmVkUHJvbWlzZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMub25FbWJlZENvbXBsZXRlKClcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHRoaXMub25FbWJlZEZhaWx1cmUoZXJyKSlcbiAgICB0aGlzLl92aWV3UmVzb2x2ZXIgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25SZXNvbHZlciA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICB9XG5cbiAgX2dldFZpZXdSZXNvbHZlclByb21pc2UgKCkge1xuICAgIHJldHVybiB0aGlzLl92aWV3UmVzb2x2ZXIucHJvbWlzZVxuICB9XG5cbiAgX2dldFN1YnNjcmlwdGlvblJlc29sdmVyUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uUmVzb2x2ZXIucHJvbWlzZVxuICB9XG5cbiAgX2dldEVtYmVkUHJvbWlzZSAoKSB7XG4gICAgdGhpcy5fZW1iZWRQcm9taXNlID0gRnV0dXJlLmNyZWF0ZUlmTm90RXhpc3QodGhpcy5fZW1iZWRQcm9taXNlKVxuICAgIHJldHVybiB0aGlzLl9lbWJlZFByb21pc2UucHJvbWlzZVxuICB9XG5cbiAgLyoqXG4gICAqIEdsb21zIHRoZSBQbGF5YmFjayBDb250cm9scyBBUEkgb250byB0aGlzIGluc3RhbmNlIHRvIHByb3ZpZGUgZWFzZSBpbiB1c2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVyXG4gICAqICAgICAgICBUaGUgbWV0aG9kIHJlcXVlc3QgaGFuZGxlciB0byBiaW5kIGFuZCBmb3J3YXJkIGNhbGxzIG9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dsb21Tb3VyY2VIYW5kbGVyQVBJIChoYW5kbGVyKSB7XG4gICAgLypcbiAgICAgKiB8fCBOb3RlIHx8XG4gICAgICogcGxheSgpIGlzIG5vdCBnbG9tbWVkIGFzIGl0IG5lZWRzIHRvIGJlIGhhbmRsZWQgZGlmZmVyZW50bHkuXG4gICAgICovXG5cbiAgICB0aGlzLnBhdXNlID0gaGFuZGxlci5wYXVzZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy5yZXN1bWUgPSBoYW5kbGVyLnJlc3VtZS5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy5zdG9wID0gaGFuZGxlci5zdG9wLmJpbmQoaGFuZGxlcilcbiAgICB0aGlzLm11dGUgPSBoYW5kbGVyLm11dGUuYmluZChoYW5kbGVyKVxuICAgIHRoaXMudW5tdXRlID0gaGFuZGxlci51bm11dGUuYmluZChoYW5kbGVyKVxuICAgIHRoaXMuc2V0Vm9sdW1lID0gaGFuZGxlci5zZXRWb2x1bWUuYmluZChoYW5kbGVyKVxuICAgIHRoaXMuc2Vla1RvID0gaGFuZGxlci5zZWVrVG8uYmluZChoYW5kbGVyKVxuICAgIHRoaXMudG9nZ2xlRnVsbFNjcmVlbiA9IGhhbmRsZXIudG9nZ2xlRnVsbFNjcmVlbi5iaW5kKGhhbmRsZXIpXG5cbiAgICAvLyBBZGFwdGl2ZSBCaXRyYXRlIENvbnRyb2xsZXIgLSBBdXRvc2NhbGUgZW5hYmxlZCBvbmx5LlxuICAgIHRoaXMuc2V0QUJSTGV2ZWwgPSBoYW5kbGVyLnNldEFCUkxldmVsLmJpbmQoaGFuZGxlcilcbiAgICB0aGlzLnNldEFCUlZhcmlhbnRzID0gaGFuZGxlci5zZXRBQlJWYXJpYW50cy5iaW5kKGhhbmRsZXIpXG4gICAgdGhpcy5zdG9wQUJSQ29udHJvbGxlciA9IGhhbmRsZXIuc3RvcEFCUkNvbnRyb2xsZXIuYmluZChoYW5kbGVyKVxuICAgIHRoaXMuc3RhcnRBQlJDb250cm9sbGVyID0gaGFuZGxlci5zdGFydEFCUkNvbnRyb2xsZXIuYmluZChoYW5kbGVyKVxuICAgIHRoaXMuc2V0QUJSVmFyaWFudFVwZ3JhZGVTZXR0aW5ncyA9IGhhbmRsZXIuc2V0QUJSVmFyaWFudFVwZ3JhZGVTZXR0aW5ncy5iaW5kKGhhbmRsZXIpXG5cbiAgICBoYW5kbGVyLm9uKCcqJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChldmVudC50eXBlLCB0aGlzLCBldmVudC5kYXRhKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFN0aWxsIGluIHVzZSwgYnV0IGhvbGQtb3ZlciBvZiBwcmV2aW91cyAzLnggU0RLIHZlcnNpb25zIGRlc2lnbmVkIHRvIHBhaXIgdmlld3MgYW5kIHN1YnNjcmliZXJzLiBJbiA0LjAuMCBpdCBoYXMgYmVlbiBpbnRlcm5hbGl6ZWQuXG4gICAqIEFQSSBkZXByZWNhdGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFZpZXdJZk5vdEV4aXN0IChjdXJyZW50VmlldywgbWVkaWFFbGVtZW50SWQgPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgY3VycmVudFZpZXcgPT09ICd1bmRlZmluZWQnICYmIG1lZGlhRWxlbWVudElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHZpZXcgPSBuZXcgUGxheWJhY2tWaWV3KG1lZGlhRWxlbWVudElkKVxuICAgICAgICB2aWV3LmF0dGFjaFN1YnNjcmliZXIodGhpcylcbiAgICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgZ2xvYmFsIGZ1bmN0aW9uIGhhbmRsZXJzIGZvciBFeHRlcm5hbEludGVyZmFjZSB0byBpbnZva2UgZm9yIEFQSSBjb21tdW5pY2F0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2VzdGFibGlzaEV4dEludEhhbmRsZXJzIChpZCkge1xuICAgIGRlYnVnKE5BTUUsIGBTdWJzY3JpYmVyIElEIHByb3ZpZGVkIHRvIGNsaWVudDogKCR7aWR9KS5gKVxuICAgIGNvbnN0IGludm9rZUZuID0gKGxhYmVsKSA9PiB7XG4gICAgICByZXR1cm4gWydzdWJzY3JpYmVyJywgbGFiZWwsIGlkLnNwbGl0KCctJykuam9pbignXycpXS5qb2luKCdfJylcbiAgICB9XG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb0Nvbm5lY3RDbG9zZWQnKV0gPSAoKSA9PiB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5DT05ORUNUSU9OX0NMT1NFRCwgdGhpcykpXG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb0Nvbm5lY3RTdWNjZXNzJyldID0gKCkgPT4gdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuQ09OTkVDVF9TVUNDRVNTLCB0aGlzKSlcbiAgICB3aW5kb3dbaW52b2tlRm4oJ3I1cHJvQ29ubmVjdEZhaWx1cmUnKV0gPSAoKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5DT05ORUNUX0ZBSUxVUkUsIHRoaXMpKVxuICAgIH1cbiAgICB3aW5kb3dbaW52b2tlRm4oJ3I1cHJvU3Vic2NyaWJlU3RvcCcpXSA9ICgpID0+IHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9TVE9QLCB0aGlzKSlcbiAgICB3aW5kb3dbaW52b2tlRm4oJ3I1cHJvU3Vic2NyaWJlTWV0YWRhdGEnKV0gPSAobWV0YWRhdGEpID0+IHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9NRVRBREFUQSwgdGhpcywgSlNPTi5wYXJzZShtZXRhZGF0YSkpKVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9TdWJzY3JpYmVVbnB1Ymxpc2gnKV0gPSAoKSA9PiB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5QTEFZX1VOUFVCTElTSCwgdGhpcykpXG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb1N1YnNjcmliZVNlbmRJbnZva2UnKV0gPSAocGF5bG9hZCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuU1VCU0NSSUJFX1NFTkRfSU5WT0tFLCB0aGlzLCB0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHBheWxvYWQpIDogcGF5bG9hZCkpXG4gICAgfVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9TdWJzY3JpYmVQbGF5UmVxdWVzdCcpXSA9ICgpID0+IHtcbiAgICAgIHRoaXMucGxheSgpXG4gICAgfVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9TdWJzY3JpYmVTdGFydCcpXSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvblJlc29sdmVyLnJlc29sdmUodGhpcylcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9TVEFSVCwgdGhpcykpXG4gICAgfVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9TdWJzY3JpYmVJbnZhbGlkTmFtZScpXSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvblJlc29sdmVyLnJlamVjdCgnTmV0U3RyZWFtLlBsYXkuU3RyZWFtTm90Rm91bmQnLCB0aGlzKVxuICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuU1VCU0NSSUJFX0lOVkFMSURfTkFNRSwgdGhpcykpXG4gICAgfVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9TdWJzY3JpYmVGYWlsJyldID0gKCkgPT4ge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uUmVzb2x2ZXIucmVqZWN0KCdOZXRTdHJlYW0uRmFpbGVkJywgdGhpcylcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9GQUlMLCB0aGlzKSlcbiAgICB9XG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb1N1YnNjcmliZVZvbHVtZUNoYW5nZScpXSA9IChwYXlsb2FkKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5WT0xVTUVfQ0hBTkdFLCB0aGlzLCB7XG4gICAgICAgIHZvbHVtZTogSlNPTi5wYXJzZShwYXlsb2FkKS52b2x1bWVcbiAgICAgIH0pKVxuICAgIH1cbiAgICB3aW5kb3dbaW52b2tlRm4oJ3I1cHJvU3Vic2NyaWJlUGxheWJhY2tUaW1lQ2hhbmdlJyldID0gKHBheWxvYWQpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHBheWxvYWQpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5QTEFZQkFDS19USU1FX1VQREFURSwgdGhpcywge1xuICAgICAgICB0aW1lOiBkYXRhLnZhbHVlLFxuICAgICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvblxuICAgICAgfSkpXG4gICAgfVxuICAgIHdpbmRvd1tpbnZva2VGbigncjVwcm9TdWJzY3JpYmVQbGF5YmFja1N0YXRlQ2hhbmdlJyldID0gKHBheWxvYWQpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBKU09OLnBhcnNlKHBheWxvYWQpLmNvZGVcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlCQUNLX1NUQVRFX0NIQU5HRSwgdGhpcywge1xuICAgICAgICBjb2RlOiBjb2RlLFxuICAgICAgICBzdGF0ZTogUGxheWJhY2tTdGF0ZVJlYWRhYmxlW2NvZGVdXG4gICAgICB9KSlcbiAgICB9XG4gICAgd2luZG93W2ludm9rZUZuKCdyNXByb1N1YnNjcmliZUFCUkxldmVsQ2hhbmdlJyldID0gKHBheWxvYWQpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHBheWxvYWQpXG4gICAgICBjb25zdCB7IGxldmVsLCBzdHJlYW0gfSA9IGRhdGFcbiAgICAgIGNvbnN0IHNldHRpbmdzID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoc3RyZWFtKSlcbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFJUTVBTdWJzY3JpYmVyRXZlbnRUeXBlcy5BQlJfTEVWRUxfQ0hBTkdFLCB0aGlzLCB7XG4gICAgICAgIGxldmVsOiBsZXZlbCxcbiAgICAgICAgc3RyZWFtOiBzZXR0aW5nc1xuICAgICAgfSkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gaW5pdGlhbGl6ZSB0aGUgSExTLWJhc2VkIFN1YnNjcmliZXIgYmFzZWQgb24gY29uZmlndXJhdGlvbi5cbiAgICogVGhlIHJldHVybmVkIGBQcm9taXNlYCB3aWxsIGVpdGhlciByZXNvbHZlIHdpdGggYSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZSBvciByZWplY3Qgd2l0aCBhbiBlcnJvciBgU3RyaW5nYCBpbiBmYWlsdXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gbWFwLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgaW5pdCAob3B0aW9ucykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgY29uc3QgdmVyc2lvbiA9IG9wdGlvbnMubWluRmxhc2hWZXJzaW9uIHx8IGRlZmF1bHRPcHRpb25zLm1pbkZsYXNoVmVyc2lvblxuICAgIGlmICghZW52aXJvbm1lbnQuc3VwcG9ydHNGbGFzaFZlcnNpb24odmVyc2lvbikpIHtcbiAgICAgIHdhcm4oTkFNRSwgYENvdWxkIG5vdCByZXNvbHZlIFJUTVBTdWJzY3JpYmVyIGluc3RhbmNlLiBSZXF1aXJlcyBtaW5pbXVtIEZsYXNoIFBsYXllciBpbnN0YWxsIG9mICR7dmVyc2lvbn0uYClcbiAgICAgIGRlZmVycmVkLnJlamVjdChgQ291bGQgbm90IHJlc29sdmUgUlRNUFN1YnNjcmliZXIgaW5zdGFuY2UuIFJlcXVpcmVzIG1pbmltdW0gRmxhc2ggUGxheWVyIGluc3RhbGwgb2YgJHt2ZXJzaW9ufS5gKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucylcbiAgICAgIGNvbnN0IGVzdGFibGlzaFNvdXJjZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgdGhpcy5fZ2V0Vmlld1Jlc29sdmVyUHJvbWlzZSgpXG4gICAgICAgIC50aGVuKHZpZXcgPT4ge1xuICAgICAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIgPSBuZXcgUlRNUFNvdXJjZUhhbmRsZXIodGhpcywgdmlldy52aWV3LCB0aGlzLmdldFR5cGUoKSlcbiAgICAgICAgICB0aGlzLl9nbG9tU291cmNlSGFuZGxlckFQSSh0aGlzLl9zb3VyY2VIYW5kbGVyKVxuICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBkZmQgPSB0aGlzLl9lbWJlZFByb21pc2VcbiAgICAgICAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIuYWRkU291cmNlKHRoaXMuX2VsZW1lbnRJZCwgdGhpcy5fb3B0aW9ucylcbiAgICAgICAgICAgICAgLnRoZW4oc3Vic2NyaWJlcklkID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lc3RhYmxpc2hFeHRJbnRIYW5kbGVycyhzdWJzY3JpYmVySWQpXG4gICAgICAgICAgICAgICAgZGZkLnJlc29sdmUodGhpcylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBkZmQucmVqZWN0KGVycikpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBlbnZpcm9ubWVudC5pbmplY3RTY3JpcHQodGhpcy5fb3B0aW9ucy5zd2ZvYmplY3RVUkwpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW1iZWREZmQgPSB0aGlzLl9lbWJlZFByb21pc2VcbiAgICAgICAgICAgIGRlYnVnKE5BTUUsICdTV0ZPYmplY3QgZW1iZWRkZWQuJylcbiAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VIYW5kbGVyKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3NvdXJjZUhhbmRsZXIuYWRkU291cmNlKHRoaXMuX2VsZW1lbnRJZCwgdGhpcy5fb3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbihzdWJzY3JpYmVySWQgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZXN0YWJsaXNoRXh0SW50SGFuZGxlcnMoc3Vic2NyaWJlcklkKVxuICAgICAgICAgICAgICAgICAgZW1iZWREZmQucmVzb2x2ZSh0aGlzKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICBlbWJlZERmZC5yZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRFbWJlZFByb21pc2UoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXN0YWJsaXNoU291cmNlSGFuZGxlcigpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2V0Vmlld0lmTm90RXhpc3QodGhpcy5fdmlldywgdGhpcy5fb3B0aW9ucy5tZWRpYUVsZW1lbnRJZClcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodGhpcylcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgZXJyb3IoTkFNRSwgYENvdWxkIG5vdCBlbWJlZCBGbGFzaC1iYXNlZCBSVE1QIFBsYXllci4gUmVhc29uOiAke2Vycn1gKVxuICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgdGhpcy5fc291cmNlSGFuZGxlci5kaXNjb25uZWN0KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycilcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFJUTVBTdWJzY3JpYmVyRXZlbnRUeXBlcy5FTUJFRF9GQUlMVVJFLCB0aGlzKSlcbiAgICAgICAgICB9KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoYENvdWxkIG5vdCBpbmplY3QgRmxhc2gtYmFzZWQgUGxheWVyIGludG8gdGhlIHBhZ2UuIFJlYXNvbjogJHtlLm1lc3NhZ2V9YClcbiAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoUlRNUFN1YnNjcmliZXJFdmVudFR5cGVzLkVNQkVEX0ZBSUxVUkUsIHRoaXMpKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuICB9XG5cbiAgLyoqXG4gICAqIFN0aWxsIGluIHVzZSBmb3IgYXNzaWduaW5nIGRvY3VtZW50IGVsZW1lbnQgdmlldyBtYW5hZ2VtZW50IHRvIHRoaXMgaW5zdGFuY2UuXG4gICAqIEFQSSBkZXByZWNhdGVkIGluIDQuMC4wLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2V0VmlldyAodmlldywgZWxlbWVudElkKSB7XG4gICAgdGhpcy5fdmlldyA9IHZpZXdcbiAgICB0aGlzLl9lbGVtZW50SWQgPSBlbGVtZW50SWRcbiAgICB0aGlzLl92aWV3UmVzb2x2ZXIucmVzb2x2ZSh0aGlzLl92aWV3KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBiZWdpbiBzdWJzY3JpYmluZyB0byBhIHN0cmVhbS5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogICAgICAgICAgVGhlIHJldHVybmVkIGBQcm9taXNlYCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IG9uIHN1Y2Nlc3NmdWwgc3RhcnQgb2YgcGxheWJhY2suXG4gICAqL1xuICBzdWJzY3JpYmUgKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRTdWJzY3JpcHRpb25SZXNvbHZlclByb21pc2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gc3RvcCBhIHN1YnNjcmlwdGlvbi5cbiAgICogVGhlIHJldHVybmVkIGBQcm9taXNlYCB3aWxsIGVpdGhlciByZXNvbHZlIG9yIHJlamVjdCBvbiBzdWNjZXNzZnVsIHN0b3Agb2Ygc3Vic2NyaXB0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgdW5zdWJzY3JpYmUgKCkge1xuICAgIGRlYnVnKE5BTUUsICdbdW5zdWJzY3JpYmVdJyk7XG4gICAgY29uc3QgY2IgPSAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9zb3VyY2VIYW5kbGVyLmRpc2Nvbm5lY3QoKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGNiKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gc3RhcnQgcGxheWluZyB0aGUgc3RyZWFtLlxuICAgKi9cbiAgcGxheSAoKSB7XG4gICAgZGVidWcoTkFNRSwgJ1twbGF5XScpO1xuICAgIHRoaXMuX2dldEVtYmVkUHJvbWlzZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5fc291cmNlSGFuZGxlci5wbGF5KClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGNvbXBsZXRpb24gb2YgZW1iZWRkaW5nIEZsYXNoIGVsZW1lbnQgaW50byBwYWdlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25FbWJlZENvbXBsZXRlICgpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2VtYmVkOmNvbXBsZXRlXScpXG4gICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoUlRNUFN1YnNjcmliZXJFdmVudFR5cGVzLkVNQkVEX1NVQ0NFU1MsIHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGZhaWx1cmUgaW4gZW1iZWRkaW5nIEZsYXNoIGVsZW1lbnQgaW50byBwYWdlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25FbWJlZEZhaWx1cmUgKGVycikge1xuICAgIGRlYnVnKE5BTUUsIGBbZW1iZWQ6ZmFpbHVyZV0gLSAke2Vycn1gKVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFJUTVBTdWJzY3JpYmVyRXZlbnRUeXBlcy5FTUJFRF9GQUlMVVJFLCB0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNvbm5lY3Rpb24gaGFuZGxlciBmb3IgcGxheWJhY2suXG4gICAqIFVzZWQgaW4gU2hhcmVkT2JqZWN0IGNvbW11bmljYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldENvbm5lY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VIYW5kbGVyXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyByZWZlcmVuY2UgdG8gcGxheWJhY2sgY29udHJvbHMgaWYgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQbGF5YmFja0NvbnRyb2xzfVxuICAgKi9cbiAgZ2V0Q29udHJvbHMgKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VIYW5kbGVyID8gdGhpcy5fc291cmNlSGFuZGxlci5nZXRDb250cm9scygpIDogdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5pdGlhbGl6YXRpb24gY29uZmlndXJhdGlvbiB1c2VkIGluIGBpbml0KClgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRhcmdldCB2aWV3IEVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBnZXRQbGF5ZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VIYW5kbGVyID8gdGhpcy5fc291cmNlSGFuZGxlci5nZXRFbWJlZGRlZFZpZXcoKSA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHR5cGUgb2YgaW1wbGVtZW50YXRpb246IGBSVE1QYC5cbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgZ2V0VHlwZSAoKSB7XG4gICAgcmV0dXJuIFBsYXliYWNrVHlwZXMuUlRNUC50b1VwcGVyQ2FzZSgpXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSVE1QU3Vic2NyaWJlclxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc3Vic2NyaWJlci9yZWQ1cHJvLXJ0bXAuanMiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IGVudmlyb25tZW50IGZyb20gJy4uL2Vudi9icm93c2VyJ1xuaW1wb3J0IHsgYXBwbHlPcmllbnRhdGlvbiB9IGZyb20gJy4uL2Vudi90cmFuc2xhdGlvbi11dGlsJ1xuaW1wb3J0IHsgbWV0YWRhdGFSZXNvbHV0aW9uVG9PYmplY3QgfSBmcm9tICcuLi91dGlsL29iamVjdCdcbmltcG9ydCB7IFBsYXliYWNrQ29udHJvbGxlciwgUGxheWJhY2tDb250cm9sc0ltcGwgfSBmcm9tICcuL2NvbnRyb2xzJ1xuaW1wb3J0IHsgUGxheWJhY2tTdGF0ZSwgUGxheWJhY2tTdGF0ZVJlYWRhYmxlIH0gZnJvbSAnLi9jb250cm9scy9zdGF0ZSdcbmltcG9ydCB7IFN1YnNjcmliZXJFdmVudCwgU3Vic2NyaWJlckV2ZW50VHlwZXMgfSBmcm9tICcuLi9ldmVudCdcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcbmltcG9ydCB7IGRlYnVnLCBlcnJvciwgd2FybiB9IGZyb20gJy4uL2xvZydcblxuY29uc3QgTkFNRSA9ICdITFNTb3VyY2VIYW5kbGVyJ1xuXG4vKipcbiAqIFNvdXJjZSBIYW5kbGVyIGZvciBITFMtYmFzZWQgU3Vic2NyaWJlcnMsIHdoaWNoIHNlcnZlcyBhcyBhIFByZXNlbnRhdGlvbiBDb250cm9sbGVyIGJldHdlZW4gdmlldyBhbmQgc3Vic2NyaWJlci5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqIEBleHRlbmRzIFN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xsZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBITFNTb3VyY2VIYW5kbGVyIGV4dGVuZHMgUGxheWJhY2tDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3RvciAobWVkaWEsIHR5cGUpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhXG4gICAgdGhpcy5jbG9uZSA9IHRoaXMubWVkaWEuY2xvbmVOb2RlKHRydWUpXG4gICAgdGhpcy5wYXJlbnQgPSB0aGlzLm1lZGlhLnBhcmVudE5vZGVcbiAgICB0aGlzLmhvbGRlciA9IHRoaXMuX2RldGVybWluZUhvbGRlcihtZWRpYSlcbiAgICB0aGlzLnBsYXllclR5cGUgPSB0eXBlXG4gICAgdGhpcy5faXNWT0QgPSBmYWxzZVxuICAgIHRoaXMuX2NvbnRyb2xzID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fcGxheWJhY2tOb3RpZmljYXRpb25DZW50ZXIgPSB0aGlzLm1lZGlhXG4gICAgZW52aXJvbm1lbnQub25GdWxsU2NyZWVuU3RhdGVDaGFuZ2UodGhpcy5faGFuZGxlRnVsbFNjcmVlbkNoYW5nZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIEVzdGFibGlzaGVkIERPTSBFbGVtZW50IG9yZGVyIGZvciBwbGF5YmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBtZWRpYVxuICAgKiAgICAgICAgVGhlIHRhcmdldCBtZWRpYSBlbGVtZW50OiBlLmcuLCBgdmlkZW9gIG9yIGBhdWRpb2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGV0ZXJtaW5lSG9sZGVyIChtZWRpYSkge1xuICAgIGlmIChtZWRpYS5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygncmVkNXByby1tZWRpYS1jb250YWluZXInKSkge1xuICAgICAgcmV0dXJuIG1lZGlhLnBhcmVudE5vZGVcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBtZWRpYS5wYXJlbnROb2RlXG4gICAgICBjb25zdCBkaXYgPSBlbnZpcm9ubWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtY29udGFpbmVyJylcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZGl2LCBtZWRpYSlcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChtZWRpYSlcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChtZWRpYSlcbiAgICAgIHJldHVybiBkaXZcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgb2YgRE9NIEVsZW1lbnQgb3JkZXIgdXBvbiBzdG9wIG9mIHBsYXliYWNrLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NsZWFuVXAgKCkge1xuICAgIC8vIFJldHVybiB0byBwcmlvciBET00gbWFuaXB1bGF0aW9uLlxuICAgIGxldCBlbCA9IHRoaXMubWVkaWFcbiAgICBsZXQgZWxQYXJlbnQgPSBlbC5wYXJlbnROb2RlXG4gICAgbGV0IG1lZGlhSG9sZGVyID0gdGhpcy5ob2xkZXJcbiAgICBpZiAoZWxQYXJlbnQpIHtcbiAgICAgIGVsUGFyZW50LnJlbW92ZUNoaWxkKGVsKVxuICAgICAgLy8gVGhlIG9iamVjdCBwYXJlbnQgY291bGQgYmUgYSB3cmFwcGVyIGNoaWxkIGluIHRoZSBvcmlnaW5hbCBwYXJlbnQgZWxlbWVudC5cbiAgICAgIGlmIChlbFBhcmVudCAhPT0gdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgZWxQYXJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbFBhcmVudClcbiAgICAgICAgbWVkaWFIb2xkZXIgPSB0aGlzLnBhcmVudFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBlbC5yZW1vdmUoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3YXJuKE5BTUUsIGBJc3N1ZSBpbiBET00gY2xlYW51cCBvZiBITFMgdmlkZW8gb2JqZWN0OiAke2UubWVzc2FnZX1gKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1lZGlhID0gdGhpcy5jbG9uZS5jbG9uZU5vZGUodHJ1ZSlcbiAgICBtZWRpYUhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLm1lZGlhKVxuICAgIGlmICh0aGlzLl9jb250cm9scykge1xuICAgICAgdGhpcy5fY29udHJvbHMuZGV0YWNoKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyBhbmQgaGFuZGxlcnMgZXZlbnQgbm90aWZpY2lhdGlvbnMgY29taW5nIGZyb20gdGhlIG1lZGlhIG5vdGlmaWVyIChlLmcuLCBgdmlkZW9gIG9yIGBhdWRpb2AgZWxlbWVudCkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBub3RpZmllclxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZFBsYXliYWNrSGFuZGxlcnMgKG5vdGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJvbHMgPSB0aGlzLmdldENvbnRyb2xzKClcbiAgICBjb25zdCBoYXNDb250cm9scyA9IHR5cGVvZiBjb250cm9scyAhPT0gJ3VuZGVmaW5lZCdcblxuICAgIG5vdGlmaWVyLm9uY2FucGxheSA9ICgpID0+IHtcbiAgICAgIGlmIChjb250cm9scykge1xuICAgICAgICBjb250cm9scy5lbmFibGUodHJ1ZSlcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlCQUNLX1NUQVRFX0NIQU5HRSwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGNvZGU6IFBsYXliYWNrU3RhdGUuQVZBSUxBQkxFLFxuICAgICAgICBzdGF0ZTogUGxheWJhY2tTdGF0ZVJlYWRhYmxlW1BsYXliYWNrU3RhdGUuQVZBSUxBQkxFXVxuICAgICAgfSkpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5WT0xVTUVfQ0hBTkdFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgdm9sdW1lOiBub3RpZmllci52b2x1bWVcbiAgICAgIH0pKVxuICAgIH1cbiAgICBub3RpZmllci5vbmR1cmF0aW9uY2hhbmdlID0gKGV2ZW50KSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGlmICghaXNOYU4obm90aWZpZXIuZHVyYXRpb24pICYmIE51bWJlci5pc0Zpbml0ZShub3RpZmllci5kdXJhdGlvbikpIHtcbiAgICAgICAgdGhpcy5pc1ZPRCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChoYXNDb250cm9scykge1xuICAgICAgICBjb250cm9scy5zZXRQbGF5YmFja0R1cmF0aW9uKG5vdGlmaWVyLmR1cmF0aW9uKVxuICAgICAgfVxuICAgIH1cbiAgICBub3RpZmllci5vbmVuZGVkID0gKCkgPT4ge1xuICAgICAgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6b25lbmRlZF0nKVxuICAgICAgaWYgKGhhc0NvbnRyb2xzKSB7XG4gICAgICAgIGNvbnRyb2xzLnNldFN0YXRlKFBsYXliYWNrU3RhdGUuSURMRSlcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlCQUNLX1NUQVRFX0NIQU5HRSwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGNvZGU6IFBsYXliYWNrU3RhdGUuSURMRSxcbiAgICAgICAgc3RhdGU6IFBsYXliYWNrU3RhdGVSZWFkYWJsZVtQbGF5YmFja1N0YXRlLklETEVdXG4gICAgICB9KSlcbiAgICB9XG4gICAgbm90aWZpZXIub250aW1ldXBkYXRlID0gKGV2ZW50KSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGlmIChoYXNDb250cm9scykge1xuICAgICAgICBjb250cm9scy5zZXRTZWVrVGltZShub3RpZmllci5jdXJyZW50VGltZSwgc2VsZi5pc1ZPRCA/IG5vdGlmaWVyLmR1cmF0aW9uIDogdW5kZWZpbmVkKVxuICAgICAgfVxuICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuUExBWUJBQ0tfVElNRV9VUERBVEUsIHVuZGVmaW5lZCwge1xuICAgICAgICB0aW1lOiBub3RpZmllci5jdXJyZW50VGltZSxcbiAgICAgICAgZHVyYXRpb246IG5vdGlmaWVyLmR1cmF0aW9uXG4gICAgICB9KSlcbiAgICB9XG4gICAgbm90aWZpZXIub25zZWVrZWQgPSAoZXZlbnQpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuLy8gICAgICBkZWJ1ZyhOQU1FLCAnU2Vla2VkLicpXG4gICAgfVxuICAgIG5vdGlmaWVyLm9uc2Vla2luZyA9IChldmVudCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4vLyAgICAgIGRlYnVnKE5BTUUsICdTZWVraW5nLicpXG4gICAgfVxuICAgIG5vdGlmaWVyLm9ucGxheSA9ICgpID0+IHtcbiAgICAgIGlmIChoYXNDb250cm9scykge1xuICAgICAgICBjb250cm9scy5zZXRTdGF0ZShQbGF5YmFja1N0YXRlLlBMQVlJTkcpXG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5QTEFZQkFDS19TVEFURV9DSEFOR0UsIHVuZGVmaW5lZCwge1xuICAgICAgICBjb2RlOiBQbGF5YmFja1N0YXRlLlBMQVlJTkcsXG4gICAgICAgIHN0YXRlOiBQbGF5YmFja1N0YXRlUmVhZGFibGVbUGxheWJhY2tTdGF0ZS5QTEFZSU5HXVxuICAgICAgfSkpXG4gICAgfVxuICAgIG5vdGlmaWVyLm9ucGF1c2UgPSAoKSA9PiB7XG4gICAgICBpZiAoaGFzQ29udHJvbHMpIHtcbiAgICAgICAgY29udHJvbHMuc2V0U3RhdGUoUGxheWJhY2tTdGF0ZS5QQVVTRUQpXG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5QTEFZQkFDS19TVEFURV9DSEFOR0UsIHVuZGVmaW5lZCwge1xuICAgICAgICBjb2RlOiBQbGF5YmFja1N0YXRlLlBBVVNFRCxcbiAgICAgICAgc3RhdGU6IFBsYXliYWNrU3RhdGVSZWFkYWJsZVtQbGF5YmFja1N0YXRlLlBBVVNFRF1cbiAgICAgIH0pKVxuICAgIH1cbiAgICBub3RpZmllci5vbnZvbHVtZWNoYW5nZSA9IChldmVudCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBpZiAoaGFzQ29udHJvbHMgJiYgY29udHJvbHMuZ2V0Vm9sdW1lKCkgIT09IHRoaXMubWVkaWEudm9sdW1lKSB7XG4gICAgICAgIGNvbnRyb2xzLnNldFZvbHVtZSh0aGlzLm1lZGlhLnZvbHVtZSlcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlZPTFVNRV9DSEFOR0UsIHVuZGVmaW5lZCwge1xuICAgICAgICB2b2x1bWU6IG5vdGlmaWVyLm11dGVkID8gMCA6IG5vdGlmaWVyLnZvbHVtZVxuICAgICAgfSkpXG4gICAgfVxuICAgIC8vIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAgbm90aWZpZXIub25lbmNyeXB0ZWQgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBlbmNyeXB0ZWQnKSB9XG4gICAgbm90aWZpZXIub25lbXB0aWVkID0gKCkgPT4geyBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDpldmVudF0gZW1wdGllZCcpIH1cbiAgICBub3RpZmllci5vbmxvYWRlZGRhdGEgPSAoKSA9PiB7IFxuICAgICAgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6ZXZlbnRdIGxvYWRlZGRhdGEnKSBcbiAgICB9XG4gICAgbm90aWZpZXIub25sb2FkZWRtZXRhZGF0YSA9ICgpID0+IHtcbiAgICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBsb2FkZWRtZXRhZGF0YScpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5TVUJTQ1JJQkVfU1RBUlQsIHVuZGVmaW5lZCwge30pKVxuICAgIH1cbiAgICBub3RpZmllci5vbmxvYWRzdGFydCA9ICgpID0+IHsgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6ZXZlbnRdIGxvYWRlZHN0YXJ0JykgfVxuICAgIG5vdGlmaWVyLm9uc3RhbGxlZCA9ICgpID0+IHsgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6ZXZlbnRdIHN0YWxsZWQnKSB9XG4gICAgbm90aWZpZXIub25zdXNwZW5kID0gKCkgPT4geyBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDpldmVudF0gc3VzcGVuZCcpIH1cbiAgICBub3RpZmllci5vbndhaXRpbmcgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSB3YWl0aW5nJykgfVxuICAgIC8vICAgIG5vdGlmaWVyLm9ucHJvZ3Jlc3MgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBwcm9ncmVzcy4gUGxheWVkOiAnICsgbm90aWZpZXIucGxheWVkLmxlbmd0aCArICcsIEJ1ZmZlcmVkOiAnICsgbm90aWZpZXIuYnVmZmVyZWQubGVuZ3RoICsgJy4nKSB9XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgY2hhbmdlIGluIGZ1bGxzY3JlZW4gc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNGdWxsU2NyZWVuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlRnVsbFNjcmVlbkNoYW5nZSAoaXNGdWxsU2NyZWVuKSB7XG4gICAgaWYgKGlzRnVsbFNjcmVlbikge1xuICAgICAgdGhpcy5ob2xkZXIuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250YWluZXItZnVsbC1zY3JlZW4nKVxuICAgICAgdGhpcy5tZWRpYS5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLWNvbnRhaW5lci1mdWxsLXNjcmVlbicpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5ob2xkZXIuY2xhc3NMaXN0LnJlbW92ZSgncmVkNXByby1tZWRpYS1jb250YWluZXItZnVsbC1zY3JlZW4nKVxuICAgICAgdGhpcy5tZWRpYS5jbGFzc0xpc3QucmVtb3ZlKCdyZWQ1cHJvLW1lZGlhLWNvbnRhaW5lci1mdWxsLXNjcmVlbicpXG4gICAgfVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLkZVTExfU0NSRUVOX1NUQVRFX0NIQU5HRSwgdW5kZWZpbmVkLCBpc0Z1bGxTY3JlZW4pKVxuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgc291cmNlIGVsZW1lbnQgb24gdGhlIEhMUyBwbGF5YmFjayBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqICAgICAgICBUaGUgcGxheWJhY2sgZW5kcG9pbnQgVVJMLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgVGhlIG1pbWUgdHlwZSBvZiB0aGUgcGxheWJhY2sgc3RyZWFtLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gbWFwLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2VtYmVkTWVkaWFTb3VyY2UgKHVybCwgdHlwZSwgb3B0aW9ucykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIHRyeSB7XG4gICAgICBsZXQgc291cmNlID0gZW52aXJvbm1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJylcbiAgICAgIHNvdXJjZS50eXBlID0gdHlwZVxuICAgICAgc291cmNlLnNyYyA9IHVybFxuICAgICAgaWYgKHRoaXMubWVkaWEuZmlyc3RDaGlsZCkge1xuICAgICAgICB0aGlzLm1lZGlhLmluc2VydEJlZm9yZShzb3VyY2UsIHRoaXMubWVkaWEuZmlyc3RDaGlsZClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLm1lZGlhLmFwcGVuZENoaWxkKHNvdXJjZSlcbiAgICAgIH1cbiAgICAgIHNlbGYub3JpZW50YXRpb24gPSAwXG4gICAgICBlbnZpcm9ubWVudC5vbk9yaWVudGF0aW9uTWV0YWRhdGEodGhpcy5tZWRpYSwgKG1ldGFkYXRhKSA9PiB7XG4gICAgICAgIGRlYnVnKE5BTUUsICdNZXRhZGF0YSByZWNlaXZlZDogJyArIEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhLCBudWxsLCAyKSlcbiAgICAgICAgaWYgKHNlbGYub3JpZW50YXRpb24gIT09IG1ldGFkYXRhLm9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgc2VsZi5vcmllbnRhdGlvbiA9IG1ldGFkYXRhLm9yaWVudGF0aW9uXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b0xheW91dE9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICBhcHBseU9yaWVudGF0aW9uKHNlbGYubWVkaWEsIHBhcnNlSW50KG1ldGFkYXRhLm9yaWVudGF0aW9uLCAxMCksIG1ldGFkYXRhUmVzb2x1dGlvblRvT2JqZWN0KG1ldGFkYXRhLnJlc29sdXRpb24pKVxuICAgICAgICAgICAgc2VsZi5oYW5kbGVPcmllbnRhdGlvbkNoYW5nZShwYXJzZUludChzZWxmLm9yaWVudGF0aW9uKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuT1JJRU5UQVRJT05fQ0hBTkdFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBwYXJzZUludChzZWxmLm9yaWVudGF0aW9uKSxcbiAgICAgICAgICAgIHZpZXdFbGVtZW50OiBzZWxmLm1lZGlhXG4gICAgICAgICAgfSkpXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuU1VCU0NSSUJFX01FVEFEQVRBLCB1bmRlZmluZWQsIG1ldGFkYXRhKSlcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm9yaWVudGF0aW9uID0gbWV0YWRhdGEub3JpZW50YXRpb25cbiAgICAgICAgfSlcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgZGVmZXJyZWQucmVqZWN0KGUubWVzc2FnZSlcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNldHVwIHRoZSBwcmVzZW50YXRpb24gb2YgYSBwbGF5YmFjayBzdHJlYW0gdXNpbmcgSExTLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqICAgICAgICBUaGUgZW5kcG9pbnQgVVJMIGZvciBwbGF5YmFjay5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogICAgICAgIFRoZSBtaW1lIHR5cGUgZm9yIHBsYXliYWNrLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gbWFwLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGFkZFNvdXJjZSAodXJsLCB0eXBlLCBvcHRpb25zKSB7XG4gICAgZGVidWcoTkFNRSwgJ1thZGRzb3VyY2VdJylcbiAgICB0aGlzLmhvbGRlciA9IHRoaXMuX2RldGVybWluZUhvbGRlcih0aGlzLm1lZGlhKVxuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgY29uc3QgaGFzRGVmaW5lZENvbnRyb2xzID0gb3B0aW9ucy5jb250cm9sc1xuICAgIGNvbnN0IGlzTXV0ZWQgPSBlbnZpcm9ubWVudC5oYXNBdHRyaWJ1dGVEZWZpbmVkKHRoaXMubWVkaWEsICdtdXRlZCcpXG4gICAgY29uc3QgaXNBdXRvcGxheSA9IGVudmlyb25tZW50Lmhhc0F0dHJpYnV0ZURlZmluZWQodGhpcy5tZWRpYSwgJ2F1dG9wbGF5JylcbiAgICAvLyBXaWxsIGhhbmRsZSBhdXRvcGxheSBleHBsaWNpdGx5IHRvIGNhcHR1cmUgaXNzdWVzIHdpdGggYnJvd3NlciByZXN0cmljdGlvbnMgYW5kIHNlbmQgbm90aWZpY2F0aW9ucy5cbiAgICBpZiAoIWlzTXV0ZWQpIHtcbiAgICAgIHRoaXMubWVkaWEuc2V0QXR0cmlidXRlKCdhdXRvcGxheScsIGZhbHNlKVxuICAgIH1cbiAgICBjb25zdCB1c2VQbGF5YmFja0NvbnRyb2xzID0gZW52aXJvbm1lbnQuaGFzQXR0cmlidXRlRGVmaW5lZCh0aGlzLm1lZGlhLCAnY29udHJvbHMnKSAmJiBlbnZpcm9ubWVudC5oYXNDbGFzc0RlZmluZWQodGhpcy5tZWRpYSwgJ3JlZDVwcm8tbWVkaWEnKVxuICAgIHRoaXMuX2VtYmVkTWVkaWFTb3VyY2UodXJsLCB0eXBlLCBvcHRpb25zKVxuICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgaWYgKGhhc0RlZmluZWRDb250cm9scyB8fCB1c2VQbGF5YmFja0NvbnRyb2xzKSB7XG4gICAgICAgICAgaWYgKGhhc0RlZmluZWRDb250cm9scykge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbHMgPSBvcHRpb25zLmNvbnRyb2xzXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbHMgPSBuZXcgUGxheWJhY2tDb250cm9sc0ltcGwodGhpcywgdGhpcy5ob2xkZXIpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubWVkaWEuY29udHJvbHMgPSBmYWxzZVxuICAgICAgICAgIHRoaXMuX2NvbnRyb2xzLnNldEFzVk9EKHRoaXMuaXNWT0QpXG4gICAgICAgICAgdGhpcy5fY29udHJvbHMuc2V0TXV0ZWRTdGF0ZShpc011dGVkKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FkZFBsYXliYWNrSGFuZGxlcnModGhpcy5fcGxheWJhY2tOb3RpZmljYXRpb25DZW50ZXIpXG4gICAgICAgIGlmIChpc0F1dG9wbGF5KSB7XG4gICAgICAgICAgdGhpcy5hdHRlbXB0QXV0b3BsYXkob3B0aW9ucy5tdXRlT25BdXRvcGxheVJlc3RyaWN0aW9uKVxuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlID0+IGRlZmVycmVkLnJlamVjdChlKSlcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY29ubmVjdCB0byBzdHJlYW0uXG4gICAqL1xuICBjb25uZWN0ICgpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2Nvbm5lY3RdJylcbiAgfVxuXG4gIGF0dGVtcHRBdXRvcGxheSAobXV0ZU9uQXV0b3BsYXkgPSBmYWxzZSkge1xuICAgIHRoaXMucGxheSgpXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIGlmIChtdXRlT25BdXRvcGxheSkge1xuICAgICAgICAgIHRoaXMubXV0ZSgpXG4gICAgICAgICAgdGhpcy5wbGF5KClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuQVVUT19QTEFZQkFDS19NVVRFRCwgdW5kZWZpbmVkLCB7ZWxlbWVudDogdGhpcy5tZWRpYX0pKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5BVVRPX1BMQVlCQUNLX0ZBSUxVUkUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgIGVycm9yOiAoZXJyLm1lc3NhZ2UgPyBlcnIubWVzc2FnZSA6IGVyciksXG4gICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy5tZWRpYVxuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuQVVUT19QTEFZQkFDS19GQUlMVVJFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIGVycm9yOiAoZS5tZXNzYWdlID8gZS5tZXNzYWdlIDogZSksXG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzLm1lZGlhXG4gICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICBwbGF5ICgpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDphY3Rpb25dIHBsYXknKVxuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgdHJ5IHtcbiAgICAgIGxldCBtYXliZVByb21pc2UgPSB0aGlzLm1lZGlhLnBsYXkoKVxuICAgICAgaWYgKG1heWJlUHJvbWlzZSkge1xuICAgICAgICBtYXliZVByb21pc2VcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDphY3Rpb25dIHBsYXkgKFNUQVJUKScpXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKClcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChkZWZlcnJlZC5yZWplY3QpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDphY3Rpb25dIHBsYXkgKFNUQVJUKScpXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yKE5BTUUsICdbdmlkZW9lbGVtZW50OmFjdGlvbl0gcGxheSAoRkFVTFQpIC0gJyArIGUubWVzc2FnZSlcbiAgICAgIGRlZmVycmVkLnJlamVjdChlKVxuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuICB9XG5cbiAgcGF1c2UgKCkge1xuICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmFjdGlvbl0gcGF1c2UnKVxuICAgIHRyeSB7XG4gICAgICB0aGlzLm1lZGlhLnBhdXNlKClcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmFjdGlvbl0gcGF1c2UgKEZBVUxUKSAtICcgKyBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHJlc3VtZSAoKSB7XG4gICAgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6YWN0aW9uXSByZXN1bWUnKVxuICAgIHRyeSB7XG4gICAgICBsZXQgbWF5YmVQcm9taXNlID0gdGhpcy5tZWRpYS5wbGF5KClcbiAgICAgIGlmIChtYXliZVByb21pc2UpIHtcbiAgICAgICAgbWF5YmVQcm9taXNlLnRoZW4oKCkgPT4gZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6YWN0aW9uXSBwbGF5IChTVEFSVCknKSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGVycm9yKE5BTUUsICdbdmlkZW9lbGVtZW50OmFjdGlvbl0gcGxheSAoRkFVTFQpICcgKyAoZXJyLm1lc3NhZ2UgPyBlcnIubWVzc2FnZSA6IGVycikpKVxuICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6YWN0aW9uXSByZXN1bWUgKEZBVUxUKSAtICcgKyBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHN0b3AgKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLm1lZGlhLnN0b3AoKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gb2suXG4gICAgfVxuICB9XG5cbiAgbXV0ZSAoKSB7XG4gICAgdGhpcy5tZWRpYS5tdXRlZCA9IHRydWVcbiAgICBjb25zdCBjb250cm9scyA9IHRoaXMuZ2V0Q29udHJvbHMoKVxuICAgIGlmIChjb250cm9scykge1xuICAgICAgY29udHJvbHMuc2V0TXV0ZWRTdGF0ZSh0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHVubXV0ZSAoKSB7XG4gICAgdGhpcy5tZWRpYS5tdXRlZCA9IGZhbHNlXG4gICAgY29uc3QgY29udHJvbHMgPSB0aGlzLmdldENvbnRyb2xzKClcbiAgICBpZiAoY29udHJvbHMpIHtcbiAgICAgIGNvbnRyb2xzLnNldE11dGVkU3RhdGUoZmFsc2UpXG4gICAgfVxuICB9XG5cbiAgc2V0Vm9sdW1lICh2YWx1ZSkge1xuICAgIHRoaXMudW5tdXRlKClcbiAgICB0aGlzLm1lZGlhLnZvbHVtZSA9IHZhbHVlXG4gIH1cblxuICBzZWVrVG8gKHBlcmNlbnRhZ2UsIGR1cmF0aW9uID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSA9IGR1cmF0aW9uID8gcGVyY2VudGFnZSAqIGR1cmF0aW9uIDogcGVyY2VudGFnZVxuICB9XG5cbiAgdG9nZ2xlRnVsbFNjcmVlbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGVudmlyb25tZW50LnRvZ2dsZUZ1bGxTY3JlZW4odGhpcy5ob2xkZXIpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlO1xuICAgICAgLy8gbmFkYS5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTm90aWZpY2F0aW9uIG9mIGN1cnJlbnQgc3RyZWFtIGJlaW5nIGluIGFuIHVucHVibGlzaGVkIHN0YXRlLlxuICAgKiBUaGUgc3RyZWFtIGVudGVycyBhbiB1bnB1Ymxpc2hlZCBzdGF0ZSB3aGVuIHRoZSBicm9hZGNhc3RlciBzdG9wIHRoZSBzdHJlYW0gYW5kIHRoZSBzdWJzY3JpYmVyIGlzIHN0aWxsIGNvbm5lY3RlZC5cbiAgICovXG4gIHVucHVibGlzaCAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc3RvcCgpXG4gICAgICB0aGlzLm1lZGlhLm9uZW5kZWQuY2FsbCh0aGlzLm1lZGlhKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gbmFkYS5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBkaXNjb25uZWN0IHBsYXliYWNrLlxuICAgKi9cbiAgZGlzY29ubmVjdCAoKSB7XG4gICAgdGhpcy5fY2xlYW5VcCgpXG4gIH1cblxuICAvKipcbiAgICogUmVzcG9uZGVyIHRvIGNoYW5nZSBpbiBvcmllbnRhdGlvbiByZWNlaXZlZCB0aHJvdWdoIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3JpZW50YXRpb25cbiAgICogICAgICAgIFRoZSBvcmllbnRhdGlvbiB2YWx1ZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZU9yaWVudGF0aW9uQ2hhbmdlIChvcmllbnRhdGlvbikge1xuICAgIGlmICh0aGlzLl9jb250cm9scyAmJiAob3JpZW50YXRpb24gJSAxODAgIT09IDApKSB7XG4gICAgICB0aGlzLmhvbGRlci5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLWJhY2tncm91bmQnKVxuICAgICAgdGhpcy5tZWRpYS5jbGFzc0xpc3QucmVtb3ZlKCdyZWQ1cHJvLW1lZGlhLWJhY2tncm91bmQnKVxuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIHx8IFNIQVJFRCBPQkpFQ1QgSU5URUdSQVRJT04gTk9UIEFWQUlMQUJMRSBGT1IgSExTIFBMQVlCQUNLIHx8XG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgYWRkU2hhcmVkT2JqZWN0UmVzcG9uc2VIYW5kbGVyIChoYW5kbGVyKSB7fVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICByZW1vdmVTaGFyZWRPYmplY3RSZXNwb25zZUhhbmRsZXIgKGhhbmRsZXIpIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHNlbmRUb1NoYXJlZE9iamVjdCAobmFtZSwgY2FsbE5hbWUsIG1lc3NhZ2UpIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHNlbmRQcm9wZXJ0eVRvU2hhcmVkT2JqZWN0IChuYW1lLCBrZXksIHZhbHVlKSB7fVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBnZXRSZW1vdGVTaGFyZWRPYmplY3QgKHNoYXJlZE9iamVjdE5hbWUpIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGNvbm5lY3RUb1NoYXJlZE9iamVjdCAoc2hhcmVkT2JqZWN0TmFtZSkge31cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgY2xvc2VTaGFyZWRPYmplY3QgKHNoYXJlZE9iamVjdE5hbWUpIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcGxheWJhY2sgY29udHJvbHMgaWYgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UGxheWJhY2tDb250cm9sc31cbiAgICovXG4gIGdldENvbnRyb2xzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udHJvbHNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdWJzY3JpYmVyIHR5cGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29udHJvbGxlci5cbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldFR5cGUgKCkge1xuICAgIHJldHVybiB0aGlzLnBsYXllclR5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZsYWcgb2YgdmlkZW8gYmVpbmcgcmVjb2duaXplZCBhcyBWT0QgKFZpZGVvIE9uIERlbWFuZCkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVk9EICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNWT0RcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGZsYWcgb2YgdmlkZW8gYmVpbmcgY29uc2lkZXJlZCBhcyBWT0QgKFZpZGVvIE9uIERlbWFuZCkuXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHNldCBpc1ZPRCAodmFsdWUpIHtcbiAgICB0aGlzLl9pc1ZPRCA9IHZhbHVlXG4gICAgaWYgKHRoaXMuX2NvbnRyb2xzKSB7XG4gICAgICB0aGlzLl9jb250cm9scy5zZXRBc1ZPRCh2YWx1ZSlcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBITFNTb3VyY2VIYW5kbGVyXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9zdWJzY3JpYmVyL3JlZDVwcm8tc291cmNlLWhhbmRsZXItaGxzLmpzIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBlbnZpcm9ubWVudCBmcm9tICcuLi9lbnYvYnJvd3NlcidcbmltcG9ydCB7IFBsYXliYWNrQ29udHJvbGxlciwgUGxheWJhY2tDb250cm9sc0ltcGwgfSBmcm9tICcuL2NvbnRyb2xzJ1xuaW1wb3J0IHsgUGxheWJhY2tTdGF0ZSwgUGxheWJhY2tTdGF0ZVJlYWRhYmxlIH0gZnJvbSAnLi9jb250cm9scy9zdGF0ZSdcbmltcG9ydCB7IFN1YnNjcmliZXJFdmVudCwgU3Vic2NyaWJlckV2ZW50VHlwZXMgfSBmcm9tICcuLi9ldmVudCdcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcbmltcG9ydCB7IGRlYnVnLCBlcnJvciwgd2FybiB9IGZyb20gJy4uL2xvZydcblxuY29uc3QgTkFNRSA9ICdSVENTb3VyY2VIYW5kbGVyJ1xuXG4vKipcbiAqIFNvdXJjZSBIYW5kbGVyIGZvciBXZWJSVEMtYmFzZWQgU3Vic2NyaWJlcnMsIHdoaWNoIHNlcnZlcyBhcyBhIFByZXNlbnRhdGlvbiBDb250cm9sbGVyIGJldHdlZW4gdmlldyBhbmQgc3Vic2NyaWJlci5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqIEBleHRlbmRzIFN1YnNjcmliZXJQbGF5YmFja0NvbnRyb2xsZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBSVENTb3VyY2VIYW5kbGVyIGV4dGVuZHMgUGxheWJhY2tDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3RvciAobWVkaWEsIHR5cGUpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhXG4gICAgdGhpcy5jbG9uZSA9IHRoaXMubWVkaWEuY2xvbmVOb2RlKHRydWUpXG4gICAgdGhpcy5wYXJlbnQgPSB0aGlzLm1lZGlhLnBhcmVudE5vZGVcbiAgICB0aGlzLmhvbGRlciA9IHRoaXMuX2RldGVybWluZUhvbGRlcih0aGlzLm1lZGlhKVxuICAgIHRoaXMucGxheWVyVHlwZSA9IHR5cGVcbiAgICB0aGlzLl9pc1ZPRCA9IGZhbHNlXG4gICAgdGhpcy5fY29udHJvbHMgPSB1bmRlZmluZWRcbiAgICB0aGlzLl9wbGF5YmFja05vdGlmaWNhdGlvbkNlbnRlciA9IHRoaXMubWVkaWFcbiAgICBlbnZpcm9ubWVudC5vbkZ1bGxTY3JlZW5TdGF0ZUNoYW5nZSh0aGlzLl9oYW5kbGVGdWxsU2NyZWVuQ2hhbmdlLmJpbmQodGhpcykpXG4gIH1cblxuICAvKipcbiAgICogRXN0YWJsaXNoZWQgRE9NIEVsZW1lbnQgb3JkZXIgZm9yIHBsYXliYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IG1lZGlhXG4gICAqICAgICAgICBUaGUgdGFyZ2V0IG1lZGlhIGVsZW1lbnQ6IGUuZy4sIGB2aWRlb2Agb3IgYGF1ZGlvYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXRlcm1pbmVIb2xkZXIgKG1lZGlhKSB7XG4gICAgaWYgKG1lZGlhLnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZWQ1cHJvLW1lZGlhLWNvbnRhaW5lcicpKSB7XG4gICAgICByZXR1cm4gbWVkaWEucGFyZW50Tm9kZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IG1lZGlhLnBhcmVudE5vZGVcbiAgICAgIGNvbnN0IGRpdiA9IGVudmlyb25tZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBkaXYuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250YWluZXInKVxuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShkaXYsIG1lZGlhKVxuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKG1lZGlhKVxuICAgICAgZGl2LmFwcGVuZENoaWxkKG1lZGlhKVxuICAgICAgcmV0dXJuIGRpdlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFc3RhYmxpc2hlZCBET00gRWxlbWVudCBvcmRlciBmb3IgcGxheWJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gbWVkaWFcbiAgICogICAgICAgIFRoZSB0YXJnZXQgbWVkaWEgZWxlbWVudDogZS5nLiwgYHZpZGVvYCBvciBgYXVkaW9gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NsZWFuVXAgKCkge1xuICAgIC8vIFJldHVybiB0byBwcmlvciBET00gbWFuaXB1bGF0aW9uLlxuICAgIGxldCBlbCA9IHRoaXMubWVkaWFcbiAgICBsZXQgZWxQYXJlbnQgPSBlbC5wYXJlbnROb2RlXG4gICAgbGV0IG1lZGlhSG9sZGVyID0gdGhpcy5ob2xkZXJcbiAgICBpZiAoZWxQYXJlbnQpIHtcbiAgICAgIGVsUGFyZW50LnJlbW92ZUNoaWxkKGVsKVxuICAgICAgLy8gVGhlIG9iamVjdCBwYXJlbnQgY291bGQgYmUgYSB3cmFwcGVyIGNoaWxkIGluIHRoZSBvcmlnaW5hbCBwYXJlbnQgZWxlbWVudC5cbiAgICAgIGlmIChlbFBhcmVudCAhPT0gdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgZWxQYXJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbFBhcmVudClcbiAgICAgICAgbWVkaWFIb2xkZXIgPSB0aGlzLnBhcmVudFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBlbC5yZW1vdmUoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3YXJuKE5BTUUsIGBJc3N1ZSBpbiBET00gY2xlYW51cCBvZiBXZWJSVEMgdmlkZW8gb2JqZWN0OiAke2UubWVzc2FnZX1gKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1lZGlhID0gdGhpcy5jbG9uZS5jbG9uZU5vZGUodHJ1ZSlcbiAgICBtZWRpYUhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLm1lZGlhKVxuICAgIGlmICh0aGlzLl9jb250cm9scykge1xuICAgICAgdGhpcy5fY29udHJvbHMuZGV0YWNoKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyBhbmQgaGFuZGxlcnMgZXZlbnQgbm90aWZpY2lhdGlvbnMgY29taW5nIGZyb20gdGhlIG1lZGlhIG5vdGlmaWVyIChlLmcuLCBgdmlkZW9gIG9yIGBhdWRpb2AgZWxlbWVudCkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBub3RpZmllclxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZFBsYXliYWNrSGFuZGxlcnMgKG5vdGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJvbHMgPSB0aGlzLmdldENvbnRyb2xzKClcbiAgICBjb25zdCBoYXNDb250cm9scyA9IHR5cGVvZiBjb250cm9scyAhPT0gJ3VuZGVmaW5lZCdcblxuICAgIG5vdGlmaWVyLm9uY2FucGxheSA9ICgpID0+IHtcbiAgICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBjYW5wbGF5JylcbiAgICAgIGlmIChjb250cm9scykge1xuICAgICAgICBjb250cm9scy5lbmFibGUodHJ1ZSlcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlCQUNLX1NUQVRFX0NIQU5HRSwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGNvZGU6IFBsYXliYWNrU3RhdGUuQVZBSUxBQkxFLFxuICAgICAgICBzdGF0ZTogUGxheWJhY2tTdGF0ZVJlYWRhYmxlW1BsYXliYWNrU3RhdGUuQVZBSUxBQkxFXVxuICAgICAgfSkpXG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5WT0xVTUVfQ0hBTkdFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgdm9sdW1lOiBub3RpZmllci52b2x1bWVcbiAgICAgIH0pKVxuICAgIH1cbiAgICBub3RpZmllci5vbmR1cmF0aW9uY2hhbmdlID0gKGV2ZW50KSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBkdXJhdGlvbmNoYW5nZScpXG4gICAgICBpZiAoIWlzTmFOKG5vdGlmaWVyLmR1cmF0aW9uKSAmJiBOdW1iZXIuaXNGaW5pdGUobm90aWZpZXIuZHVyYXRpb24pKSB7XG4gICAgICAgIHRoaXMuaXNWT0QgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoaGFzQ29udHJvbHMpIHtcbiAgICAgICAgY29udHJvbHMuc2V0UGxheWJhY2tEdXJhdGlvbihub3RpZmllci5kdXJhdGlvbilcbiAgICAgIH1cbiAgICB9XG4gICAgbm90aWZpZXIub25lbmRlZCA9ICgpID0+IHtcbiAgICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBlbmRlZCcpXG4gICAgICBpZiAoaGFzQ29udHJvbHMpIHtcbiAgICAgICAgY29udHJvbHMuc2V0U3RhdGUoUGxheWJhY2tTdGF0ZS5JRExFKVxuICAgICAgfVxuICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuUExBWUJBQ0tfU1RBVEVfQ0hBTkdFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgY29kZTogUGxheWJhY2tTdGF0ZS5JRExFLFxuICAgICAgICBzdGF0ZTogUGxheWJhY2tTdGF0ZVJlYWRhYmxlW1BsYXliYWNrU3RhdGUuSURMRV1cbiAgICAgIH0pKVxuICAgIH1cbiAgICBub3RpZmllci5vbnRpbWV1cGRhdGUgPSAoZXZlbnQpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgaWYgKGhhc0NvbnRyb2xzKSB7XG4gICAgICAgIGNvbnRyb2xzLnNldFNlZWtUaW1lKG5vdGlmaWVyLmN1cnJlbnRUaW1lLCBzZWxmLmlzVk9EID8gbm90aWZpZXIuZHVyYXRpb24gOiB1bmRlZmluZWQpXG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5QTEFZQkFDS19USU1FX1VQREFURSwgdW5kZWZpbmVkLCB7XG4gICAgICAgIHRpbWU6IG5vdGlmaWVyLmN1cnJlbnRUaW1lLFxuICAgICAgICBkdXJhdGlvbjogbm90aWZpZXIuZHVyYXRpb25cbiAgICAgIH0pKVxuICAgIH1cbiAgICBub3RpZmllci5vbnNlZWtlZCA9IChldmVudCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4vLyAgICAgIGRlYnVnKE5BTUUsICdTZWVrZWQuJylcbiAgICB9XG4gICAgbm90aWZpZXIub25zZWVraW5nID0gKGV2ZW50KSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbi8vICAgICAgZGVidWcoTkFNRSwgJ1NlZWtpbmcuJylcbiAgICB9XG4gICAgbm90aWZpZXIub25wbGF5ID0gKCkgPT4ge1xuICAgICAgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6ZXZlbnRdIHBsYXknKVxuICAgICAgaWYgKGhhc0NvbnRyb2xzKSB7XG4gICAgICAgIGNvbnRyb2xzLnNldFN0YXRlKFBsYXliYWNrU3RhdGUuUExBWUlORylcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlCQUNLX1NUQVRFX0NIQU5HRSwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGNvZGU6IFBsYXliYWNrU3RhdGUuUExBWUlORyxcbiAgICAgICAgc3RhdGU6IFBsYXliYWNrU3RhdGVSZWFkYWJsZVtQbGF5YmFja1N0YXRlLlBMQVlJTkddXG4gICAgICB9KSlcbiAgICB9XG4gICAgbm90aWZpZXIub25wYXVzZSA9ICgpID0+IHtcbiAgICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBwYXVzZScpXG4gICAgICBpZiAoaGFzQ29udHJvbHMpIHtcbiAgICAgICAgY29udHJvbHMuc2V0U3RhdGUoUGxheWJhY2tTdGF0ZS5QQVVTRUQpXG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5QTEFZQkFDS19TVEFURV9DSEFOR0UsIHVuZGVmaW5lZCwge1xuICAgICAgICBjb2RlOiBQbGF5YmFja1N0YXRlLlBBVVNFRCxcbiAgICAgICAgc3RhdGU6IFBsYXliYWNrU3RhdGVSZWFkYWJsZVtQbGF5YmFja1N0YXRlLlBBVVNFRF1cbiAgICAgIH0pKVxuICAgIH1cbiAgICBub3RpZmllci5vbnZvbHVtZWNoYW5nZSA9IChldmVudCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBpZiAoaGFzQ29udHJvbHMgJiYgY29udHJvbHMuZ2V0Vm9sdW1lKCkgIT09IHRoaXMubWVkaWEudm9sdW1lKSB7XG4gICAgICAgIGNvbnRyb2xzLnNldFZvbHVtZSh0aGlzLm1lZGlhLnZvbHVtZSlcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLlZPTFVNRV9DSEFOR0UsIHVuZGVmaW5lZCwge1xuICAgICAgICB2b2x1bWU6IG5vdGlmaWVyLm11dGVkID8gMCA6IG5vdGlmaWVyLnZvbHVtZVxuICAgICAgfSkpXG4gICAgfVxuICAgIC8vIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAgbm90aWZpZXIub25lbmNyeXB0ZWQgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBlbmNyeXB0ZWQnKSB9XG4gICAgbm90aWZpZXIub25lbXB0aWVkID0gKCkgPT4geyBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDpldmVudF0gZW1wdGllZCcpIH1cbiAgICBub3RpZmllci5vbmxvYWRlZGRhdGEgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBsb2FkZWRkYXRhJykgfVxuICAgIG5vdGlmaWVyLm9ubG9hZGVkbWV0YWRhdGEgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBsb2FkZWRtZXRhZGF0YScpIH1cbiAgICBub3RpZmllci5vbmxvYWRzdGFydCA9ICgpID0+IHsgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6ZXZlbnRdIGxvYWRlZHN0YXJ0JykgfVxuICAgIG5vdGlmaWVyLm9uc3RhbGxlZCA9ICgpID0+IHsgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6ZXZlbnRdIHN0YWxsZWQnKSB9XG4gICAgbm90aWZpZXIub25zdXNwZW5kID0gKCkgPT4geyBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDpldmVudF0gc3VzcGVuZCcpIH1cbiAgICBub3RpZmllci5vbndhaXRpbmcgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSB3YWl0aW5nJykgfVxuICAgIC8vICAgIG5vdGlmaWVyLm9ucHJvZ3Jlc3MgPSAoKSA9PiB7IGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmV2ZW50XSBwcm9ncmVzcy4gUGxheWVkOiAnICsgbm90aWZpZXIucGxheWVkLmxlbmd0aCArICcsIEJ1ZmZlcmVkOiAnICsgbm90aWZpZXIuYnVmZmVyZWQubGVuZ3RoICsgJy4nKSB9XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgY2hhbmdlIGluIGZ1bGxzY3JlZW4gc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNGdWxsU2NyZWVuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlRnVsbFNjcmVlbkNoYW5nZSAoaXNGdWxsU2NyZWVuKSB7XG4gICAgaWYgKGlzRnVsbFNjcmVlbikge1xuICAgICAgdGhpcy5ob2xkZXIuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250YWluZXItZnVsbC1zY3JlZW4nKVxuICAgICAgdGhpcy5tZWRpYS5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLWNvbnRhaW5lci1mdWxsLXNjcmVlbicpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5ob2xkZXIuY2xhc3NMaXN0LnJlbW92ZSgncmVkNXByby1tZWRpYS1jb250YWluZXItZnVsbC1zY3JlZW4nKVxuICAgICAgdGhpcy5tZWRpYS5jbGFzc0xpc3QucmVtb3ZlKCdyZWQ1cHJvLW1lZGlhLWNvbnRhaW5lci1mdWxsLXNjcmVlbicpXG4gICAgfVxuICAgIHRoaXMudHJpZ2dlcihuZXcgU3Vic2NyaWJlckV2ZW50KFN1YnNjcmliZXJFdmVudFR5cGVzLkZVTExfU0NSRUVOX1NUQVRFX0NIQU5HRSwgdW5kZWZpbmVkLCBpc0Z1bGxTY3JlZW4pKVxuIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBzZXR1cCB0aGUgcHJlc2VudGF0aW9uIG9mIGEgcGxheWJhY2sgc3RyZWFtIHVzaW5nIFdlYlJUQy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBpbml0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIG1hcC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBhZGRTb3VyY2UgKG9wdGlvbnMpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2FkZHNvdXJjZV0nKVxuICAgIHRoaXMuaG9sZGVyID0gdGhpcy5fZGV0ZXJtaW5lSG9sZGVyKHRoaXMubWVkaWEpXG4gICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWRQcm9taXNlKClcbiAgICBjb25zdCBoYXNEZWZpbmVkQ29udHJvbHMgPSBvcHRpb25zLmNvbnRyb2xzXG4gICAgY29uc3QgaXNNdXRlZCA9IGVudmlyb25tZW50Lmhhc0F0dHJpYnV0ZURlZmluZWQodGhpcy5tZWRpYSwgJ211dGVkJylcbiAgICBjb25zdCB1c2VQbGF5YmFja0NvbnRyb2xzID0gZW52aXJvbm1lbnQuaGFzQXR0cmlidXRlRGVmaW5lZCh0aGlzLm1lZGlhLCAnY29udHJvbHMnKSAmJiBlbnZpcm9ubWVudC5oYXNDbGFzc0RlZmluZWQodGhpcy5tZWRpYSwgJ3JlZDVwcm8tbWVkaWEnKVxuICAgIGlmIChoYXNEZWZpbmVkQ29udHJvbHMgfHwgdXNlUGxheWJhY2tDb250cm9scykge1xuICAgICAgaWYgKGhhc0RlZmluZWRDb250cm9scykge1xuICAgICAgICB0aGlzLl9jb250cm9scyA9IG9wdGlvbnMuY29udHJvbHNcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9jb250cm9scyA9IG5ldyBQbGF5YmFja0NvbnRyb2xzSW1wbCh0aGlzLCB0aGlzLmhvbGRlcilcbiAgICAgIH1cbiAgICAgIHRoaXMubWVkaWEuY29udHJvbHMgPSBmYWxzZVxuICAgICAgdGhpcy5fY29udHJvbHMuc2V0QXNWT0QodGhpcy5pc1ZPRClcbiAgICAgIHRoaXMuX2NvbnRyb2xzLnNldE11dGVkU3RhdGUoaXNNdXRlZClcbiAgICB9XG4gICAgdGhpcy5fYWRkUGxheWJhY2tIYW5kbGVycyh0aGlzLl9wbGF5YmFja05vdGlmaWNhdGlvbkNlbnRlcilcbiAgICBkZWZlcnJlZC5yZXNvbHZlKClcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY29ubmVjdCB0byBzdHJlYW0uXG4gICAqL1xuICBjb25uZWN0ICgpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW2Nvbm5lY3RdJylcbiAgfVxuXG4gIGF0dGVtcHRBdXRvcGxheSAobXV0ZU9uQXV0b3BsYXkgPSBmYWxzZSkge1xuICAgIHRoaXMucGxheSgpXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIGlmIChtdXRlT25BdXRvcGxheSkge1xuICAgICAgICAgIHRoaXMubXV0ZSgpXG4gICAgICAgICAgdGhpcy5wbGF5KClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuQVVUT19QTEFZQkFDS19NVVRFRCwgdW5kZWZpbmVkLCB7ZWxlbWVudDogdGhpcy5tZWRpYX0pKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5BVVRPX1BMQVlCQUNLX0ZBSUxVUkUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgIGVycm9yOiAoZXJyLm1lc3NhZ2UgPyBlcnIubWVzc2FnZSA6IGVyciksXG4gICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy5tZWRpYVxuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuQVVUT19QTEFZQkFDS19GQUlMVVJFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIGVycm9yOiAoZS5tZXNzYWdlID8gZS5tZXNzYWdlIDogZSksXG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzLm1lZGlhXG4gICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICBwbGF5ICgpIHtcbiAgICBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDphY3Rpb25dIHBsYXknKVxuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkUHJvbWlzZSgpXG4gICAgdHJ5IHtcbiAgICAgIGxldCBtYXliZVByb21pc2UgPSB0aGlzLm1lZGlhLnBsYXkoKVxuICAgICAgaWYgKG1heWJlUHJvbWlzZSkge1xuICAgICAgICBtYXliZVByb21pc2VcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDphY3Rpb25dIHBsYXkgKFNUQVJUKScpXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKClcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChkZWZlcnJlZC5yZWplY3QpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZyhOQU1FLCAnW3ZpZGVvZWxlbWVudDphY3Rpb25dIHBsYXkgKFNUQVJUKScpXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yKE5BTUUsICdbdmlkZW9lbGVtZW50OmFjdGlvbl0gcGxheSAoRkFVTFQpIC0gJyArIGUubWVzc2FnZSlcbiAgICAgIGRlZmVycmVkLnJlamVjdChlKVxuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuICB9XG5cbiAgcGF1c2UgKCkge1xuICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmFjdGlvbl0gcGF1c2UnKVxuICAgIHRyeSB7XG4gICAgICB0aGlzLm1lZGlhLnBhdXNlKClcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6YWN0aW9uXSBwYXVzZSAoQ0FUQ0g6OkZBVUxUKSAtICcgKyBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHJlc3VtZSAoKSB7XG4gICAgZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6YWN0aW9uXSByZXN1bWUnKVxuICAgIHRyeSB7XG4gICAgICBsZXQgbWF5YmVQcm9taXNlID0gdGhpcy5tZWRpYS5wbGF5KClcbiAgICAgIGlmIChtYXliZVByb21pc2UpIHtcbiAgICAgICAgbWF5YmVQcm9taXNlLnRoZW4oKCkgPT4gZGVidWcoTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6YWN0aW9uXSBwbGF5IChTVEFSVCknKSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHdhcm4oTkFNRSwgJ1t2aWRlb2VsZW1lbnQ6YWN0aW9uXSBwbGF5IChDQVRDSDo6RkFVTFQpICcgKyAoZXJyLm1lc3NhZ2UgPyBlcnIubWVzc2FnZSA6IGVycikpKVxuICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgd2FybihOQU1FLCAnW3ZpZGVvZWxlbWVudDphY3Rpb25dIHJlc3VtZSAoQ0FUQ0g6OkZBVUxUKSAtICcgKyBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHN0b3AgKCkge1xuICAgIGRlYnVnKE5BTUUsICdbdmlkZW9lbGVtZW50OmFjdGlvbl0gc3RvcCcpXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubWVkaWEuc3RvcCgpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAvLyBvay5cbiAgICB9XG4gIH1cblxuICBtdXRlICgpIHtcbiAgICB0aGlzLm1lZGlhLm11dGVkID0gdHJ1ZVxuICAgIGNvbnN0IGNvbnRyb2xzID0gdGhpcy5nZXRDb250cm9scygpXG4gICAgaWYgKGNvbnRyb2xzKSB7XG4gICAgICBjb250cm9scy5zZXRNdXRlZFN0YXRlKHRydWUpXG4gICAgfVxuICB9XG5cbiAgdW5tdXRlICgpIHtcbiAgICB0aGlzLm1lZGlhLm11dGVkID0gZmFsc2VcbiAgICBjb25zdCBjb250cm9scyA9IHRoaXMuZ2V0Q29udHJvbHMoKVxuICAgIGlmIChjb250cm9scykge1xuICAgICAgY29udHJvbHMuc2V0TXV0ZWRTdGF0ZShmYWxzZSlcbiAgICB9XG4gIH1cblxuICBzZXRWb2x1bWUgKHZhbHVlKSB7XG4gICAgdGhpcy51bm11dGUoKVxuICAgIHRoaXMubWVkaWEudm9sdW1lID0gdmFsdWVcbiAgfVxuXG4gIHNlZWtUbyAocGVyY2VudGFnZSwgZHVyYXRpb24gPSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lID0gZHVyYXRpb24gPyBwZXJjZW50YWdlICogZHVyYXRpb24gOiBwZXJjZW50YWdlXG4gIH1cblxuICB0b2dnbGVGdWxsU2NyZWVuICgpIHtcbiAgICB0cnkge1xuICAgICAgZW52aXJvbm1lbnQudG9nZ2xlRnVsbFNjcmVlbih0aGlzLmhvbGRlcilcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGU7XG4gICAgICAvLyBuYWRhLlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RpZmljYXRpb24gb2YgY3VycmVudCBzdHJlYW0gYmVpbmcgaW4gYW4gdW5wdWJsaXNoZWQgc3RhdGUuXG4gICAqIFRoZSBzdHJlYW0gZW50ZXJzIGFuIHVucHVibGlzaGVkIHN0YXRlIHdoZW4gdGhlIGJyb2FkY2FzdGVyIHN0b3AgdGhlIHN0cmVhbSBhbmQgdGhlIHN1YnNjcmliZXIgaXMgc3RpbGwgY29ubmVjdGVkLlxuICAgKi9cbiAgdW5wdWJsaXNoICgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5zdG9wKClcbiAgICAgIHRoaXMubWVkaWEub25lbmRlZC5jYWxsKHRoaXMubWVkaWEpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAvLyBuYWRhLlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGRpc2Nvbm5lY3QgcGxheWJhY2suXG4gICAqL1xuICBkaXNjb25uZWN0ICgpIHtcbiAgICB0aGlzLl9jbGVhblVwKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNwb25kZXIgdG8gY2hhbmdlIGluIG9yaWVudGF0aW9uIHJlY2VpdmVkIHRocm91Z2ggbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcmllbnRhdGlvblxuICAgKiAgICAgICAgVGhlIG9yaWVudGF0aW9uIHZhbHVlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlT3JpZW50YXRpb25DaGFuZ2UgKG9yaWVudGF0aW9uKSB7XG4gICAgaWYgKHRoaXMuX2NvbnRyb2xzICYmIChvcmllbnRhdGlvbiAlIDE4MCAhPT0gMCkpIHtcbiAgICAgIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtYmFja2dyb3VuZCcpXG4gICAgICB0aGlzLm1lZGlhLmNsYXNzTGlzdC5yZW1vdmUoJ3JlZDVwcm8tbWVkaWEtYmFja2dyb3VuZCcpXG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogfHwgU0hBUkVEIE9CSkVDVCBJTlRFR1JBVElPTiBOT1QgQVZBSUxBQkxFIEZPUiBITFMgUExBWUJBQ0sgfHxcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBhZGRTaGFyZWRPYmplY3RSZXNwb25zZUhhbmRsZXIgKGhhbmRsZXIpIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJlbW92ZVNoYXJlZE9iamVjdFJlc3BvbnNlSGFuZGxlciAoaGFuZGxlcikge31cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgc2VuZFRvU2hhcmVkT2JqZWN0IChuYW1lLCBjYWxsTmFtZSwgbWVzc2FnZSkge31cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgc2VuZFByb3BlcnR5VG9TaGFyZWRPYmplY3QgKG5hbWUsIGtleSwgdmFsdWUpIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGdldFJlbW90ZVNoYXJlZE9iamVjdCAoc2hhcmVkT2JqZWN0TmFtZSkge31cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgY29ubmVjdFRvU2hhcmVkT2JqZWN0IChzaGFyZWRPYmplY3ROYW1lKSB7fVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBjbG9zZVNoYXJlZE9iamVjdCAoc2hhcmVkT2JqZWN0TmFtZSkge31cblxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHBsYXliYWNrIGNvbnRyb2xzIGlmIGF2YWlsYWJsZS5cbiAgICpcbiAgICogQHJldHVybnMge1BsYXliYWNrQ29udHJvbHN9XG4gICAqL1xuICBnZXRDb250cm9scyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xzXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3Vic2NyaWJlciB0eXBlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvbnRyb2xsZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICBnZXRUeXBlICgpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXJUeXBlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBmbGFnIG9mIHZpZGVvIGJlaW5nIHJlY29nbml6ZWQgYXMgVk9EIChWaWRlbyBPbiBEZW1hbmQpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICovXG4gIGdldCBpc1ZPRCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVk9EXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBmbGFnIG9mIHZpZGVvIGJlaW5nIGNvbnNpZGVyZWQgYXMgVk9EIChWaWRlbyBPbiBEZW1hbmQpLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBzZXQgaXNWT0QgKHZhbHVlKSB7XG4gICAgdGhpcy5faXNWT0QgPSB2YWx1ZVxuICAgIGlmICh0aGlzLl9jb250cm9scykge1xuICAgICAgdGhpcy5fY29udHJvbHMuc2V0QXNWT0QodmFsdWUpXG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUlRDU291cmNlSGFuZGxlclxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc3Vic2NyaWJlci9yZWQ1cHJvLXNvdXJjZS1oYW5kbGVyLXJ0Yy5qcyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgKiBhcyBlbWJlZCBmcm9tICcuLi9lbnYvZW1iZWQnXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi4vZW52L2Jyb3dzZXInXG5pbXBvcnQgUlRNUFNoYXJlZE9iamVjdEhhbmRsZXIgZnJvbSAnLi4vaGVscGVyL3NoYXJlZG9iamVjdC1oZWxwZXItcnRtcCdcbmltcG9ydCB7IFBsYXliYWNrQ29udHJvbGxlciwgUGxheWJhY2tDb250cm9sc0ltcGwgfSBmcm9tICcuL2NvbnRyb2xzJ1xuaW1wb3J0IHsgUGxheWJhY2tTdGF0ZSwgUGxheWJhY2tTdGF0ZVJlYWRhYmxlIH0gZnJvbSAnLi9jb250cm9scy9zdGF0ZSdcbmltcG9ydCB7IFN1YnNjcmliZXJFdmVudCwgU3Vic2NyaWJlckV2ZW50VHlwZXMgfSBmcm9tICcuLi9ldmVudCdcbmltcG9ydCB7IERlZmVycmVkUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZSdcbmltcG9ydCB7IGRlYnVnLCB3YXJuIH0gZnJvbSAnLi4vbG9nJ1xuXG5jb25zdCBOQU1FID0gJ1JUTVBTb3VyY2VIYW5kbGVyJ1xuXG4vKipcbiAqIFNpbXBsZSB1dGlsIHRvIGNvbnZlcnQgdmFsdWUgdG8gSW50ZWdlci5cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHRvSW50ID0gKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMClcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSlcbiAgfVxufVxuXG4vKipcbiAqIFF1aWNrIHRlc3QgaWYgc3RyZWFtTmFtZSBoYXMgYW4gZXh0ZW5zaW9uIHdoaWNoIGluZmVycyBWT0QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyZWFtTmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGlzVk9EU3RyZWFtTmFtZSA9IChzdHJlYW1OYW1lKSA9PiB7XG4gIHJldHVybiAvXi4qXFwuKGZsdnxtcDR8bXAzKS8udGVzdChzdHJlYW1OYW1lKVxufVxuXG4vKipcbiAqIFNvdXJjZSBIYW5kbGVyIGZvciBGbGFzaC1iYXNlZCBTdWJzY3JpYmVycywgd2hpY2ggc2VydmVzIGFzIGEgUHJlc2VudGF0aW9uIENvbnRyb2xsZXIgYmV0d2VlbiB2aWV3IGFuZCBzdWJzY3JpYmVyLlxuICpcbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICogQGV4dGVuZHMgU3Vic2NyaWJlclBsYXliYWNrQ29udHJvbGxlclxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFJUTVBTb3VyY2VIYW5kbGVyIGV4dGVuZHMgUGxheWJhY2tDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3RvciAobm90aWZpY2F0aW9uQ2VudGVyLCBtZWRpYSwgdHlwZSwgc29SZXNwb25kZXIgPSB1bmRlZmluZWQpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhXG4gICAgdGhpcy5jbG9uZSA9IHRoaXMubWVkaWEuY2xvbmVOb2RlKHRydWUpXG4gICAgdGhpcy5wYXJlbnQgPSB0aGlzLm1lZGlhLnBhcmVudE5vZGVcbiAgICB0aGlzLmhvbGRlciA9IHRoaXMuX2RldGVybWluZUhvbGRlcih0aGlzLm1lZGlhKVxuICAgIHRoaXMucGxheWVyVHlwZSA9IHR5cGVcbiAgICB0aGlzLl9zd2ZJZCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuX2NvbnRyb2xzID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fc29SZXNwb25kZXIgPSBzb1Jlc3BvbmRlciB8fCBuZXcgUlRNUFNoYXJlZE9iamVjdEhhbmRsZXIoKVxuICAgIHRoaXMuX3BsYXliYWNrTm90aWZpY2F0aW9uQ2VudGVyID0gbm90aWZpY2F0aW9uQ2VudGVyXG4gICAgZW52aXJvbm1lbnQub25GdWxsU2NyZWVuU3RhdGVDaGFuZ2UodGhpcy5faGFuZGxlRnVsbFNjcmVlbkNoYW5nZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIEVzdGFibGlzaGVkIERPTSBFbGVtZW50IG9yZGVyIGZvciBwbGF5YmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBtZWRpYVxuICAgKiAgICAgICAgVGhlIHRhcmdldCBtZWRpYSBlbGVtZW50OiBlLmcuLCBgdmlkZW9gIG9yIGBhdWRpb2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGV0ZXJtaW5lSG9sZGVyIChtZWRpYSkge1xuICAgIGlmIChtZWRpYS5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygncmVkNXByby1tZWRpYS1jb250YWluZXInKSkge1xuICAgICAgcmV0dXJuIG1lZGlhLnBhcmVudE5vZGVcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBtZWRpYS5wYXJlbnROb2RlXG4gICAgICBjb25zdCBkaXYgPSBlbnZpcm9ubWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ3JlZDVwcm8tbWVkaWEtY29udGFpbmVyJylcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZGl2LCBtZWRpYSlcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChtZWRpYSlcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChtZWRpYSlcbiAgICAgIHJldHVybiBkaXZcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgb2YgRE9NIEVsZW1lbnQgb3JkZXIgdXBvbiBzdG9wIG9mIHBsYXliYWNrLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NsZWFuVXAgKCkge1xuICAgIC8vIFJldHVybiB0byBwcmlvciBET00gbWFuaXB1bGF0aW9uLlxuICAgIGxldCBlbCA9IHRoaXMuZ2V0RW1iZWRkZWRWaWV3KClcbiAgICBsZXQgZWxQYXJlbnQgPSBlbC5wYXJlbnROb2RlXG4gICAgbGV0IG1lZGlhSG9sZGVyID0gdGhpcy5ob2xkZXJcbiAgICBpZiAoZWxQYXJlbnQpIHtcbiAgICAgIGVsUGFyZW50LnJlbW92ZUNoaWxkKGVsKVxuICAgICAgLy8gVGhlIG9iamVjdCBwYXJlbnQgY291bGQgYmUgYSB3cmFwcGVyIGNoaWxkIGluIHRoZSBvcmlnaW5hbCBwYXJlbnQgZWxlbWVudC5cbiAgICAgIGlmIChlbFBhcmVudCAhPT0gdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgZWxQYXJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbFBhcmVudClcbiAgICAgICAgbWVkaWFIb2xkZXIgPSB0aGlzLnBhcmVudFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBlbC5yZW1vdmUoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3YXJuKE5BTUUsIGBJc3N1ZSBpbiBET00gY2xlYW51cCBvZiBmbGFzaCBvYmplY3QgZW1iZWQ6ICR7ZS5tZXNzYWdlfWApXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWVkaWEgPSB0aGlzLmNsb25lLmNsb25lTm9kZSh0cnVlKVxuICAgIG1lZGlhSG9sZGVyLmFwcGVuZENoaWxkKHRoaXMubWVkaWEpXG4gICAgaWYgKHRoaXMuX2NvbnRyb2xzKSB7XG4gICAgICB0aGlzLl9jb250cm9scy5kZXRhY2goKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ25zIGFuZCBoYW5kbGVycyBldmVudCBub3RpZmljaWF0aW9ucyBjb21pbmcgZnJvbSB0aGUgbWVkaWEgbm90aWZpZXIgKGUuZy4sIGB2aWRlb2Agb3IgYGF1ZGlvYCBlbGVtZW50KS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG5vdGlmaWVyXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkUGxheWJhY2tIYW5kbGVycyAobm90aWZpZXIpIHtcbiAgICBjb25zdCBjb250cm9scyA9IHRoaXMuZ2V0Q29udHJvbHMoKVxuICAgIGlmICh0eXBlb2YgY29udHJvbHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbm90aWZpZXIub24oU3Vic2NyaWJlckV2ZW50VHlwZXMuU1VCU0NSSUJFX1NUQVJULCAoKSA9PiB7XG4gICAgICBjb250cm9scy5zZXRTdGF0ZShQbGF5YmFja1N0YXRlLlBMQVlJTkcpXG4gICAgfSlcbiAgICBub3RpZmllci5vbihTdWJzY3JpYmVyRXZlbnRUeXBlcy5TVUJTQ1JJQkVfU1RPUCwgKCkgPT4ge1xuICAgICAgY29udHJvbHMuc2V0U3RhdGUoUGxheWJhY2tTdGF0ZS5JRExFKVxuICAgIH0pXG4gICAgbm90aWZpZXIub24oU3Vic2NyaWJlckV2ZW50VHlwZXMuUExBWV9VTlBVQkxJU0gsICgpID0+IHtcbiAgICAgIGNvbnRyb2xzLnNldFN0YXRlKFBsYXliYWNrU3RhdGUuSURMRSlcbiAgICB9KVxuICAgIG5vdGlmaWVyLm9uKFN1YnNjcmliZXJFdmVudFR5cGVzLlNVQlNDUklCRV9NRVRBREFUQSwgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuZGF0YS5kdXJhdGlvbikge1xuICAgICAgICBjb250cm9scy5zZXRQbGF5YmFja0R1cmF0aW9uKGV2ZW50LmRhdGEuZHVyYXRpb24pXG4gICAgICB9XG4gICAgfSlcbiAgICBub3RpZmllci5vbihTdWJzY3JpYmVyRXZlbnRUeXBlcy5WT0xVTUVfQ0hBTkdFLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnRyb2xzLnNldFZvbHVtZShldmVudC5kYXRhLnZvbHVtZSlcbiAgICB9KVxuICAgIG5vdGlmaWVyLm9uKFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlCQUNLX1NUQVRFX0NIQU5HRSwgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuZGF0YS5jb2RlID09PSBQbGF5YmFja1N0YXRlLkFWQUlMQUJMRSkge1xuICAgICAgICBjb250cm9scy5lbmFibGUodHJ1ZSlcbiAgICAgIH1cbiAgICAgIGNvbnRyb2xzLnNldFN0YXRlKGV2ZW50LmRhdGEuY29kZSlcbiAgICB9KVxuICAgIG5vdGlmaWVyLm9uKFN1YnNjcmliZXJFdmVudFR5cGVzLlBMQVlCQUNLX1RJTUVfVVBEQVRFLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnRyb2xzLnNldFNlZWtUaW1lKGV2ZW50LmRhdGEudGltZSwgZXZlbnQuZGF0YS5kdXJhdGlvbilcbiAgICB9KVxuICAgIG5vdGlmaWVyLm9uKFN1YnNjcmliZXJFdmVudFR5cGVzLkZVTExfU0NSRUVOX1NUQVRFX0NIQU5HRSwgKGV2ZW50KSA9PiB7XG4gICAgICBjb250cm9scy5vbkZ1bGxTY3JlZW5DaGFuZ2UoZXZlbnQuZGF0YSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGNoYW5nZSBpbiBmdWxsc2NyZWVuIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzRnVsbFNjcmVlblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2hhbmRsZUZ1bGxTY3JlZW5DaGFuZ2UgKGlzRnVsbFNjcmVlbikge1xuICAgIGNvbnN0IHN3Zm9iamVjdCA9IHRoaXMuZ2V0RW1iZWRkZWRWaWV3KClcbiAgICBpZiAoaXNGdWxsU2NyZWVuKSB7XG4gICAgICB0aGlzLmhvbGRlci5jbGFzc0xpc3QuYWRkKCdyZWQ1cHJvLW1lZGlhLWNvbnRhaW5lci1mdWxsLXNjcmVlbicpXG4gICAgICBzd2ZvYmplY3QuY2xhc3NMaXN0LmFkZCgncmVkNXByby1tZWRpYS1jb250YWluZXItZnVsbC1zY3JlZW4nKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3JlZDVwcm8tbWVkaWEtY29udGFpbmVyLWZ1bGwtc2NyZWVuJylcbiAgICAgIHN3Zm9iamVjdC5jbGFzc0xpc3QucmVtb3ZlKCdyZWQ1cHJvLW1lZGlhLWNvbnRhaW5lci1mdWxsLXNjcmVlbicpXG4gICAgfVxuICAgdGhpcy50cmlnZ2VyKG5ldyBTdWJzY3JpYmVyRXZlbnQoU3Vic2NyaWJlckV2ZW50VHlwZXMuRlVMTF9TQ1JFRU5fU1RBVEVfQ0hBTkdFLCB1bmRlZmluZWQsIGlzRnVsbFNjcmVlbikpXG4gfVxuXG4gIC8qKlxuICAgKiBFc3RhYmxpc2hlcyBldmVudCBoYW5kbGVyIGZvciByZWNvZ25pemluZyBjb21wbGV0ZSBvbiBlbWJlZCBhbmQgaW5pdGlhbGl6YXRpb24gb2YgRmxhc2gtYmFzZWQgc3Vic2NyaWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtQcm9taXNlfSBwcm9taXNlXG4gICAqICAgICAgICBUaGUgdGFyZ2V0IGBQcm9taXNlYCBvYmplY3QgdG8gcmVzb2x2ZSBvciByZWplY3QgdXBvbiBjb21wbGV0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFVwSW5pdENhbGxiYWNrIChwcm9taXNlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBlbnZpcm9ubWVudC5hZGRTdWJzY3JpcHRpb25Bc3NpZ25tZW50SGFuZGxlcihzdWNjZXNzSWQgPT4ge1xuICAgICAgZGVidWcoTkFNRSwgYEVtYmVkIGFuZCBpbml0KCkgY29tcGxldGUgZm9yIHN1YnNjcmliZXIgc3dmLiBzdWNjZXNzSWQoJHtzdWNjZXNzSWR9KS5gKVxuICAgICAgcHJvbWlzZS5yZXNvbHZlKHN1Y2Nlc3NJZClcbiAgICAgIHNlbGYuX3RlYXJEb3duSW5pdENhbGxiYWNrKClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFRlYXJzIGRvd24gZXN0YWJsaXNoZWQgaGFuZGxlciBmb3IgY29tcGxldGlvbiBvZiBGbGFzaCBlbWJlZCBhbmQgaW5pdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF90ZWFyRG93bkluaXRDYWxsYmFjayAoKSB7fVxuXG4gLyoqXG4gICAqIFJlcXVlc3QgdG8gc2V0dXAgdGhlIHByZXNlbnRhdGlvbiBvZiBhIHBsYXliYWNrIHN0cmVhbSB1c2luZyBITFMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAgICogICAgICAgIFRoZSBlbmRwb2ludCBVUkwgZm9yIHBsYXliYWNrLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIGNvbmZpZ3VyYXRpb24gbWFwLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3dmVXJsXG4gICAqICAgICAgICBUaGUgZW5kcG9pbnQgdXJsIHRvIHRoZSBTV0YgdG8gZW1iZWQuIERlZmF1bHRzIHRvIHJlbGF0aXZlIGxpbmsgdG8gcmVkNXByby1zdWJzY3JpYmVyLnN3ZiBvZiB0aGUgU0RLIGRpc3RyaWJ1dGlvbi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1pbkZsYXNoVmVyc2lvblxuICAgKiAgICAgICAgVGhlIG1pbmltdW0gRmxhc2ggdmVyc2lvbiBmb3Igc3VwcG9ydCBvZiBwbGF5YmFjay4gRGVmYXVsdDogYDEwLjAuMGAuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgYWRkU291cmNlIChzd2ZJZCwgb3B0aW9ucywgc3dmVXJsID0gbnVsbCwgbWluRmxhc2hWZXJzaW9uID0gbnVsbCkge1xuICAgIGRlYnVnKE5BTUUsICdbYWRkc291cmNlXScpXG4gICAgdGhpcy5fc3dmSWQgPSBzd2ZJZDtcbiAgICB0aGlzLmhvbGRlciA9IHRoaXMuX2RldGVybWluZUhvbGRlcih0aGlzLm1lZGlhKVxuICAgIGNvbnN0IHNvUmVzcG9uZGVyID0gdGhpcy5fc29SZXNwb25kZXJcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZFByb21pc2UoKVxuICAgIGNvbnN0IGhhc0RlZmluZWRDb250cm9scyA9IG9wdGlvbnMuY29udHJvbHNcbiAgICBjb25zdCBpc011dGVkID0gZW52aXJvbm1lbnQuaGFzQXR0cmlidXRlRGVmaW5lZCh0aGlzLm1lZGlhLCAnbXV0ZWQnKVxuICAgIGNvbnN0IHVzZVBsYXliYWNrQ29udHJvbHMgPSBlbnZpcm9ubWVudC5oYXNBdHRyaWJ1dGVEZWZpbmVkKHRoaXMubWVkaWEsICdjb250cm9scycpICYmIGVudmlyb25tZW50Lmhhc0NsYXNzRGVmaW5lZCh0aGlzLm1lZGlhLCAncmVkNXByby1tZWRpYScpXG4gICAgb3B0aW9ucy5zd2YgPSBzd2ZVcmwgfHwgb3B0aW9ucy5zd2ZcbiAgICBvcHRpb25zLm1pbkZsYXNoVmVyc2lvbiA9IG1pbkZsYXNoVmVyc2lvbiB8fCBvcHRpb25zLm1pbkZsYXNoVmVyc2lvblxuICAgIHRoaXMuX3NldFVwSW5pdENhbGxiYWNrKGRlZmVycmVkKVxuICAgIGNvbnN0IGNsYXNzTGlzdCA9IHRoaXMubWVkaWEuY2xhc3NMaXN0XG4gICAgZW1iZWQuZGVmaW5lRW1iZWRFbGVtZW50KHRoaXMubWVkaWEsIHRoaXMuaG9sZGVyKVxuICAgICAgLnRoZW4oZWxlbWVudElkID0+IHtcbiAgICAgICAgbGV0IGZsYXNodmFycyA9IHtcbiAgICAgICAgICBzdHJlYW06IG9wdGlvbnMuc3RyZWFtTmFtZSxcbiAgICAgICAgICBhcHA6IG9wdGlvbnMuY29udGV4dCA/IGAke29wdGlvbnMuYXBwfS8ke29wdGlvbnMuY29udGV4dH1gIDogb3B0aW9ucy5hcHAsXG4gICAgICAgICAgaG9zdDogb3B0aW9ucy5ob3N0LFxuICAgICAgICAgIG11dGVkOiBlbnZpcm9ubWVudC5oYXNBdHRyaWJ1dGVEZWZpbmVkKHRoaXMubWVkaWEsICdtdXRlZCcpLFxuICAgICAgICAgIGF1dG9wbGF5OiBlbnZpcm9ubWVudC5oYXNBdHRyaWJ1dGVEZWZpbmVkKHRoaXMubWVkaWEsICdhdXRvcGxheScpLFxuICAgICAgICAgIHVzZUFkYXB0aXZlQml0cmF0ZUNvbnRyb2xsZXI6IG9wdGlvbnMudXNlQWRhcHRpdmVCaXRyYXRlQ29udHJvbGxlclxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgIGZsYXNodmFycy5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvclxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmJ1ZmZlciAmJiAhaXNOYU4oTnVtYmVyKG9wdGlvbnMuYnVmZmVyKSkpIHtcbiAgICAgICAgICBmbGFzaHZhcnMuYnVmZmVyID0gb3B0aW9ucy5idWZmZXJcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy53aWR0aCAmJiAhaXNOYU4ob3B0aW9ucy53aWR0aCkpIHtcbiAgICAgICAgICBmbGFzaHZhcnMud2lkdGggPSB0b0ludChvcHRpb25zLndpZHRoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmhlaWdodCAmJiAhaXNOYU4ob3B0aW9ucy5oZWlnaHQpKSB7XG4gICAgICAgICAgZmxhc2h2YXJzLmhlaWdodCA9IHRvSW50KG9wdGlvbnMuaGVpZ2h0KVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVtYmVkV2lkdGggPT09ICcxMDAlJyB8fCBvcHRpb25zLmVtYmVkSGVpZ2h0ID09PSAnMTAwJScpIHtcbiAgICAgICAgICBmbGFzaHZhcnMuYXV0b3NpemUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3dmSWQgPSBzd2ZJZDtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbm5lY3Rpb25QYXJhbXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZmxhc2h2YXJzLmNvbm5lY3Rpb25QYXJhbXMgPSBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5jb25uZWN0aW9uUGFyYW1zKSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWJyVmFyaWFudHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZmxhc2h2YXJzLmFiclZhcmlhbnRzID0gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYWJyVmFyaWFudHMpKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hYnJWYXJpYW50VXBncmFkZVNldHRpbmdzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGZsYXNodmFycy5hYnJWYXJpYW50VXBncmFkZVNldHRpbmdzID0gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYWJyVmFyaWFudFVwZ3JhZGVTZXR0aW5ncykpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVtYmVkLmVtYmVkU3dmT2JqZWN0KHN3ZklkLCBvcHRpb25zLCBmbGFzaHZhcnMsIGVudmlyb25tZW50LmdldFN3Zk9iamVjdCgpLCBlbGVtZW50SWQpXG4gICAgICB9KVxuICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgaWYgKGhhc0RlZmluZWRDb250cm9scyB8fCB1c2VQbGF5YmFja0NvbnRyb2xzKSB7XG4gICAgICAgICAgaWYgKGhhc0RlZmluZWRDb250cm9scykge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbHMgPSBvcHRpb25zLmNvbnRyb2xzXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbHMgPSBuZXcgUGxheWJhY2tDb250cm9sc0ltcGwodGhpcywgdGhpcy5ob2xkZXIpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubWVkaWEuY29udHJvbHMgPSBmYWxzZVxuICAgICAgICAgIHRoaXMuX2NvbnRyb2xzLnNldEFzVk9EKGlzVk9EU3RyZWFtTmFtZShvcHRpb25zLnN0cmVhbU5hbWUpKVxuICAgICAgICAgIHRoaXMuX2NvbnRyb2xzLnNldE11dGVkU3RhdGUoaXNNdXRlZClcbiAgICAgICAgICBjb25zdCBlbWJlZGRlZCA9IHRoaXMuZ2V0RW1iZWRkZWRWaWV3KClcbiAgICAgICAgICBsZXQgaW5kZXggPSBjbGFzc0xpc3QubGVuZ3RoLCBjbGF6elxuICAgICAgICAgIHdoaWxlICgtLWluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGNsYXp6ID0gY2xhc3NMaXN0Lml0ZW0oaW5kZXgpXG4gICAgICAgICAgICBlbWJlZGRlZC5jbGFzc0xpc3QuYWRkKGNsYXp6KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hZGRQbGF5YmFja0hhbmRsZXJzKHRoaXMuX3BsYXliYWNrTm90aWZpY2F0aW9uQ2VudGVyKVxuICAgICAgICB0aGlzLnRyaWdnZXIobmV3IFN1YnNjcmliZXJFdmVudChTdWJzY3JpYmVyRXZlbnRUeXBlcy5QTEFZQkFDS19TVEFURV9DSEFOR0UsIHVuZGVmaW5lZCwge1xuICAgICAgICAgIGNvZGU6IFBsYXliYWNrU3RhdGUuQVZBSUxBQkxFLFxuICAgICAgICAgIHN0YXRlOiBQbGF5YmFja1N0YXRlUmVhZGFibGVbUGxheWJhY2tTdGF0ZS5BVkFJTEFCTEVdXG4gICAgICAgIH0pKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSlcbiAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgIHNvUmVzcG9uZGVyLmNvbm5lY3Qoc3dmSWQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGUgPT4gZGVmZXJyZWQucmVqZWN0KGUpKVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBjb25uZWN0IHRvIHN0cmVhbS5cbiAgICovXG4gIGNvbm5lY3QgKCkge1xuICAgIGRlYnVnKE5BTUUsICdbY29ubmVjdF0nKVxuICAgIHRyeSB7XG4gICAgICB0aGlzLmdldEVtYmVkZGVkVmlldygpLmNvbm5lY3QoKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfVxuXG4gIHBsYXkgKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmdldEVtYmVkZGVkVmlldygpLnBsYXkoKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfVxuXG5cbiAgcGF1c2UgKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmdldEVtYmVkZGVkVmlldygpLnBhdXNlKClcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH1cblxuICByZXN1bWUgKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmdldEVtYmVkZGVkVmlldygpLnJlc3VtZSgpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9XG5cbiAgc3RvcCAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZ2V0RW1iZWRkZWRWaWV3KCkuc3RvcCgpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9XG5cbiAgbXV0ZSAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZ2V0RW1iZWRkZWRWaWV3KCkubXV0ZSgpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9XG5cbiAgdW5tdXRlICgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5nZXRFbWJlZGRlZFZpZXcoKS51bm11dGUoKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfVxuXG4gIHNldFZvbHVtZSAodmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5nZXRFbWJlZGRlZFZpZXcoKS5zZXRWb2x1bWUodmFsdWUpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9XG5cbiAgc2Vla1RvICh2YWx1ZSwgZHVyYXRpb24gPSB1bmRlZmluZWQpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5nZXRFbWJlZGRlZFZpZXcoKS5zZWVrVG8odmFsdWUsIGR1cmF0aW9uKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZUZ1bGxTY3JlZW4gKCkge1xuICAgIHRyeSB7XG4gICAgICBlbnZpcm9ubWVudC50b2dnbGVGdWxsU2NyZWVuKHRoaXMuaG9sZGVyKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBkaXNjb25uZWN0IGZyb20gdGhlIHBsYXliYWNrIHN0cmVhbS5cbiAgICovXG4gIGRpc2Nvbm5lY3QgKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmdldEVtYmVkZGVkVmlldygpLmRpc2Nvbm5lY3QoKVxuICAgICAgZGVidWcoTkFNRSwgJ1tkaXNjb25uZWN0XScpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gbmFkYS5cbiAgICB9XG4gICAgdGhpcy5fY2xlYW5VcCgpXG4gICAgdGhpcy5fc29SZXNwb25kZXIuZGlzY29ubmVjdCgpXG4gIH1cblxuICAvKipcbiAgICogQXNzaWduIHJlc3BvbnNlIGhhbmRsZXIgZm9yIFNoYXJlZE9iamVjdCBjb21tdW5pY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gaGFuZGxlclxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWRkU2hhcmVkT2JqZWN0UmVzcG9uc2VIYW5kbGVyIChoYW5kbGVyKSB7XG4gICAgdGhpcy5fc29SZXNwb25kZXIuYWRkUmVzcG9uc2VIYW5kbGVyKGhhbmRsZXIpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHJlc3BvbnNlIGhhbmRsZXIgZnJvbSBTaGFyZWRPYmplY3QgY29tbXVuaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGhhbmRsZXJcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlbW92ZVNoYXJlZE9iamVjdFJlc3BvbnNlSGFuZGxlciAoaGFuZGxlcikge1xuICAgIHRoaXMuX3NvUmVzcG9uZGVyLnJlbW92ZVJlc3BvbnNlSGFuZGxlcihoYW5kbGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgbWVzc2FnZSBvbiBTaGFyZWRPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqICAgICAgICBUaGUgbmFtZSBvZiB0aGUgU2hhcmVkT2JqZWN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2FsbE5hbWVcbiAgICogICAgICAgIFRoZSBtZXRob2QgbmFtZSB0byBpbnZva2Ugb24gdGhlIFNoYXJlZE9iamVjdC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogICAgICAgIFRoZSBtZXNzYWdlIHRvIHNlbmQgYWxvbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZW5kVG9TaGFyZWRPYmplY3QgKG5hbWUsIGNhbGxOYW1lLCBtZXNzYWdlKSB7XG4gICAgdGhpcy5fc29SZXNwb25kZXIuc2VuZFRvU2hhcmVkT2JqZWN0KG5hbWUsIGNhbGxOYW1lLCBtZXNzYWdlKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgcHJvcGVydHkgdXBkYXRlIHRvIFNoYXJlZE9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBTaGFyZWRPYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICogICAgICAgIFRoZSBwcm9wZXJ0eSBuYW1lIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICBUaGUgcHJvcGVydHkgdmFsdWUgdG8gc2V0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2VuZFByb3BlcnR5VG9TaGFyZWRPYmplY3QgKG5hbWUsIGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9zb1Jlc3BvbmRlci5zZW5kUHJvcGVydHlUb1NoYXJlZE9iamVjdChuYW1lLCBrZXksIHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gZ2V0IHRoZSByZW1vdGUgU2hhcmVkT2JqZWN0IG9uIHRoZSBzZXJ2ZXIgYnkgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNoYXJlZE9iamVjdE5hbWVcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFJlbW90ZVNoYXJlZE9iamVjdCAoc2hhcmVkT2JqZWN0TmFtZSkge1xuICAgIHRoaXMuX3NvUmVzcG9uZGVyLmdldFJlbW90ZVNoYXJlZE9iamVjdChzaGFyZWRPYmplY3ROYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY29ubmVjdCB0byBTaGFyZWRPYmplY3QgYnkgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNoYXJlZE9iamVjdE5hbWVcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbm5lY3RUb1NoYXJlZE9iamVjdCAoc2hhcmVkT2JqZWN0TmFtZSkge1xuICAgIHRoaXMuX3NvUmVzcG9uZGVyLmNvbm5lY3RUb1NoYXJlZE9iamVjdChzaGFyZWRPYmplY3ROYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gY2xvc2UgdGhlIFNoYXJlZE9iamVjdCBieSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2hhcmVkT2JqZWN0TmFtZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2xvc2VTaGFyZWRPYmplY3QgKHNoYXJlZE9iamVjdE5hbWUpIHtcbiAgICB0aGlzLl9zb1Jlc3BvbmRlci5jbG9zZVNoYXJlZE9iamVjdChzaGFyZWRPYmplY3ROYW1lKVxuICB9XG5cbiAgLypcbiAgICogUmVxdWVzdCB0byBzdGFydCB0aGUgQWRhcHRpdmUgQml0cmF0ZSBDb250cm9sbGVyIHRvIGF1dG9tYXRpY2FsbHkgZG93bmdyYWRlIGFuZCB1cGdyYWRlIHN0cmVhbXMgYmFzZWQgb24gTmV0U3RhdHVzIGFuZCBiYW5kd2lkdGguXG4gICAqIFRoZSBBQlIgaXMgc3RhcnRlZCBhdXRvbWF0aWNhbGx5IHdoZW4gcHJvdmlkaW5nIHRoZSBgdXNlQWRhcHRpdmVCaXRyYXRlQ29udHJvbGxlcmAgY29uZmlndXJhdGlvbiBwcm9wZXJ0eS5cbiAgICpcbiAgICogTk9URTogQWRhcHRpdmUgQml0cmF0ZSBDb250cm9sbGVyIEFQSSBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIEF1dG9zY2FsZS1FbmFibGVkIFJlZDUgUHJvIFNlcnZlci5cbiAgICovXG4gIHN0YXJ0QUJSQ29udHJvbGxlciAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZ2V0RW1iZWRkZWRWaWV3KCkuc3RhcnRBQlJDb250cm9sbGVyKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBkZWJ1ZyhOQU1FLCBgQ291bGQgbm90IHN0YXJ0IHRoZSBBZGFwdGl2ZSBCaXRyYXRlIENvbnRyb2xsZXI6ICR7ZS5tZXNzYWdlfWApXG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogUmVxdWVzdCB0byBzdG9wIHRoZSBBZGFwdGl2ZSBCaXRyYXRlIENvbnRyb2xsZXIgZnJvbSBhdXRvbWF0aWNhbGx5IGRvd25ncmFkaW5nIGFuZCB1cGdyYWRpbmcgc3RyZWFtcyBiYXNlZCBvbiBOZXRTdGF0dXMgYW5kIGJhbmR3aWR0aC5cbiAgICpcbiAgICogTk9URTogQWRhcHRpdmUgQml0cmF0ZSBDb250cm9sbGVyIEFQSSBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIEF1dG9zY2FsZS1FbmFibGVkIFJlZDUgUHJvIFNlcnZlci5cbiAgICovXG4gIHN0b3BBQlJDb250cm9sbGVyICgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5nZXRFbWJlZGRlZFZpZXcoKS5zdG9wQUJSQ29udHJvbGxlcigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgZGVidWcoTkFNRSwgYENvdWxkIG5vdCBzdG9wIHRoZSBBZGFwdGl2ZSBCaXRyYXRlIENvbnRyb2xsZXI6ICR7ZS5tZXNzYWdlfWApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gdXNlIHRoZSBwcm92aWRlIEFCUiBWYXJpYW50cyB3aGVuIHBlcmZvcm1pbmcgQWRhcHRpdmUgQml0cmF0ZSBDb250cm9sLlxuICAgKiBSZXF1aXJlcyB0aGUgYHVzZUFkYXB0aXZlQml0cmF0ZUNvbnRyb2xsZXJgIGludGl0aWFsaXphdGlvbiBjb25maWd1cmF0aW9uIHByb3BlcnR5IHRvIGJlIGB0cnVlYC5cbiAgICogTk9URTogQWRhcHRpdmUgQml0cmF0ZSBDb250cm9sbGVyIEFQSSBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIEF1dG9zY2FsZS1FbmFibGVkIFJlZDUgUHJvIFNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFiclNldHRpbmdzXG4gICAqICAgICAgICBUT0RPOiBQcm92aWRlIEFCUiBWYXJpYW50IG9iamVjdCBzY2hlbWEgZXhwZWN0ZWQuXG4gICAqIEBwYXJhbSB7aW50fSBsZXZlbFxuICAgKiAgICAgICAgVGhlIGxldmVsIHRvIHN0YXJ0IG91dCBvbiBmb3IgQUJSLlxuICAgKi9cbiAgc2V0QUJSVmFyaWFudHMgKGFiclZhcmlhbnRzLCBsZXZlbCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBhYnJWYXJpYW50cyA9PT0gJ3N0cmluZycgPyBlbmNvZGVVUklDb21wb25lbnQoYWJyVmFyaWFudHMpIDogZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGFiclZhcmlhbnRzKSlcbiAgICAgIHRoaXMuZ2V0RW1iZWRkZWRWaWV3KCkuc2V0QUJSVmFyaWFudHModmFsdWUsIGxldmVsIHx8IDEpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGVidWcoTkFNRSwgYENvdWxkIG5vdCBzZXQgQUJSIFZhcmlhbnRzOiAke2UubWVzc2FnZX1gKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIHNldCBBQlIgbGV2ZWwgZXhwbGljaXRseS4gVGhlIFNESyBhdHRlbXB0cyB0byBwcm9wZXJseSBjaG9vc2UgdGhlIGNvcnJlY3QgbGV2ZWwgYmFzZWQgb24gYmFuZHdpZHRoLCBidXQgdGhpcyBBUEkgYWxsb3dzIGZvciB0aGUgbGV2ZWwgdG8gYmUgc2V0IGV4cGxpY2l0bHkuXG4gICAqXG4gICAqIE5PVEU6IEFkYXB0aXZlIEJpdHJhdGUgQ29udHJvbGxlciBBUEkgaXMgb25seSBhdmFpbGFibGUgd2hlbiB1c2luZyBBdXRvc2NhbGUtRW5hYmxlZCBSZWQ1IFBybyBTZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7aW50fSBsZXZlbFxuICAgKiAgICAgICAgVGhlIGxldmVsIHRvIHNldCB0aGUgQUJSIGJhc2VkIG9uIHRoZSB2YXJpYW50cyBwcm92aWRlZCBpbiBgc2V0QUJSVmFyaWFudHNgLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZpcm1cbiAgICogICAgICAgIEZsYWcgdG8gc2V0IGxldmVsIGZpcm1seSwgZGlzYWJsaW5nIHRoZSBhdXRvbWF0aWMgc3dpdGNoaW5nIG9mIHRoZSBBZGFwdGl2ZSBCaXRyYXRlIENvbnRyb2xsZXIuXG4gICAqL1xuICBzZXRBQlJMZXZlbCAobGV2ZWwsIGZpcm0pIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5nZXRFbWJlZGRlZFZpZXcoKS5zZXRBQlJMZXZlbChsZXZlbCwgISFmaXJtKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnKE5BTUUsIGBDb3VsZCBub3Qgc2V0IEFCUiBsZXZlbDogJHtlLm1lc3NhZ2V9YClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgdGhlIHVwZ3JhZGUgc2V0dGluZ3MgdG8gdXNlIGJ5IHRoZSBBZGFwdGl2ZSBCaXRyYXRlIENvbnRyb2wgaW4gdXBncmFkaW5nIHByZXZpb3VzbHkgZG93bmdyYWRlZCBzdHJlYW1zLlxuICAgKlxuICAgKiBOT1RFOiBBZGFwdGl2ZSBCaXRyYXRlIENvbnRyb2xsZXIgQVBJIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gdXNpbmcgQXV0b3NjYWxlLUVuYWJsZWQgUmVkNSBQcm8gU2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWJyVmFyaWFudFVwZ3JhZGVzXG4gICAqICAgICAgICBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgYXNzb2NpYXRlZCByZXRyeSBsaW1pdHMgYmFzZWQgb24gbGV2ZWxzIG9mIHRoZSBQcm92aXNpb24gVmFyaWFudHMuXG4gICAqIEBleGFtcGxlXG4gICAqIHtcbiAgICogIG1pbmltdW1Eb3duZ3JhZGVQbGF5YmFja1NwYW46IDIwMDAsXG4gICAqICB1cGdyYWRlOiBbXG4gICAqICAgIHtcbiAgICogICAgICBsZXZlbDogMSxcbiAgICogICAgICByZXRyeVRpbWVvdXQ6IDBcbiAgICogICAgfSxcbiAgICogICAge1xuICAgKiAgICAgIGxldmVsOiAyLFxuICAgKiAgICAgIHJldHJ5VGltZW91dDogMjAwMFxuICAgKiAgICB9LFxuICAgKiAgICB7XG4gICAqICAgICAgbGV2ZWw6IDMsXG4gICAqICAgICAgcmV0cnlUaW1lb3V0OiA0MDAwXG4gICAqICAgIH1cbiAgICogIF1cbiAgICogfVxuICAgKi9cbiAgc2V0QUJSVmFyaWFudFVwZ3JhZGVTZXR0aW5ncyAoYWJyVmFyaWFudFVwZ3JhZGVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIGFiclZhcmlhbnRzID09PSAnc3RyaW5nJyA/IGVuY29kZVVSSUNvbXBvbmVudChhYnJWYXJpYW50VXBncmFkZXMpIDogZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGFiclZhcmlhbnRVcGdyYWRlcykpXG4gICAgICB0aGlzLmdldEVtYmVkZGVkVmlldygpLnNldEFCUlZhcmlhbnRVcGdyYWRlU2V0dGluZ3ModmFsdWUpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGVidWcoTkFNRSwgYENvdWxkIG5vdCBzZXQgQUJSIFZhcmlhbnRzOiAke2UubWVzc2FnZX1gKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlbWJlZGRlZCBGbGFzaCBvYmplY3QgaWYgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RWxlbWVudH1cbiAgICovXG4gIGdldEVtYmVkZGVkVmlldyAoKSB7XG4gICAgcmV0dXJuIGVudmlyb25tZW50LmdldEVtYmVkT2JqZWN0KHRoaXMuX3N3ZklkKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcGxheWJhY2sgY29udHJvbHMgaWYgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UGxheWJhY2tDb250cm9sc31cbiAgICovXG4gIGdldENvbnRyb2xzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udHJvbHNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdWJzY3JpYmVyIHR5cGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29udHJvbGxlci5cbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldFR5cGUgKCkge1xuICAgIHJldHVybiB0aGlzLnBsYXllclR5cGVcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJUTVBTb3VyY2VIYW5kbGVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc3Vic2NyaWJlci9yZWQ1cHJvLXNvdXJjZS1oYW5kbGVyLXJ0bXAuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvaXMtaXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vbnVtYmVyL2lzLW5hblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvbnVtYmVyL2lzLW5hbi5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDEzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vd2Vhay1tYXBcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3dlYWstbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXNJdGVyYWJsZTIgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9pcy1pdGVyYWJsZVwiKTtcblxudmFyIF9pc0l0ZXJhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSXRlcmFibGUyKTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9nZXQtaXRlcmF0b3JcIik7XG5cbnZhciBfZ2V0SXRlcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0SXRlcmF0b3IyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge1xuICAgIHZhciBfYXJyID0gW107XG4gICAgdmFyIF9uID0gdHJ1ZTtcbiAgICB2YXIgX2QgPSBmYWxzZTtcbiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2kgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShhcnIpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kID0gdHJ1ZTtcbiAgICAgIF9lID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2FycjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNJdGVyYWJsZTMuZGVmYXVsdCkoT2JqZWN0KGFycikpKSB7XG4gICAgICByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbiAgICB9XG4gIH07XG59KCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mcm9tO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3InKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZScpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY29yZSAgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJylcbiAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLk1hcDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL21hcC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk51bWJlci5pc0Zpbml0ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL251bWJlci9pcy1maW5pdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5OdW1iZXIuaXNOYU47XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9udW1iZXIvaXMtbmFuLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDE1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmZyZWV6ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemUuanNcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gMTYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5TZXQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuV2Vha01hcDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3dlYWstbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlciwgSVRFUkFUT1Ipe1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHRvSW5kZXggICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGlzQXJyYXkgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIFNQRUNJRVMgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCl7XG4gIHZhciBDO1xuICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG4gICAgaWYoaXNPYmplY3QoQykpe1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qc1xuLy8gbW9kdWxlIGlkID0gMTY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGdldFdlYWsgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWtcbiAgLCBhbk9iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAsICRoYXMgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBhcnJheUZpbmQgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAsIGlkICAgICAgICAgICAgICAgID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKHRoYXQpe1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbihzdG9yZSwga2V5KXtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYofmluZGV4KXRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmKGRhdGEgPT09IHRydWUpdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanNcbi8vIG1vZHVsZSBpZCA9IDE3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpe1xuICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDE3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ludm9rZS5qc1xuLy8gbW9kdWxlIGlkID0gMTczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGRlc2NyaXB0b3IgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCl7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19rZXlvZi5qc1xuLy8gbW9kdWxlIGlkID0gMTc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBPYnNlcnZlciAgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlclxuICAsIHByb2Nlc3MgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgUHJvbWlzZSAgID0gZ2xvYmFsLlByb21pc2VcbiAgLCBpc05vZGUgICAgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbigpe1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKXBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUoaGVhZCl7XG4gICAgICBmbiAgID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgaWYoaGVhZClub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZihwYXJlbnQpcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZihpc05vZGUpe1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXJcbiAgfSBlbHNlIGlmKE9ic2VydmVyKXtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZVxuICAgICAgLCBub2RlICAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKXtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihmbil7XG4gICAgdmFyIHRhc2sgPSB7Zm46IGZuLCBuZXh0OiB1bmRlZmluZWR9O1xuICAgIGlmKGxhc3QpbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZighaGVhZCl7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWljcm90YXNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanNcbi8vIG1vZHVsZSBpZCA9IDE3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanNcbi8vIG1vZHVsZSBpZCA9IDE3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7XG4gIGFuT2JqZWN0KE8pO1xuICBpZighaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKXRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanNcbi8vIG1vZHVsZSBpZCA9IDE3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qc1xuLy8gbW9kdWxlIGlkID0gMTgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAxODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWluZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXQgICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvciA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIGl0ZXJGbiA9IGdldChpdCk7XG4gIGlmKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgcmV0dXJuIGFuT2JqZWN0KGl0ZXJGbi5jYWxsKGl0KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuaXNJdGVyYWJsZSA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8gPSBPYmplY3QoaXQpO1xuICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPXG4gICAgfHwgSXRlcmF0b3JzLmhhc093blByb3BlcnR5KGNsYXNzb2YoTykpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJylcbiAgLCBzdGVwICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBJdGVyYXRvcnMgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB0b0lPYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpe1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXtcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzXG4vLyBtb2R1bGUgaWQgPSAxODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24oJGZyZWV6ZSl7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpe1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanNcbi8vIG1vZHVsZSBpZCA9IDE5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGtleXMgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2xhc3NvZiAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc09iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuSW5zdGFuY2UgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsIHRhc2sgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgUFJPTUlTRSAgICAgICAgICAgID0gJ1Byb21pc2UnXG4gICwgVHlwZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgJFByb21pc2UgICAgICAgICAgID0gZ2xvYmFsW1BST01JU0VdXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgICAgICAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJ1xuICAsIGVtcHR5ICAgICAgICAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBJbnRlcm5hbCwgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpXG4gICAgICAsIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbihleGVjKXsgZXhlYyhlbXB0eSwgZW1wdHkpOyB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKVxuICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgOiBuZXcgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXtcbiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ICA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG52YXIgcGVyZm9ybSA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIGV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4ge2Vycm9yOiBlfTtcbiAgfVxufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7XG4gIGlmKHByb21pc2UuX24pcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMVxuICAgICAgLCBpICAgICA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uKHJlYWN0aW9uKXtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWxcbiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZVxuICAgICAgICAsIHJlamVjdCAgPSByZWFjdGlvbi5yZWplY3RcbiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluXG4gICAgICAgICwgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYoaGFuZGxlcil7XG4gICAgICAgICAgaWYoIW9rKXtcbiAgICAgICAgICAgIGlmKHByb21pc2UuX2ggPT0gMilvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihoYW5kbGVyID09PSB0cnVlKXJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKXtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpe1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXtcbiAgICAgIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoaXNOb2RlKXtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pe1xuICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3Ipe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZihhYnJ1cHQpdGhyb3cgYWJydXB0LmVycm9yO1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jXG4gICAgLCBpICAgICA9IDBcbiAgICAsIHJlYWN0aW9uO1xuICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXtcbiAgICByZWFjdGlvbiA9IGNoYWluW2krK107XG4gICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmKGlzTm9kZSl7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpe1xuICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZighcHJvbWlzZS5fYSlwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXNcbiAgICAsIHRoZW47XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICB2YXIgd3JhcHBlciA9IHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgICRyZWplY3QuY2FsbCh7X3c6IHByb21pc2UsIF9kOiBmYWxzZX0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZighVVNFX05BVElWRSl7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpe1xuICAgICAgdmFyIHJlYWN0aW9uICAgID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayAgICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgICA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX2EpdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX3Mpbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHByb21pc2UgID0gbmV3IEludGVybmFsO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCAgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpe1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4O1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAkJHJlc29sdmUoeCk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpe1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZXNvbHZlICAgID0gY2FwYWJpbGl0eS5yZXNvbHZlXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgdmFyIHZhbHVlcyAgICA9IFtdXG4gICAgICAgICwgaW5kZXggICAgID0gMFxuICAgICAgICAsIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2Upe1xuICAgICAgICB2YXIgJGluZGV4ICAgICAgICA9IGluZGV4KytcbiAgICAgICAgICAsIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkICA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXtcbiAgICB2YXIgQyAgICAgICAgICA9IHRoaXNcbiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gMTk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgTUVUQSAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZXG4gICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgc2hhcmVkICAgICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCB3a3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCB3a3NEZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKVxuICAsIGtleU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fa2V5b2YnKVxuICAsIGVudW1LZXlzICAgICAgID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJylcbiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBfY3JlYXRlICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGdPUE5FeHQgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JylcbiAgLCAkR09QRCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCAkRFAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgJGtleXMgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mXG4gICwgZFAgICAgICAgICAgICAgPSAkRFAuZlxuICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mXG4gICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sXG4gICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJylcbiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKVxuICAsIGlzRW51bSAgICAgICAgID0ge30ucHJvcGVydHlJc0VudW1lcmFibGVcbiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JylcbiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpXG4gICwgT1BTeW1ib2xzICAgICAgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKVxuICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV1cbiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbidcbiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpe1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpe1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpe1xuICAgIGlmKCFELmVudW1lcmFibGUpe1xuICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKVxuICAgICwgaSAgICA9IDBcbiAgICAsIGwgPSBrZXlzLmxlbmd0aFxuICAgICwga2V5O1xuICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgaXQgID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXtcbiAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90b1xuICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZighVVNFX05BVElWRSl7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKXtcbiAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5Jykpe1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtTeW1ib2w6ICRTeW1ib2x9KTtcblxuZm9yKHZhciBzeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTtcblxuZm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIGlmKGlzU3ltYm9sKGtleSkpcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICB2YXIgYXJncyA9IFtpdF1cbiAgICAgICwgaSAgICA9IDFcbiAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMjAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMClcbiAgLCByZWRlZmluZSAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgYXNzaWduICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpXG4gICwgd2VhayAgICAgICAgID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJylcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGdldFdlYWsgICAgICA9IG1ldGEuZ2V0V2Vha1xuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGVcbiAgLCB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlXG4gICwgdG1wICAgICAgICAgID0ge31cbiAgLCBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpe1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgaWYoaXNPYmplY3Qoa2V5KSl7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtNYXAnLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYobmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNyl7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgcHJvdG8gID0gJFdlYWtNYXAucHJvdG90eXBlXG4gICAgICAsIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpe1xuICAgICAgICBpZighdGhpcy5fZil0aGlzLl9mID0gbmV3IEludGVybmFsTWFwO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYud2Vhay1tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDIwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyl9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMjA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMjA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qc1xuLy8gbW9kdWxlIGlkID0gMjA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=