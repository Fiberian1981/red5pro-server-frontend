<%@ page import="java.io.*,java.util.regex.*,java.net.URL,java.nio.charset.Charset"%>
<%
  String cookieStr = "";
  String cookieName = "storedIpAddress";
  Pattern addressPattern = Pattern.compile("^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$");

  String ip = null;
  String localIp = NetworkUtil.getLocalIpAddress();
  boolean ipExists = false;

  Cookie cookie;
  Cookie[] cookies = request.getCookies();

  // If we have stored cookies check if already stored ip address by User.
  if(cookies != null) {
    for(int i = 0; i < cookies.length; i++) {
      cookie = cookies[i];
      cookieStr += cookie.getName() + "=" + cookie.getValue() + "; ";
      if(cookie.getName().equals(cookieName)) {
        ip = cookie.getValue();
        ip = addressPattern.matcher(ip).find() ? ip : null;
        break;
      }
    }
  }

  // Is a valid IP address from stored IP by User:
  if(ip == null) {

    ip = localIp;

    if(ip != null && addressPattern.matcher(ip).find()) {
      // The IP returned from NetworkUtils is valid...
    }
    else {

      // Invoke AWS service
      URL whatismyip = new URL("http://checkip.amazonaws.com");
      BufferedReader in = null;
      try {
        in = new BufferedReader(new InputStreamReader(whatismyip.openStream()));
        ip = in.readLine();
      }
      catch(Exception e) {
        ip = null;
      }
      finally {
        if (in != null) {
          try {
            in.close();
          }
          catch (IOException e) {
            e.printStackTrace();
          }
        }
      }

      // If failure in AWS service and/or IP still null => flag to show alert.
    }

  }

  ipExists = ip != null && !ip.isEmpty();
%>
<div id="ip-field">
  <% if (ipExists) { %>
    <p><span class="black-text">Your server IP address is:</span>&nbsp;&nbsp;<span id="ip-address-field" class="red-text medium-font-size"><%= ip %></span></p>
  <% } else { %>
    <p><span class="black-text">Uh-Oh!!</span></p>
  <% } %>
  <p><a id="ip-overlay-button" class="white-text" href="#">Why would I need to know the server IP address?</a></p>
  <p><a id="ip-incorrect-button" class="black-text" href="#">Not the correct IP address?</a></p>
</div>
<div id="ip-overlay" class="hidden">
  <p class="overlay-close-button"><a id="ip-overlay-close" href="#" class="red-text">Close</a></p>
  <p>This IP address needs to be provided to applications integrated with the Red5 Pro SDKs.</p>
  <p>If using the example projects from our <a id="header-github-link" class="link" href="http://github.com/red5pro" target="_blank">Github</a>, you will enter this IP into the <strong>Server</strong> input field of the Settings menu.</p>
  <hr>
  <p class="top-nudge"><a id="ip-overlay-ip-incorrect-button" href="#" class="red-text">Not the correct IP address?</a></p>
</div>
<div id="ip-address-overlay" class="hidden">
  <p class="overlay-close-button"><a id="ip-overlay-close" href="#" class="red-text">Close</a></p>
  <p class="black-text" style="font-weight: bold">Do you think the server IP address above is incorrect?</p>
  <div>
    <p>Select from the following suggestions:</p>
    <table id="ip-suggestions-table"></table>
  </div>
  <hr>
  <p class="black-text"> Or enter in the correct address below:</p>
  <p id="ip-input-error-field" class="hidden red-text">Invalid IP address.</p>
  <input id="ip-address-input-field" type="text">
  <button id="ip-address-input-submit">submit</button>
</div>
<style>
  .overlay-close-button {
    text-align: right;
    margin-top:-14px;
  }
  .top-nudge {
    padding-top: 14px;
  }
  #ip-suggestions-table {
    width: 100%;
    margin-bottom: 14px;
  }
  #ip-suggestions-table tr td {
    border: 1px solid #aaa;
    padding: 6px;
    margin: 0;
  }
</style>
<script>
  (function(document) {
    'use strict';

    // Host IP state
    var hasValidIp = <%= ipExists %>
    var suggestHostIp = window.location.hostname;
    var ipAddressField = document.getElementById('ip-address-field');
    var validIpRegex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/gi;

    // IP Overlay
    var isOverlayShown = false;
    var isIpAddressOverlayShown = false;
    var ipOverlay = document.getElementById('ip-overlay');
    var ipAddressOverlay = document.getElementById('ip-address-overlay');
    var ipOverlayButton = document.getElementById('ip-overlay-button');
    var ipIncorrectButton = document.getElementById('ip-incorrect-button');
    var ipOverlayIpIncorrectButton = document.getElementById('ip-overlay-ip-incorrect-button');
    var githubLink = document.getElementById('header-github-link');
    var ipAddressInput = document.getElementById('ip-address-input-field');
    var ipAddressInputSubmit = document.getElementById('ip-address-input-submit');
    var ipAddressErrorField = document.getElementById('ip-input-error-field');
    var ipSuggestionsTable = document.getElementById('ip-suggestions-table');

    var fillInIpSuggestions = function(currentIp) {
      var items = [];
      if(currentIp !== "<%= localIp %>") {
        items.push('<tr>' +
            '<td>' +
              '<a class="red-text ip-suggestion-link" href="#">' +
                '<%= localIp %>' +
              '</a>' +
            '</td>' +
          '</tr>');
      }
      items.push('<tr>' +
          '<td>' +
            '<a class="red-text ip-suggestion-link" href="#">' + suggestHostIp + '</a>' +
          '</td>' +
        '</tr>');
      ipSuggestionsTable.innerHTML = items.join('');
    }
    var updateAndStoreUserEnteredIpAddress = function(value) {
      var expiry = 60*60*24;
      ipAddressField.innerText = value;
      document.cookie = '<%= cookieName %>=' + value + '; max-age=' + expiry;
      fillInIpSuggestions(value);
    };

    var toggleOverlay = function(event) {
      event.preventDefault();
      event.stopPropagation();
      if(!isOverlayShown) {
        showOverlay();
      }
      else {
        hideOverlay();
      }
    };
    var showOverlay = function() {
      isOverlayShown = true;
      if(isIpAddressOverlayShown) {
         hideIpAddressOverlay();
      }
      ipOverlay.classList.remove('hidden');
    };
    var hideOverlay = function() {
      isOverlayShown = false;
      ipOverlay.classList.add('hidden');
    };
    var handleOverlayClose = function(event) {
      if(event.target !== githubLink &&
          event.target !== ipOverlayIpIncorrectButton) {
        event.stopPropagation();
        event.preventDefault();
        hideOverlay();
        return false;
      }
      else if(event.target === ipOverlayIpIncorrectButton) {
        toggleIpAddressOverlay(event);
      }
      return true;
    };
    var toggleIpAddressOverlay = function(event) {
      event.stopPropagation();
      event.preventDefault();
      if(!isIpAddressOverlayShown) {
        showIpAddressOverlay();
      }
      else {
        hideIpAddressOverlay();
      }
      return false;
    };
    var showIpAddressOverlay = function() {
      isIpAddressOverlayShown = true;
      if(isOverlayShown) {
        hideOverlay();
      }
      ipAddressOverlay.classList.remove('hidden');
    };
    var hideIpAddressOverlay = function() {
      isIpAddressOverlayShown = false;
      ipAddressOverlay.classList.add('hidden');
      ipAddressErrorField.classList.add('hidden');
    };
    var handleIpAddressOverlayClose = function(event) {
      if(event.target !== ipAddressInput &&
          event.target !== ipAddressInputSubmit &&
          !event.target.classList.contains('ip-suggestion-link')) {
          event.preventDefault();
          event.stopPropagation();
          hideIpAddressOverlay();
          return false;
      }
      else if(event.target.classList.contains('ip-suggestion-link')) {
        event.preventDefault();
        event.stopPropagation();
        hideIpAddressOverlay();
        updateAndStoreUserEnteredIpAddress(event.target.innerText);
        return false;
      }
      return true;
    };
    var handleIpAddressInputSubmit = function(event) {
      var value = ipAddressInput.value;
      event.stopPropagation();
      event.preventDefault();
      ipAddressErrorField.classList.add('hidden');
      // Removing Regex check for now.
//      if(validIpRegex.test(value)) {
        updateAndStoreUserEnteredIpAddress(value);
        hideIpAddressOverlay();
//      }
//      else {
//        ipAddressErrorField.classList.remove('hidden');
//      }
      return false;
    };
    ipOverlayButton.addEventListener('click', toggleOverlay);
    ipOverlayButton.addEventListener('mouseover', showOverlay);
    ipOverlay.addEventListener('mousedown', handleOverlayClose);
    ipOverlay.addEventListener('touchstart', handleOverlayClose);

    ipIncorrectButton.addEventListener('click', toggleIpAddressOverlay);
    ipAddressInput.addEventListener('keyup', function(event) {
      if(event.keyCode === 13) {
        handleIpAddressInputSubmit(event);
      }
    });
    ipAddressInputSubmit.addEventListener('click', handleIpAddressInputSubmit);
    ipAddressOverlay.addEventListener('mousedown', handleIpAddressOverlayClose);
    ipAddressOverlay.addEventListener('touchstart', handleIpAddressOverlayClose);

    fillInIpSuggestions("<%= ip %>");

  }(document));
</script>

